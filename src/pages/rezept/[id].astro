---
export const prerender = false;
import Layout from '../../layouts/Layout.astro';
import { db } from '../../lib/database';
import type { Recipe } from '../../types/recipe';
import CastManager from '../../components/CastManager.astro';

// Import the new components
import RecipeHeader from '../../components/recipe/details/RecipeHeader.astro';
import RecipeTags from '../../components/recipe/details/RecipeTags.astro';
import IngredientsList from '../../components/recipe/details/IngredientsList.astro';
import PreparationSteps from '../../components/recipe/details/PreparationSteps.astro';
import EditRecipeForm from '../../components/recipe/edit/EditRecipeForm.astro';
import RecipeImageGallery from '../../components/recipe/RecipeImageGallery.astro';
import EditFormActions from '../../components/recipe/edit/EditFormActions.astro';

const { id } = Astro.params;

// Rezept aus der Datenbank laden
let recipe: Recipe | null = null;
try {
  recipe = id ? db.getRecipe(id as string) : null;
  if (!recipe) {
    return Astro.redirect('/404');
  }
} catch (error) {
  console.error('Error loading recipe from database:', error);
  return Astro.redirect('/404');
}
---

<Layout title={recipe.title}>
  <div class="max-w-4xl mx-auto">
    <!-- Header Section -->
    <div class="flex items-center justify-between mb-8">
      <RecipeHeader recipe={recipe} />
      <CastManager />
    </div>

    <!-- View Mode Content -->
    <div id="view-content" class="space-y-6">
      <!-- Tags Section -->
      <RecipeTags recipe={recipe} />
      
      <!-- Image Gallery -->
      <RecipeImageGallery recipe={recipe} mode="view" />
      
      <!-- Recipe Sections -->
      <div class="grid md:grid-cols-2 gap-6">
        <!-- Ingredients Section -->
        <IngredientsList recipe={recipe} />

        <!-- Preparation Section -->
        <PreparationSteps recipe={recipe} />
      </div>
    </div>

    <!-- Edit Mode Content (initially hidden) -->
    <div id="edit-content" class="hidden">
      <EditRecipeForm recipe={recipe} />
      <div class="max-w-4xl mx-auto">
        <EditFormActions recipeId={recipe.id} />
      </div>
    </div>
  </div>

  <!-- Add to Shopping List Modal -->
  <div id="shopping-list-modal" class="modal hidden">
    <div class="modal-overlay"></div>
    <div class="modal-content modal-lg">
      <div class="modal-header">
        <h2 class="modal-title">Zu Einkaufsliste hinzufügen</h2>
        <button class="modal-close">&times;</button>
      </div>
      
      <div class="modal-body">
        <div id="shopping-lists-loading" class="text-center py-8">
          <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-green-500"></div>
          <p class="text-muted mt-2">Einkaufslisten werden geladen...</p>
        </div>
        
        <div id="shopping-lists-content" class="hidden">
          <div class="mb-4">
            <p class="text-gray-700 dark:text-gray-300 mb-4">
              Wählen Sie eine oder mehrere Einkaufslisten aus, zu denen das Rezept "<strong>{recipe.title}</strong>" hinzugefügt werden soll:
            </p>
            
            <div class="mb-4 flex items-center justify-between">
              <div class="flex items-center space-x-4">
                <label class="flex items-center space-x-2">
                  <input type="checkbox" id="select-all-lists" class="form-checkbox" />
                  <span class="text-sm font-medium">Alle auswählen</span>
                </label>
                <span id="selected-lists-count" class="text-sm text-muted">0 Listen ausgewählt</span>
              </div>
              <button id="add-to-selected-lists" class="btn btn-success btn-sm" disabled>
                Zu ausgewählten Listen hinzufügen
              </button>
            </div>
          </div>
          
          <div id="available-shopping-lists" class="space-y-3 max-h-80 overflow-y-auto">
            <!-- Shopping lists will be populated by JavaScript -->
          </div>
          
          <div id="no-shopping-lists" class="hidden text-center py-8">
            <svg class="w-12 h-12 mx-auto text-gray-400 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 5H7a2 2 0 00-2 2v11a2 2 0 002 2h5.586a1 1 0 00.707-.293l5.414-5.414a1 1 0 00.293-.707V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"/>
            </svg>
            <p class="text-muted mb-4">Keine Einkaufslisten gefunden</p>
            <a href="/einkaufslisten" class="btn btn-primary">
              Neue Einkaufsliste erstellen
            </a>
          </div>
        </div>
      </div>
      
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary modal-close">Schließen</button>
      </div>
    </div>
  </div>

  <script define:vars={{ recipe }}>
    // Timer functionality
    document.querySelectorAll('.timer-trigger').forEach(button => {
      button.addEventListener('click', (e) => {
        const target = e.target;
        const timeText = target.dataset.time || '';
        const recipeName = target.dataset.recipeName || recipe.title;
        const stepDescription = target.dataset.stepDescription || '';
        const stepId = target.dataset.stepId || '';
        
        // Parse time string correctly to handle hours and minutes with decimals
        function parseTimeToSeconds(timeStr) {
          const str = timeStr.toLowerCase();
          let totalMinutes = 0;
          
          // Match hours (Stunden, Std.) - support decimals like 1,5 or 1.5
          const hourMatch = str.match(/(\d+(?:[,\.]\d+)?)\s*(?:stunden?|std\.?)/i);
          if (hourMatch) {
            const hours = parseFloat(hourMatch[1].replace(',', '.'));
            totalMinutes += hours * 60;
          }
          
          // Match minutes (Minuten, Min.) - support decimals like 2,5 or 2.5
          const minuteMatch = str.match(/(\d+(?:[,\.]\d+)?)\s*(?:minuten?|min\.?)/i);
          if (minuteMatch) {
            const minutes = parseFloat(minuteMatch[1].replace(',', '.'));
            totalMinutes += minutes;
          }
          
          // If no specific unit found, assume minutes and support decimals
          if (totalMinutes === 0) {
            const numberMatch = str.match(/(\d+(?:[,\.]\d+)?)/);
            if (numberMatch) {
              totalMinutes = parseFloat(numberMatch[1].replace(',', '.'));
            }
          }
          
          return Math.round(totalMinutes * 60); // Convert to seconds and round
        }
        
        const seconds = parseTimeToSeconds(timeText);
        
        // Call timer with recipe context and navigation info
        window.startTimer(timeText, seconds, recipeName, stepDescription, true, recipe.id, stepId);
      });
    });

    // Portion scaling functionality
    const currentServingsElement = document.getElementById('current-servings');
    const decreaseButton = document.getElementById('decrease-servings');
    const increaseButton = document.getElementById('increase-servings');
    const resetButton = document.getElementById('reset-servings');
    
    if (currentServingsElement && decreaseButton && increaseButton && resetButton) {
      const originalServings = parseInt(currentServingsElement.getAttribute('data-original') || '1');
      
      function updateServings(newServings) {
        if (newServings < 1) newServings = 1;
        if (newServings > 99) newServings = 99;
        
        if (currentServingsElement) {
          currentServingsElement.textContent = newServings.toString();
        }
        
        // Show/hide reset button
        if (resetButton) {
          if (newServings !== originalServings) {
            resetButton.style.display = 'inline-block';
          } else {
            resetButton.style.display = 'none';
          }
        }
        
        // Calculate scaling factor
        const scalingFactor = newServings / originalServings;
        
        // Update all ingredient amounts
        document.querySelectorAll('.ingredient-amount').forEach((element) => {
          const htmlElement = element;
          const originalAmount = parseFloat(htmlElement.getAttribute('data-original-amount') || '0');
          const amountValueElement = element.querySelector('.amount-value');
          
          if (amountValueElement && !isNaN(originalAmount)) {
            let scaledAmount = originalAmount * scalingFactor;
            
            // Round to reasonable decimal places
            if (scaledAmount < 1) {
              scaledAmount = Math.round(scaledAmount * 100) / 100;
            } else if (scaledAmount < 10) {
              scaledAmount = Math.round(scaledAmount * 10) / 10;
            } else {
              scaledAmount = Math.round(scaledAmount);
            }
            
            const formattedAmount = scaledAmount % 1 === 0 ? scaledAmount.toString() : scaledAmount.toString();
            amountValueElement.textContent = formattedAmount;
          }
        });
      }
      
      decreaseButton.addEventListener('click', () => {
        if (currentServingsElement) {
          const current = parseInt(currentServingsElement.textContent || '1');
          updateServings(current - 1);
        }
      });
      
      increaseButton.addEventListener('click', () => {
        if (currentServingsElement) {
          const current = parseInt(currentServingsElement.textContent || '1');
          updateServings(current + 1);
        }
      });
      
      resetButton.addEventListener('click', () => {
        updateServings(originalServings);
      });
    }

    // Edit mode functionality
    let isEditMode = false;
    const editBtn = document.getElementById('edit-btn');
    const editBtnMobile = document.getElementById('edit-btn-mobile');
    const viewContent = document.getElementById('view-content');
    const editContent = document.getElementById('edit-content');

    function updateEditButton(button, isEdit) {
      if (!button) return;
      
      if (isEdit) {
        button.innerHTML = `
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
          <span>Abbrechen</span>
        `;
        button.className = button.className.replace('bg-blue-500 hover:bg-blue-600', 'bg-gray-500 hover:bg-gray-600');
      } else {
        button.innerHTML = `
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
          </svg>
          <span>Bearbeiten</span>
        `;
        button.className = button.className.replace('bg-gray-500 hover:bg-gray-600', 'bg-blue-500 hover:bg-blue-600');
      }
    }

    function toggleEditMode() {
      isEditMode = !isEditMode;
      
      if (isEditMode) {
        viewContent?.classList.add('hidden');
        editContent?.classList.remove('hidden');
        updateEditButton(editBtn, true);
        updateEditButton(editBtnMobile, true);
      } else {
        viewContent?.classList.remove('hidden');
        editContent?.classList.add('hidden');
        updateEditButton(editBtn, false);
        updateEditButton(editBtnMobile, false);
      }

      // Dispatch edit mode change event
      document.dispatchEvent(new CustomEvent('editModeChanged', {
        detail: {
          isEditMode
        }
      }));
    }

    // Make toggleEditMode globally available
    window.toggleEditMode = toggleEditMode;

    editBtn?.addEventListener('click', toggleEditMode);
    editBtnMobile?.addEventListener('click', toggleEditMode);

    // Note: Shopping list functionality moved to end of script with modal interface

    // Edit mode event handlers - handle both mobile and desktop cancel buttons
    const cancelButtons = [
      document.getElementById('cancel-edit-btn'),
      document.getElementById('cancel-edit-btn-desktop')
    ].filter(Boolean);
    
    cancelButtons.forEach(cancelBtn => {
      cancelBtn?.addEventListener('click', () => {
        toggleEditMode(); // Switch back to view mode
      });
    });

    // Delete recipe functionality - handle both mobile and desktop buttons
    const deleteButtons = [
      document.getElementById('delete-recipe-btn'),
      document.getElementById('delete-recipe-btn-desktop')
    ].filter(Boolean);
    
    deleteButtons.forEach(deleteBtn => {
      deleteBtn?.addEventListener('click', async () => {
      const titleElement = document.getElementById('edit-title');
      const recipeTitle = titleElement?.value || 'Dieses Rezept';
      
      let action = 'cancel';
      
      // Debug: Check what's available
      console.log('Modal functions available:', {
        showDeleteConfirm: !!window.showDeleteConfirm,
        showModal: !!window.showModal,
        'modal_notification-modal': !!window['modal_notification-modal'],
        availableModals: Object.keys(window).filter(key => key.startsWith('modal_'))
      });
      
      // Wait longer for modal functions to be available
      let attempts = 0;
      while (!window.showDeleteConfirm && attempts < 10) {
        console.log('Waiting for modal functions, attempt:', attempts + 1);
        await new Promise(resolve => setTimeout(resolve, 200));
        attempts++;
      }
      
      if (window.showDeleteConfirm) {
        console.log('Using modal for delete confirmation');
        const confirmed = await window.showDeleteConfirm(
          `Sind Sie sicher, dass Sie "${recipeTitle}" löschen möchten?\n\nDiese Aktion kann nicht rückgängig gemacht werden.`
        );
        action = confirmed ? 'delete' : 'cancel';
      } else {
        console.warn('Modal functions still not available after waiting, using fallback confirm');
        const confirmed = confirm(`Sind Sie sicher, dass Sie "${recipeTitle}" löschen möchten?\n\nDiese Aktion kann nicht rückgängig gemacht werden.`);
        action = confirmed ? 'delete' : 'cancel';
      }
      
      if (action === 'cancel') {
        return;
      } else if (action === 'export') {
        // User chose to export - don't delete, just return
        return;
      }
      // If action === 'delete', continue with deletion
      
      try {
        // Disable all delete buttons during processing
        deleteButtons.forEach(btn => {
          if (btn) {
            btn.textContent = 'Löschen...';
            btn.setAttribute('disabled', 'true');
          }
        });
        
        const recipeId = window.location.pathname.split('/').pop();
        
        const response = await fetch(`/api/recipes?id=${recipeId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          if (window.showSuccess) {
            await window.showSuccess('Rezept wurde erfolgreich gelöscht.');
          }
          window.location.href = '/';
        } else {
          const error = await response.text();
          console.error('Server error:', error);
          throw new Error(`Server error: ${response.status}`);
        }
        
      } catch (error) {
        console.error('Error deleting recipe:', error);
        if (window.showError) {
          window.showError('Fehler beim Löschen des Rezepts. Bitte versuchen Sie es erneut.');
        } else {
          alert('Fehler beim Löschen des Rezepts. Bitte versuchen Sie es erneut.');
        }
        
        // Re-enable all delete buttons on error
        deleteButtons.forEach(btn => {
          if (btn) {
            btn.textContent = 'Rezept löschen';
            btn.removeAttribute('disabled');
          }
        });
      }
      });
    });

    // Check if we should auto-enter edit mode (for new recipes)
    function checkAutoEditMode() {
      const urlParams = new URLSearchParams(window.location.search);
      const shouldEdit = urlParams.get('edit');
      
      if (shouldEdit === 'true') {
        const newUrl = window.location.pathname;
        window.history.replaceState({}, '', newUrl);
        toggleEditMode();
      }
    }
    
    // Initialize all event listeners and check for auto-edit mode
    checkAutoEditMode();
    
    // Check for step highlight hash on page load
    function checkStepHighlight() {
      const hash = window.location.hash;
      if (hash.startsWith('#step-')) {
        const stepId = hash.substring(6); // Remove '#step-' prefix
        setTimeout(() => {
          const stepElement = document.getElementById(`step-${stepId}`);
          if (stepElement) {
            // Add highlight class
            stepElement.classList.add('step-highlight');
            
            // Scroll to element
            stepElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            // Remove highlight after animation
            setTimeout(() => {
              stepElement.classList.remove('step-highlight');
            }, 2000);
          }
        }, 500); // Wait a bit for page to fully load
      }
    }
    
    // Check for step highlight on load and hash change
    checkStepHighlight();
    window.addEventListener('hashchange', checkStepHighlight);

    // Export functionality for recipe detail page
    const exportRecipeBtn = document.getElementById('export-recipe-btn');
    const exportRecipeBtnMobile = document.getElementById('export-recipe-btn-mobile');
    const exportRecipeMenu = document.getElementById('export-recipe-menu');
    const exportRecipeMenuMobile = document.getElementById('export-recipe-menu-mobile');
    const exportRecipeJsonBtn = document.getElementById('export-recipe-json');
    const exportRecipeJsonBtnMobile = document.getElementById('export-recipe-json-mobile');
    const exportRecipeRcbBtn = document.getElementById('export-recipe-rcb');
    const exportRecipeRcbBtnMobile = document.getElementById('export-recipe-rcb-mobile');

    // Toggle export dropdown for desktop
    exportRecipeBtn?.addEventListener('click', (e) => {
      e.stopPropagation();
      exportRecipeMenu?.classList.toggle('hidden');
      exportRecipeMenuMobile?.classList.add('hidden'); // Close mobile menu if open
    });

    // Toggle export dropdown for mobile
    exportRecipeBtnMobile?.addEventListener('click', (e) => {
      e.stopPropagation();
      exportRecipeMenuMobile?.classList.toggle('hidden');
      exportRecipeMenu?.classList.add('hidden'); // Close desktop menu if open
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', () => {
      exportRecipeMenu?.classList.add('hidden');
      exportRecipeMenuMobile?.classList.add('hidden');
    });

    // Export handlers for desktop
    exportRecipeJsonBtn?.addEventListener('click', () => {
      const recipeId = exportRecipeJsonBtn.getAttribute('data-recipe-id');
      window.location.href = `/api/recipe-export?id=${recipeId}&format=json`;
      exportRecipeMenu?.classList.add('hidden');
    });

    exportRecipeRcbBtn?.addEventListener('click', () => {
      const recipeId = exportRecipeRcbBtn.getAttribute('data-recipe-id');
      window.location.href = `/api/recipe-export?id=${recipeId}&format=rcb`;
      exportRecipeMenu?.classList.add('hidden');
    });

    // Export handlers for mobile
    exportRecipeJsonBtnMobile?.addEventListener('click', () => {
      const recipeId = exportRecipeJsonBtnMobile.getAttribute('data-recipe-id');
      window.location.href = `/api/recipe-export?id=${recipeId}&format=json`;
      exportRecipeMenuMobile?.classList.add('hidden');
    });

    exportRecipeRcbBtnMobile?.addEventListener('click', () => {
      const recipeId = exportRecipeRcbBtnMobile.getAttribute('data-recipe-id');
      window.location.href = `/api/recipe-export?id=${recipeId}&format=rcb`;
      exportRecipeMenuMobile?.classList.add('hidden');
    });

    // Shopping List functionality
    let availableShoppingLists = [];
    
    // Load shopping lists
    async function loadShoppingLists() {
      try {
        const response = await fetch('/api/shopping-lists');
        if (response.ok) {
          availableShoppingLists = await response.json();
          populateShoppingListModal();
        }
      } catch (error) {
        console.error('Error loading shopping lists:', error);
      }
    }

    // Populate shopping list modal
    function populateShoppingListModal() {
      const loadingDiv = document.getElementById('shopping-lists-loading');
      const contentDiv = document.getElementById('shopping-lists-content');
      const containerDiv = document.getElementById('available-shopping-lists');
      const noListsDiv = document.getElementById('no-shopping-lists');
      
      loadingDiv?.classList.add('hidden');
      contentDiv?.classList.remove('hidden');
      
      if (availableShoppingLists.length === 0) {
        containerDiv.innerHTML = '';
        noListsDiv?.classList.remove('hidden');
        return;
      }
      
      noListsDiv?.classList.add('hidden');
      renderShoppingLists(availableShoppingLists);
    }

    // Render shopping lists
    function renderShoppingLists(shoppingLists) {
      const container = document.getElementById('available-shopping-lists');
      if (!container) return;
      
      container.innerHTML = shoppingLists.map(list => {
        const uncheckedItems = list.items.filter(item => !item.isChecked);
        const totalItems = list.items.length;
        const completedItems = totalItems - uncheckedItems.length;
        const isRecipeAlreadyAdded = list.recipes?.some(r => r.id === recipe.id);
        
        const cardClasses = isRecipeAlreadyAdded 
          ? 'shopping-list-card border border-gray-200 dark:border-gray-700 rounded-lg p-4 bg-gray-100 dark:bg-gray-800 opacity-50 cursor-not-allowed transition-colors'
          : 'shopping-list-card border border-gray-300 dark:border-gray-600 rounded-lg p-4 hover:border-green-500 cursor-pointer transition-colors';
        
        return `
          <div class="${cardClasses}" data-list-id="${list.id}">
            <div class="flex items-start space-x-3">
              ${!isRecipeAlreadyAdded ? `
                <input type="checkbox" class="list-checkbox mt-1 w-5 h-5 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 focus:ring-2" data-list-id="${list.id}" />
              ` : `
                <div class="mt-1 w-5 h-5 bg-gray-300 dark:bg-gray-600 rounded flex items-center justify-center">
                  <svg class="w-3 h-3 text-gray-500" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                  </svg>
                </div>
              `}
              <div class="flex-1 min-w-0">
                <h3 class="font-medium ${isRecipeAlreadyAdded ? 'text-gray-500 dark:text-gray-400' : 'text-gray-900 dark:text-white'} truncate">
                  ${list.title}
                  ${isRecipeAlreadyAdded ? '<span class="text-xs ml-2 bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 px-2 py-0.5 rounded">Bereits hinzugefügt</span>' : ''}
                </h3>
                ${list.description ? `<p class="text-sm text-muted mt-1 line-clamp-2">${list.description}</p>` : ''}
                <div class="flex items-center space-x-4 mt-2 text-sm text-muted">
                  <span>${completedItems}/${totalItems} Artikel erledigt</span>
                  ${list.recipes && list.recipes.length > 0 ? `<span>${list.recipes.length} Rezept${list.recipes.length !== 1 ? 'e' : ''}</span>` : ''}
                </div>
                ${totalItems > 0 ? `
                  <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mt-2">
                    <div class="bg-green-500 h-1.5 rounded-full transition-all duration-300" 
                         style="width: ${(completedItems / totalItems) * 100}%"></div>
                  </div>
                ` : ''}
              </div>
            </div>
          </div>
        `;
      }).join('');
      
      // Attach change handlers for checkboxes
      container.querySelectorAll('.list-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', updateSelectedListsCount);
      });
      
      // Update selected count
      updateSelectedListsCount();
    }

    // Update selected count and button state
    function updateSelectedListsCount() {
      const selectedCheckboxes = document.querySelectorAll('.list-checkbox:checked');
      const selectedCount = selectedCheckboxes.length;
      const selectedCountElement = document.getElementById('selected-lists-count');
      const addSelectedButton = document.getElementById('add-to-selected-lists');
      const selectAllCheckbox = document.getElementById('select-all-lists');
      
      // Update count display
      if (selectedCountElement) {
        selectedCountElement.textContent = `${selectedCount} Liste${selectedCount !== 1 ? 'n' : ''} ausgewählt`;
      }
      
      // Update add button state
      if (addSelectedButton) {
        addSelectedButton.disabled = selectedCount === 0;
      }
      
      // Update select all checkbox state
      const allCheckboxes = document.querySelectorAll('.list-checkbox');
      if (selectAllCheckbox && allCheckboxes.length > 0) {
        selectAllCheckbox.checked = selectedCount === allCheckboxes.length;
        selectAllCheckbox.indeterminate = selectedCount > 0 && selectedCount < allCheckboxes.length;
      }
    }

    // Add recipe to multiple shopping lists
    async function addRecipeToMultipleShoppingLists(listIds) {
      try {
        // Add recipe to lists one by one (we could optimize this later with a batch API)
        for (const listId of listIds) {
          const response = await fetch(`/api/shopping-lists?id=${listId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              action: 'add-recipe',
              recipeId: recipe.id
            }),
          });

          if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || `Fehler beim Hinzufügen zu Liste ${listId}`);
          }
        }

        // Reload shopping lists to show updated state
        await loadShoppingLists();
        
        // Show success message
        const listCount = listIds.length;
        alert(`Rezept wurde zu ${listCount} Einkaufsliste${listCount !== 1 ? 'n' : ''} hinzugefügt!`);
        
        // Close modal
        document.getElementById('shopping-list-modal')?.classList.add('hidden');
        clearAllListSelections();
        
      } catch (error) {
        console.error('Error adding recipe to shopping lists:', error);
        alert('Fehler beim Hinzufügen des Rezepts: ' + error.message);
      }
    }

    // Helper function to clear all selections
    function clearAllListSelections() {
      document.querySelectorAll('.list-checkbox').forEach(checkbox => {
        checkbox.checked = false;
      });
      const selectAllCheckbox = document.getElementById('select-all-lists');
      if (selectAllCheckbox) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
      }
      updateSelectedListsCount();
    }

    // Shopping list modal handling
    const shoppingListModal = document.getElementById('shopping-list-modal');
    const shoppingListCloseButtons = shoppingListModal?.querySelectorAll('.modal-close');

    [document.getElementById('add-to-shopping'), document.getElementById('add-to-shopping-mobile')].forEach(btn => {
      btn?.addEventListener('click', async () => {
        shoppingListModal?.classList.remove('hidden');
        
        // Load shopping lists if not already loaded
        if (availableShoppingLists.length === 0) {
          await loadShoppingLists();
        }
      });
    });

    shoppingListCloseButtons?.forEach(btn => {
      btn.addEventListener('click', () => {
        shoppingListModal?.classList.add('hidden');
        clearAllListSelections();
      });
    });

    shoppingListModal?.querySelector('.modal-overlay')?.addEventListener('click', () => {
      shoppingListModal?.classList.add('hidden');
      clearAllListSelections();
    });

    // Handle select all checkbox
    const selectAllCheckbox = document.getElementById('select-all-lists');
    selectAllCheckbox?.addEventListener('change', (e) => {
      const checkboxes = document.querySelectorAll('.list-checkbox');
      checkboxes.forEach(checkbox => {
        checkbox.checked = e.target.checked;
      });
      updateSelectedListsCount();
    });

    // Handle add to selected lists button
    const addSelectedButton = document.getElementById('add-to-selected-lists');
    addSelectedButton?.addEventListener('click', async () => {
      const selectedCheckboxes = document.querySelectorAll('.list-checkbox:checked');
      const selectedListIds = Array.from(selectedCheckboxes).map(checkbox => 
        checkbox.getAttribute('data-list-id')
      );
      
      if (selectedListIds.length > 0) {
        await addRecipeToMultipleShoppingLists(selectedListIds);
      }
    });

    // Get recipe data
    const recipeData = {
      title: document.querySelector('h1').textContent,
      ingredients: Array.from(document.querySelectorAll('.ingredient-item')).map(el => el.textContent.trim()),
      steps: Array.from(document.querySelectorAll('.preparation-step')).map(el => el.textContent.trim())
    };

    // Add cast button click handler
    document.querySelector('#castbutton')?.addEventListener('click', () => {
      window.castManager?.castRecipe(recipeData);
    });
  </script>
</Layout>

<style>
.recipe-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 2rem;
}
</style> 
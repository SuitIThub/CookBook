---
import Layout from '../../layouts/Layout.astro';
import { db } from '../../lib/database';
import type { Recipe, Ingredient, IngredientGroup, PreparationStep, PreparationGroup } from '../../types/recipe';

const { id } = Astro.params;

// Rezept aus der Datenbank laden
let recipe: Recipe | null = null;
try {
  recipe = id ? db.getRecipe(id as string) : null;
  if (!recipe) {
    return Astro.redirect('/404');
  }
} catch (error) {
  console.error('Error loading recipe from database:', error);
  return Astro.redirect('/404');
}


---

<Layout title={`${recipe.title} - Kochbuch`}>
  <div class="max-w-4xl mx-auto">
    <!-- Header Section -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-6 overflow-hidden transition-colors duration-200">
      <div class="p-6">
        <div class="flex justify-between items-start mb-4">
          <div class="flex-1">
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">{recipe.title}</h1>
            {recipe.subtitle && (
              <p class="text-xl text-gray-700 dark:text-gray-300 mb-3">{recipe.subtitle}</p>
            )}
            {recipe.description && (
              <p class="text-gray-600 dark:text-gray-400 leading-relaxed">{recipe.description}</p>
            )}
          </div>
          <div class="ml-6 flex space-x-2">
            <button id="edit-btn" class="flex items-center space-x-2 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md text-sm font-medium transition-colors">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
              </svg>
              <span>Bearbeiten</span>
            </button>
            <button class="flex items-center space-x-2 px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-md text-sm font-medium transition-colors">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
              </svg>
              <span>Zur Einkaufsliste</span>
            </button>
          </div>
        </div>

        <!-- Metadata -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 pt-4 border-t border-gray-200 dark:border-gray-600">
          {recipe.metadata.servings && (
            <div class="text-center">
              <div class="text-2xl font-bold text-orange-500 mb-2">
                <div class="flex items-center justify-center space-x-2">
                  <button id="decrease-servings" class="w-8 h-8 rounded-full bg-orange-100 dark:bg-orange-900 text-orange-600 dark:text-orange-400 hover:bg-orange-200 dark:hover:bg-orange-800 flex items-center justify-center font-bold text-lg transition-colors">
                    −
                  </button>
                  <span id="current-servings" data-original={recipe.metadata.servings}>{recipe.metadata.servings}</span>
                  <button id="increase-servings" class="w-8 h-8 rounded-full bg-orange-100 dark:bg-orange-900 text-orange-600 dark:text-orange-400 hover:bg-orange-200 dark:hover:bg-orange-800 flex items-center justify-center font-bold text-lg transition-colors">
                    +
                  </button>
                </div>
                <button id="reset-servings" class="mt-2 text-xs text-orange-600 dark:text-orange-400 hover:text-orange-700 dark:hover:text-orange-300 underline transition-colors" style="display: none;">
                  Zurücksetzen
                </button>
              </div>
              <div class="text-sm text-gray-600 dark:text-gray-400">Portionen</div>
            </div>
          )}
          {recipe.metadata.preparationTime && (
            <div class="text-center">
              <div class="text-2xl font-bold text-blue-500">{recipe.metadata.preparationTime}</div>
              <div class="text-sm text-gray-600 dark:text-gray-400">Min Vorbereitung</div>
            </div>
          )}
          {recipe.metadata.cookingTime && (
            <div class="text-center">
              <div class="text-2xl font-bold text-red-500">{recipe.metadata.cookingTime}</div>
              <div class="text-sm text-gray-600 dark:text-gray-400">Min Kochen</div>
            </div>
          )}
          {recipe.metadata.difficulty && (
            <div class="text-center">
              <div class={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                recipe.metadata.difficulty === 'leicht' ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200' :
                recipe.metadata.difficulty === 'mittel' ? 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200' :
                'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200'
              }`}>
                {recipe.metadata.difficulty}
              </div>
              <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">Schwierigkeit</div>
            </div>
          )}
        </div>
      </div>
    </div>

    <!-- View Mode Content -->
    <div id="view-content" class="grid md:grid-cols-2 gap-6">
      <!-- Ingredients Section -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 transition-colors duration-200">
        <div class="p-6">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4 flex items-center">
            <svg class="w-6 h-6 mr-2 text-orange-500" fill="currentColor" viewBox="0 0 20 20">
              <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
            </svg>
            Zutaten
          </h2>
          
          <div class="space-y-4">
            {/* First show ungrouped ingredients */}
            {recipe.ingredientGroups.filter(group => !group.title).map((group) => (
              <ul class="space-y-2">
                {group.ingredients.map((ingredient) => (
                  'name' in ingredient ? (
                    <li class="flex justify-between items-center py-2 px-3 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                      <span class="font-medium text-gray-900 dark:text-white">{(ingredient as Ingredient).name}</span>
                      <div class="flex space-x-2">
                        {(ingredient as Ingredient).quantities.map((qty, index) => (
                          <span class="ingredient-amount text-sm text-gray-600 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded" 
                                data-original-amount={qty.amount} 
                                data-unit={qty.unit}>
                            <span class="amount-value">{qty.amount}</span> {qty.unit}
                          </span>
                        ))}
                      </div>
                    </li>
                  ) : null
                ))}
              </ul>
            ))}
            
            {/* Then show grouped ingredients */}
            {recipe.ingredientGroups.filter(group => group.title).map((group) => (
              <div>
                <h3 class="font-semibold text-gray-800 dark:text-gray-200 mb-2 border-b border-gray-200 dark:border-gray-600 pb-1">
                  {group.title}
                </h3>
                <ul class="space-y-2">
                  {group.ingredients.map((ingredient) => (
                    'name' in ingredient ? (
                      <li class="flex justify-between items-center py-2 px-3 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                        <span class="font-medium text-gray-900 dark:text-white">{(ingredient as Ingredient).name}</span>
                        <div class="flex space-x-2">
                          {(ingredient as Ingredient).quantities.map((qty, index) => (
                            <span class="ingredient-amount text-sm text-gray-600 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded" 
                                  data-original-amount={qty.amount} 
                                  data-unit={qty.unit}>
                              <span class="amount-value">{qty.amount}</span> {qty.unit}
                            </span>
                          ))}
                        </div>
                      </li>
                    ) : null
                  ))}
                </ul>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Preparation Section -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 transition-colors duration-200">
        <div class="p-6">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4 flex items-center">
            <svg class="w-6 h-6 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            Zubereitung
          </h2>
          
          <div class="space-y-4">
            {/* First show ungrouped steps */}
            {recipe.preparationGroups.filter(group => !group.title).map((group) => (
              <ol class="space-y-4">
                {group.steps.map((step, index) => (
                  'text' in step ? (
                    <li class="flex space-x-4">
                      <div class="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                        {index + 1}
                      </div>
                      <div class="flex-1">
                        <p class="text-gray-900 dark:text-white leading-relaxed" set:html={(step as PreparationStep).text.replace(
                          /(\d+(?:[-–]\d+)?\s*(?:Minuten?|Min\.?|Stunden?|Std\.?))/gi,
                          '<button class="timer-trigger text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 underline font-medium" data-time="$1">$1</button>'
                        )}></p>
                      </div>
                    </li>
                  ) : null
                ))}
              </ol>
            ))}
            
            {/* Then show grouped steps */}
            {recipe.preparationGroups.filter(group => group.title).map((group) => (
              <div>
                <h3 class="font-semibold text-gray-800 dark:text-gray-200 mb-3 border-b border-gray-200 dark:border-gray-600 pb-1">
                  {group.title}
                </h3>
                <ol class="space-y-4">
                  {group.steps.map((step, index) => (
                    'text' in step ? (
                      <li class="flex space-x-4">
                        <div class="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                          {index + 1}
                        </div>
                        <div class="flex-1">
                          <p class="text-gray-900 dark:text-white leading-relaxed" set:html={(step as PreparationStep).text.replace(
                            /(\d+(?:[-–]\d+)?\s*(?:Minuten?|Min\.?|Stunden?|Std\.?))/gi,
                            '<button class="timer-trigger text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 underline font-medium" data-time="$1">$1</button>'
                          )}></p>
                        </div>
                      </li>
                    ) : null
                  ))}
                </ol>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>

    <!-- Edit Mode Content (initially hidden) -->
    <div id="edit-content" class="hidden">
      <form id="edit-recipe-form" class="space-y-6">
        <!-- Header Edit Section -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-200">
          <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Grundinformationen bearbeiten</h2>
          
          <div class="space-y-4">
            <div>
              <label for="edit-title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Titel</label>
              <input 
                type="text" 
                id="edit-title" 
                value={recipe.title}
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              />
            </div>
            
            <div>
              <label for="edit-subtitle" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Untertitel</label>
              <input 
                type="text" 
                id="edit-subtitle" 
                value={recipe.subtitle || ''}
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              />
            </div>
            
            <div>
              <label for="edit-description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Beschreibung</label>
              <textarea 
                id="edit-description" 
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              >{recipe.description || ''}</textarea>
            </div>
            
            <!-- Metadata -->
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div>
                <label for="edit-servings" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Portionen</label>
                <input 
                  type="number" 
                  id="edit-servings" 
                  value={recipe.metadata.servings || ''}
                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                />
              </div>
              
              <div>
                <label for="edit-prep-time" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Vorbereitung (Min)</label>
                <input 
                  type="number" 
                  id="edit-prep-time" 
                  value={recipe.metadata.preparationTime || ''}
                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                />
              </div>
              
              <div>
                <label for="edit-cook-time" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Kochzeit (Min)</label>
                <input 
                  type="number" 
                  id="edit-cook-time" 
                  value={recipe.metadata.cookingTime || ''}
                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                />
              </div>
              
              <div>
                <label for="edit-difficulty" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Schwierigkeit</label>
                <select 
                  id="edit-difficulty" 
                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                >
                  <option value="">Wählen...</option>
                  <option value="leicht" selected={recipe.metadata.difficulty === 'leicht'}>Leicht</option>
                  <option value="mittel" selected={recipe.metadata.difficulty === 'mittel'}>Mittel</option>
                  <option value="schwer" selected={recipe.metadata.difficulty === 'schwer'}>Schwer</option>
                </select>
              </div>
            </div>
          </div>
        </div>

        <!-- Ingredients Edit Section -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-200">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Zutaten bearbeiten</h2>
            <div class="flex space-x-2">
              <button 
                type="button" 
                id="add-ingredient-group-btn"
                class="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded transition-colors"
              >
                + Gruppe hinzufügen
              </button>
              <button 
                type="button" 
                id="add-ingredient-btn"
                class="px-3 py-1 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded transition-colors"
              >
                + Zutat hinzufügen
              </button>
            </div>
          </div>
          
          <div id="ingredients-edit-container" class="space-y-6">
            <!-- Default ungrouped ingredients section -->
            <div class="ingredient-group-edit default-group border border-gray-300 dark:border-gray-600 rounded-lg p-4 bg-gray-50 dark:bg-gray-700/50 transition-colors duration-200" data-is-default="true">
              <div class="flex justify-between items-center mb-3">
                <div class="flex-1 px-3 py-2 text-lg font-medium text-gray-600 dark:text-gray-300">
                  Zutaten (ungruppiert)
                </div>
              </div>
              
              <div class="ingredients-list space-y-3">
                {recipe.ingredientGroups.map((group) => 
                  !group.title ? group.ingredients.map((ingredient) => (
                    'name' in ingredient ? (
                      <div class="ingredient-edit-item border border-gray-200 dark:border-gray-600 rounded-md p-3 bg-white dark:bg-gray-800 transition-colors duration-200">
                        <div class="flex space-x-3 items-center">
                          <input 
                            type="text" 
                            value={(ingredient as Ingredient).name}
                            placeholder="Zutatename"
                            class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                          />
                          <input 
                            type="number" 
                            value={(ingredient as Ingredient).quantities[0]?.amount || ''}
                            placeholder="Menge"
                            step="0.1"
                            class="w-24 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                          />
                          <select class="w-24 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                            <option value={(ingredient as Ingredient).quantities[0]?.unit || ''} selected>
                              {(ingredient as Ingredient).quantities[0]?.unit || 'Einheit'}
                            </option>
                            <option value="g">g</option>
                            <option value="kg">kg</option>
                            <option value="ml">ml</option>
                            <option value="l">l</option>
                            <option value="Stück">Stück</option>
                            <option value="TL">TL</option>
                            <option value="EL">EL</option>
                            <option value="Tasse">Tasse</option>
                            <option value="Prise">Prise</option>
                          </select>
                          <button 
                            type="button" 
                            class="remove-ingredient-btn px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
                          >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                            </svg>
                          </button>
                        </div>
                      </div>
                    ) : null
                  )) : null
                )}
              </div>
              
              <button 
                type="button" 
                class="add-ingredient-to-group-btn mt-3 px-3 py-1 text-sm bg-gray-500 hover:bg-gray-600 dark:bg-gray-600 dark:hover:bg-gray-500 text-white rounded transition-colors"
              >
                + Zutat zu ungruppiert hinzufügen
              </button>
            </div>

            <!-- Named ingredient groups -->
            {recipe.ingredientGroups.map((group, groupIndex) => 
              group.title ? (
                <div class="ingredient-group-edit border border-gray-300 dark:border-gray-600 rounded-lg p-4 bg-gray-50 dark:bg-gray-700/50 transition-colors duration-200">
                  <div class="flex justify-between items-center mb-3">
                    <input 
                      type="text" 
                      value={group.title || ''}
                      placeholder="Gruppenname (optional)"
                      class="group-title-input flex-1 px-3 py-2 text-lg font-medium border-b border-gray-300 dark:border-gray-600 focus:outline-none focus:border-orange-500 bg-transparent text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                    />
                    <button 
                      type="button" 
                      class="remove-group-btn ml-3 px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                      </svg>
                    </button>
                  </div>
                  
                  <div class="ingredients-list space-y-3">
                    {group.ingredients.map((ingredient) => (
                      'name' in ingredient ? (
                        <div class="ingredient-edit-item border border-gray-200 dark:border-gray-600 rounded-md p-3 bg-white dark:bg-gray-800 transition-colors duration-200">
                          <div class="flex space-x-3 items-center">
                            <input 
                              type="text" 
                              value={(ingredient as Ingredient).name}
                              placeholder="Zutatename"
                              class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                            />
                            <input 
                              type="number" 
                              value={(ingredient as Ingredient).quantities[0]?.amount || ''}
                              placeholder="Menge"
                              step="0.1"
                              class="w-24 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                            />
                            <select class="w-24 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                              <option value={(ingredient as Ingredient).quantities[0]?.unit || ''} selected>
                                {(ingredient as Ingredient).quantities[0]?.unit || 'Einheit'}
                              </option>
                              <option value="g">g</option>
                              <option value="kg">kg</option>
                              <option value="ml">ml</option>
                              <option value="l">l</option>
                              <option value="Stück">Stück</option>
                              <option value="TL">TL</option>
                              <option value="EL">EL</option>
                              <option value="Tasse">Tasse</option>
                              <option value="Prise">Prise</option>
                            </select>
                            <button 
                              type="button" 
                              class="remove-ingredient-btn px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
                            >
                              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                              </svg>
                            </button>
                          </div>
                        </div>
                      ) : null
                    ))}
                  </div>
                  
                  <button 
                    type="button" 
                    class="add-ingredient-to-group-btn mt-3 px-3 py-1 text-sm bg-gray-500 hover:bg-gray-600 dark:bg-gray-600 dark:hover:bg-gray-500 text-white rounded transition-colors"
                  >
                    + Zutat zu dieser Gruppe hinzufügen
                  </button>
                </div>
              ) : null
            )}
          </div>
        </div>

        <!-- Preparation Edit Section -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-200">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Zubereitung bearbeiten</h2>
            <div class="flex space-x-2">
              <button 
                type="button" 
                id="add-preparation-group-btn"
                class="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded transition-colors"
              >
                + Gruppe hinzufügen
              </button>
              <button 
                type="button" 
                id="add-step-btn"
                class="px-3 py-1 text-sm bg-green-500 hover:bg-green-600 text-white rounded transition-colors"
              >
                + Schritt hinzufügen
              </button>
            </div>
          </div>
          
          <div id="preparation-edit-container" class="space-y-6">
            <!-- Default ungrouped preparation steps section -->
            <div class="preparation-group-edit default-group border border-gray-300 dark:border-gray-600 rounded-lg p-4 bg-gray-50 dark:bg-gray-700/50 transition-colors duration-200" data-is-default="true">
              <div class="flex justify-between items-center mb-3">
                <div class="flex-1 px-3 py-2 text-lg font-medium text-gray-600 dark:text-gray-300">
                  Zubereitung (ungruppiert)
                </div>
              </div>
              
              <div class="steps-list space-y-4 min-h-[60px] relative">
                {recipe.preparationGroups.map((group) => 
                  !group.title ? group.steps.map((step, stepIndex) => (
                    'text' in step ? (
                      <div class="step-edit-item border border-gray-200 dark:border-gray-600 rounded-md p-4 bg-white dark:bg-gray-800 transition-colors duration-200" draggable="true">
                        <div class="flex items-start space-x-3">
                          <div class="flex items-center space-x-2">
                            <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-400">
                              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                              </svg>
                            </div>
                            <div class="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                              {stepIndex + 1}
                            </div>
                          </div>
                          <div class="flex-1 space-y-3">
                            <textarea 
                              rows="3"
                              placeholder="Zubereitungsschritt..."
                              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                            >{(step as PreparationStep).text}</textarea>
                            
                            <div class="flex justify-end items-center">
                              <button 
                                type="button" 
                                class="remove-step-btn px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
                              >
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    ) : null
                  )) : null
                )}
              </div>
              
              <button 
                type="button" 
                class="add-step-to-group-btn mt-3 px-3 py-1 text-sm bg-gray-500 hover:bg-gray-600 text-white rounded transition-colors"
              >
                + Schritt zu ungruppiert hinzufügen
              </button>
            </div>

            <!-- Named preparation groups -->
            {recipe.preparationGroups.map((group, groupIndex) => 
              group.title ? (
                <div class="preparation-group-edit border border-gray-300 dark:border-gray-600 rounded-lg p-4 bg-gray-50 dark:bg-gray-700/50 transition-colors duration-200">
                  <div class="flex justify-between items-center mb-3">
                    <input 
                      type="text" 
                      value={group.title || ''}
                      placeholder="Gruppenname (optional)"
                      class="group-title-input flex-1 px-3 py-2 text-lg font-medium border-b border-gray-300 dark:border-gray-600 focus:outline-none focus:border-green-500 bg-transparent text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                    />
                    <button 
                      type="button" 
                      class="remove-prep-group-btn ml-3 px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                      </svg>
                    </button>
                  </div>
                  
                  <div class="steps-list space-y-4 min-h-[60px] relative">
                    {group.steps.map((step, stepIndex) => (
                      'text' in step ? (
                        <div class="step-edit-item border border-gray-200 dark:border-gray-600 rounded-md p-4 bg-white dark:bg-gray-800 transition-colors duration-200" draggable="true">
                          <div class="flex items-start space-x-3">
                            <div class="flex items-center space-x-2">
                              <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-400">
                                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                  <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                                </svg>
                              </div>
                              <div class="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                                {stepIndex + 1}
                              </div>
                            </div>
                            <div class="flex-1 space-y-3">
                              <textarea 
                                rows="3"
                                placeholder="Zubereitungsschritt..."
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                              >{(step as PreparationStep).text}</textarea>
                              
                              <div class="flex justify-end items-center">
                                <button 
                                  type="button" 
                                  class="remove-step-btn px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
                                >
                                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                  </svg>
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      ) : null
                    ))}
                  </div>
                  
                  <button 
                    type="button" 
                    class="add-step-to-group-btn mt-3 px-3 py-1 text-sm bg-gray-500 hover:bg-gray-600 dark:bg-gray-600 dark:hover:bg-gray-500 text-white rounded transition-colors"
                  >
                    + Schritt zu dieser Gruppe hinzufügen
                  </button>
                </div>
              ) : null
            )}
          </div>
        </div>

        <!-- Save/Cancel/Delete Buttons -->
        <div class="flex justify-between items-center">
          <button 
            type="button" 
            id="delete-recipe-btn"
            class="px-6 py-2 bg-red-500 hover:bg-red-600 text-white rounded-md transition-colors flex items-center space-x-2"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
            </svg>
            <span>Rezept löschen</span>
          </button>
          <div class="flex space-x-3">
            <button 
              type="button" 
              id="cancel-edit-btn"
              class="px-6 py-2 text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
            >
              Abbrechen
            </button>
            <button 
              type="submit"
              class="px-6 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors"
            >
              Änderungen speichern
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>



  <script>
    // Timer functionality
    document.querySelectorAll('.timer-trigger').forEach(button => {
      button.addEventListener('click', (e) => {
        const timeText = (e.target as HTMLElement).dataset.time || '';
        const minutes = parseInt(timeText.match(/\d+/)?.[0] || '0');
        const seconds = minutes * 60;
        (window as any).startTimer(timeText, seconds);
      });
    });

    // Portion scaling functionality
    const currentServingsElement = document.getElementById('current-servings');
    const decreaseButton = document.getElementById('decrease-servings');
    const increaseButton = document.getElementById('increase-servings');
    const resetButton = document.getElementById('reset-servings');
    
    if (currentServingsElement && decreaseButton && increaseButton && resetButton) {
      const originalServings = parseInt(currentServingsElement.getAttribute('data-original') || '1');
      
      // Debug: Log original servings to console
      console.log('Original servings:', originalServings);
      console.log('Current servings element:', currentServingsElement);
      console.log('Data-original attribute:', currentServingsElement.getAttribute('data-original'));
      
      function updateServings(newServings: number) {
        if (newServings < 1) newServings = 1;
        if (newServings > 99) newServings = 99;
        
        if (currentServingsElement) {
          currentServingsElement.textContent = newServings.toString();
        }
        
        // Show/hide reset button
        if (resetButton) {
          if (newServings !== originalServings) {
            resetButton.style.display = 'inline-block';
          } else {
            resetButton.style.display = 'none';
          }
        }
        
        // Calculate scaling factor
        const scalingFactor = newServings / originalServings;
        
        // Update all ingredient amounts
        document.querySelectorAll('.ingredient-amount').forEach((element) => {
          const htmlElement = element as HTMLElement;
          const originalAmount = parseFloat(htmlElement.getAttribute('data-original-amount') || '0');
          const unit = htmlElement.getAttribute('data-unit') || '';
          const amountValueElement = element.querySelector('.amount-value');
          
          // Debug: Log ingredient data
          console.log('Ingredient element:', htmlElement);
          console.log('Original amount:', originalAmount);
          console.log('Unit:', unit);
          console.log('Amount value element:', amountValueElement);
          
          if (amountValueElement && !isNaN(originalAmount)) {
            let scaledAmount = originalAmount * scalingFactor;
            
            // Round to reasonable decimal places
            if (scaledAmount < 1) {
              scaledAmount = Math.round(scaledAmount * 100) / 100; // 2 decimal places for small amounts
            } else if (scaledAmount < 10) {
              scaledAmount = Math.round(scaledAmount * 10) / 10; // 1 decimal place for medium amounts
            } else {
              scaledAmount = Math.round(scaledAmount); // No decimal places for large amounts
            }
            
            // Format the number to avoid unnecessary decimal places
            const formattedAmount = scaledAmount % 1 === 0 ? scaledAmount.toString() : scaledAmount.toString();
            amountValueElement.textContent = formattedAmount;
          }
        });
      }
      
      decreaseButton.addEventListener('click', () => {
        if (currentServingsElement) {
          const current = parseInt(currentServingsElement.textContent || '1');
          updateServings(current - 1);
        }
      });
      
      increaseButton.addEventListener('click', () => {
        if (currentServingsElement) {
          const current = parseInt(currentServingsElement.textContent || '1');
          updateServings(current + 1);
        }
      });
      
      resetButton.addEventListener('click', () => {
        updateServings(originalServings);
      });
    }





    // Edit mode functionality
    let isEditMode = false;
    const editBtn = document.getElementById('edit-btn');
    const viewContent = document.getElementById('view-content');
    const editContent = document.getElementById('edit-content');

    function toggleEditMode() {
      isEditMode = !isEditMode;
      
      if (isEditMode) {
        viewContent?.classList.add('hidden');
        editContent?.classList.remove('hidden');
        if (editBtn) {
          editBtn.innerHTML = `
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
            <span>Abbrechen</span>
          `;
          editBtn.className = 'flex items-center space-x-2 px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-md text-sm font-medium transition-colors';
        }
      } else {
        viewContent?.classList.remove('hidden');
        editContent?.classList.add('hidden');
        if (editBtn) {
          editBtn.innerHTML = `
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
            </svg>
            <span>Bearbeiten</span>
          `;
          editBtn.className = 'flex items-center space-x-2 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md text-sm font-medium transition-colors';
        }
      }
    }

    editBtn?.addEventListener('click', toggleEditMode);

    // Edit mode event handlers
    document.getElementById('cancel-edit-btn')?.addEventListener('click', () => {
      toggleEditMode(); // Switch back to view mode
    });

    // Delete recipe functionality
    document.getElementById('delete-recipe-btn')?.addEventListener('click', async () => {
      const recipeTitle = (document.getElementById('edit-title') as HTMLInputElement)?.value || 'Dieses Rezept';
      
      // Show confirmation dialog
      const confirmed = confirm(`Sind Sie sicher, dass Sie "${recipeTitle}" löschen möchten?\n\nDiese Aktion kann nicht rückgängig gemacht werden.`);
      
      if (!confirmed) {
        return;
      }
      
      try {
        // Show loading state
        const deleteBtn = document.getElementById('delete-recipe-btn');
        if (deleteBtn) {
          deleteBtn.textContent = 'Löschen...';
          deleteBtn.setAttribute('disabled', 'true');
        }
        
        // Get current recipe ID from URL
        const recipeId = window.location.pathname.split('/').pop();
        
        // Send delete request to API
        const response = await fetch(`/api/recipes?id=${recipeId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          // Show success message and redirect to home page
          alert('Rezept wurde erfolgreich gelöscht.');
          window.location.href = '/';
        } else {
          const error = await response.text();
          console.error('Server error:', error);
          throw new Error(`Server error: ${response.status}`);
        }
        
      } catch (error) {
        console.error('Error deleting recipe:', error);
        alert('Fehler beim Löschen des Rezepts. Bitte versuchen Sie es erneut.');
        
        // Reset delete button
        const deleteBtn = document.getElementById('delete-recipe-btn');
        if (deleteBtn) {
          deleteBtn.innerHTML = `
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
            </svg>
            <span>Rezept löschen</span>
          `;
          deleteBtn.removeAttribute('disabled');
        }
      }
    });

    // Form submission
    document.getElementById('edit-recipe-form')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      try {
        // Show loading indicator
        const saveBtn = document.getElementById('save-edit-btn');
        if (saveBtn) {
          saveBtn.textContent = 'Speichern...';
          saveBtn.setAttribute('disabled', 'true');
        }
        
        // Collect form data
        const formData = {
          title: (document.getElementById('edit-title') as HTMLInputElement)?.value,
          subtitle: (document.getElementById('edit-subtitle') as HTMLInputElement)?.value,
          description: (document.getElementById('edit-description') as HTMLTextAreaElement)?.value,
          metadata: {
            servings: parseInt((document.getElementById('edit-servings') as HTMLInputElement)?.value || '1'),
            preparationTime: parseInt((document.getElementById('edit-prep-time') as HTMLInputElement)?.value || '0'),
            cookingTime: parseInt((document.getElementById('edit-cook-time') as HTMLInputElement)?.value || '0'),
            difficulty: (document.getElementById('edit-difficulty') as HTMLSelectElement)?.value as 'leicht' | 'mittel' | 'schwer'
          },
          ingredientGroups: collectIngredientGroups(),
          preparationGroups: collectPreparationGroups()
        };
        
        // Get current recipe ID from URL
        const recipeId = window.location.pathname.split('/').pop();
        
        // Debug: Log collected data
        console.log('Collected form data:', formData);
        console.log('Preparation groups with links:', formData.preparationGroups);
        
        // Send update to database
        const response = await fetch(`/api/recipes?id=${recipeId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });
        
        if (response.ok) {
          const result = await response.json();
          console.log('Recipe updated successfully:', result);
          
          // Reload the page to show updated data
          window.location.reload();
        } else {
          const error = await response.text();
          console.error('Server error:', error);
                     throw new Error(`Server error: ${response.status}`);
         }
          // Reload page to show updated content
          window.location.reload();
        
      } catch (error) {
        console.error('Error saving recipe:', error);
        alert('Fehler beim Speichern des Rezepts. Bitte versuchen Sie es erneut.');
      } finally {
        // Reset save button
        const saveBtn = document.getElementById('save-edit-btn');
        if (saveBtn) {
          saveBtn.textContent = 'Speichern';
          saveBtn.removeAttribute('disabled');
        }
      }
    });

    // Add ingredient group functionality
    document.getElementById('add-ingredient-group-btn')?.addEventListener('click', () => {
      const container = document.getElementById('ingredients-edit-container');
      const groupCount = container?.children.length || 0;
      const newGroup = document.createElement('div');
      newGroup.className = 'ingredient-group-edit border border-gray-300 dark:border-gray-600 rounded-lg p-4 bg-gray-50 dark:bg-gray-700/50 transition-colors duration-200';
      newGroup.innerHTML = `
        <div class="flex justify-between items-center mb-3">
          <input 
            type="text" 
            placeholder="Gruppenname (optional)"
            class="group-title-input flex-1 px-3 py-2 text-lg font-medium border-b border-gray-300 dark:border-gray-600 focus:outline-none focus:border-orange-500 bg-transparent text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
          />
          <button 
            type="button" 
            class="remove-group-btn ml-3 px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
            </svg>
          </button>
        </div>
        <div class="ingredients-list space-y-3"></div>
        <button 
          type="button" 
          class="add-ingredient-to-group-btn mt-3 px-3 py-1 text-sm bg-gray-500 hover:bg-gray-600 dark:bg-gray-600 dark:hover:bg-gray-500 text-white rounded transition-colors"
        >
          + Zutat zu dieser Gruppe hinzufügen
        </button>
      `;
      
      // Add event listeners to new group
      setupGroupEventListeners(newGroup);
      container?.appendChild(newGroup);
    });

    // Add ingredient functionality (adds to default ungrouped section)
    document.getElementById('add-ingredient-btn')?.addEventListener('click', () => {
      const defaultGroup = document.querySelector('.ingredient-group-edit.default-group .ingredients-list');
      if (defaultGroup) {
        addIngredientToGroup(defaultGroup);
      }
    });

    function addIngredientToGroup(ingredientsList: Element) {
      const newIngredient = document.createElement('div');
      newIngredient.className = 'ingredient-edit-item border border-gray-200 dark:border-gray-600 rounded-md p-3 bg-white dark:bg-gray-800 transition-colors duration-200';
      newIngredient.innerHTML = `
        <div class="flex space-x-3 items-center">
          <input 
            type="text" 
            placeholder="Zutatename"
            class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
          />
          <input 
            type="number" 
            placeholder="Menge"
            step="0.1"
            class="w-24 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
          />
          <select class="w-24 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
            <option value="">Einheit</option>
            <option value="g">g</option>
            <option value="kg">kg</option>
            <option value="ml">ml</option>
            <option value="l">l</option>
            <option value="Stück">Stück</option>
            <option value="TL">TL</option>
            <option value="EL">EL</option>
            <option value="Tasse">Tasse</option>
            <option value="Prise">Prise</option>
          </select>
          <button 
            type="button" 
            class="remove-ingredient-btn px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
            </svg>
          </button>
        </div>
      `;
      
      // Add remove functionality to new ingredient
      newIngredient.querySelector('.remove-ingredient-btn')?.addEventListener('click', () => {
        newIngredient.remove();
      });
      
      ingredientsList.appendChild(newIngredient);
    }

    function setupGroupEventListeners(groupElement: Element) {
      // Remove group button
      groupElement.querySelector('.remove-group-btn')?.addEventListener('click', () => {
        groupElement.remove();
      });
      
      // Add ingredient to group button
      groupElement.querySelector('.add-ingredient-to-group-btn')?.addEventListener('click', () => {
        const ingredientsList = groupElement.querySelector('.ingredients-list');
        if (ingredientsList) {
          addIngredientToGroup(ingredientsList);
        }
      });
    }

    // Add preparation group functionality
    document.getElementById('add-preparation-group-btn')?.addEventListener('click', () => {
      const container = document.getElementById('preparation-edit-container');
      const newGroup = document.createElement('div');
      newGroup.className = 'preparation-group-edit border border-gray-300 dark:border-gray-600 rounded-lg p-4 bg-gray-50 dark:bg-gray-700/50 transition-colors duration-200';
      newGroup.innerHTML = `
        <div class="flex justify-between items-center mb-3">
          <input 
            type="text" 
            placeholder="Gruppenname (optional)"
            class="group-title-input flex-1 px-3 py-2 text-lg font-medium border-b border-gray-300 dark:border-gray-600 focus:outline-none focus:border-green-500 bg-transparent text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
          />
          <button 
            type="button" 
            class="remove-prep-group-btn ml-3 px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
            </svg>
          </button>
        </div>
        <div class="steps-list space-y-4 min-h-[60px] relative"></div>
        <button 
          type="button" 
          class="add-step-to-group-btn mt-3 px-3 py-1 text-sm bg-gray-500 hover:bg-gray-600 text-white rounded transition-colors"
        >
          + Schritt zu dieser Gruppe hinzufügen
        </button>
      `;
      
      // Add event listeners to new group
      setupPrepGroupEventListeners(newGroup);
      container?.appendChild(newGroup);
    });

    // Add preparation step functionality (adds to default ungrouped section)
    document.getElementById('add-step-btn')?.addEventListener('click', () => {
      const defaultGroup = document.querySelector('.preparation-group-edit.default-group .steps-list');
      if (defaultGroup) {
        addStepToGroup(defaultGroup);
      }
    });

    function addStepToGroup(stepsList: Element) {
      const stepCount = stepsList.children.length;
      const newStep = document.createElement('div');
      newStep.className = 'step-edit-item border border-gray-200 dark:border-gray-600 rounded-md p-4 bg-white dark:bg-gray-800 transition-colors duration-200';
      newStep.setAttribute('draggable', 'true');
      newStep.innerHTML = `
        <div class="flex items-start space-x-3">
          <div class="flex items-center space-x-2">
            <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-400">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
              </svg>
            </div>
            <div class="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
              ${stepCount + 1}
            </div>
          </div>
          <div class="flex-1 space-y-3">
            <textarea 
              rows="3"
              placeholder="Zubereitungsschritt..."
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
            ></textarea>
            
            <div class="flex justify-end items-center">
              <button 
                type="button" 
                class="remove-step-btn px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
      `;
      
      // Add remove functionality to new step
      newStep.querySelector('.remove-step-btn')?.addEventListener('click', () => {
        newStep.remove();
        updateStepNumbers(stepsList);
      });

      // Add drag and drop functionality to new step
      setupStepDragAndDrop(newStep);
      
      stepsList.appendChild(newStep);
    }

    function setupPrepGroupEventListeners(groupElement: Element) {
      // Remove group button
      groupElement.querySelector('.remove-prep-group-btn')?.addEventListener('click', () => {
        groupElement.remove();
      });
      
      // Add step to group button
      groupElement.querySelector('.add-step-to-group-btn')?.addEventListener('click', () => {
        const stepsList = groupElement.querySelector('.steps-list');
        if (stepsList) {
          addStepToGroup(stepsList);
        }
      });

      // Setup drop zone for this group's steps list
      const stepsList = groupElement.querySelector('.steps-list');
      if (stepsList) {
        setupStepsListDropZone(stepsList);
      }
    }

    // Initialize existing element event listeners
    function initializeExistingEventListeners() {
      // Setup existing ingredient groups
      document.querySelectorAll('.ingredient-group-edit').forEach(group => {
        setupGroupEventListeners(group);
      });
      
      // Setup existing preparation groups
      document.querySelectorAll('.preparation-group-edit').forEach(group => {
        setupPrepGroupEventListeners(group);
      });
      
      // Remove ingredient functionality for existing ingredients
      document.querySelectorAll('.remove-ingredient-btn').forEach(button => {
        button.addEventListener('click', () => {
          button.closest('.ingredient-edit-item')?.remove();
        });
      });

      // Remove step functionality for existing steps
      document.querySelectorAll('.remove-step-btn').forEach(button => {
        button.addEventListener('click', () => {
          const stepElement = button.closest('.step-edit-item');
          const stepsList = stepElement?.closest('.steps-list');
          stepElement?.remove();
          if (stepsList) {
            updateStepNumbers(stepsList);
          }
        });
      });

      // Setup drag and drop for existing steps
      document.querySelectorAll('.step-edit-item').forEach(step => {
        setupStepDragAndDrop(step);
      });

      // Setup drop zones for all steps lists
      document.querySelectorAll('.steps-list').forEach(stepsList => {
        setupStepsListDropZone(stepsList);
      });
    }

    function updateStepNumbers(stepsList: Element) {
      const steps = stepsList.querySelectorAll('.step-edit-item');
      steps.forEach((step, index) => {
        const numberElement = step.querySelector('.w-8.h-8.bg-orange-500');
        if (numberElement) {
          numberElement.textContent = (index + 1).toString();
        }
      });
    }

    // Drag and Drop functionality for preparation steps
    let draggedStepElement: Element | null = null;
    let draggedFromList: Element | null = null;

    function setupStepDragAndDrop(stepElement: Element) {
      stepElement.addEventListener('dragstart', (e: Event) => {
        const dragEvent = e as DragEvent;
        draggedStepElement = stepElement;
        draggedFromList = stepElement.closest('.steps-list');
        stepElement.classList.add('opacity-50', 'scale-95');
        
        // Set drag effect
        if (dragEvent.dataTransfer) {
          dragEvent.dataTransfer.effectAllowed = 'move';
          dragEvent.dataTransfer.setData('text/html', stepElement.outerHTML);
        }
      });

      stepElement.addEventListener('dragend', () => {
        stepElement.classList.remove('opacity-50', 'scale-95');
        
        // Clean up any drag indicators
        document.querySelectorAll('.drag-over').forEach(el => {
          el.classList.remove('drag-over');
        });
        
        draggedStepElement = null;
        draggedFromList = null;
      });
    }

    function setupStepsListDropZone(stepsList: Element) {
      stepsList.addEventListener('dragover', (e: Event) => {
        const dragEvent = e as DragEvent;
        dragEvent.preventDefault();
        if (dragEvent.dataTransfer) {
          dragEvent.dataTransfer.dropEffect = 'move';
        }

        const afterElement = getDragAfterElement(stepsList, dragEvent.clientY);
        const dragIndicator = stepsList.querySelector('.drag-indicator');
        
        if (dragIndicator) {
          dragIndicator.remove();
        }

        // Add highlight for empty lists
        if (stepsList.children.length === 0 || (stepsList.children.length === 1 && stepsList.querySelector('.drag-indicator'))) {
          stepsList.classList.add('border-orange-300', 'bg-orange-50', 'dark:bg-orange-900/20', 'border-2', 'border-dashed');
          
          // Add empty state message if not exists
          if (!stepsList.querySelector('.empty-drop-message')) {
            const emptyMessage = document.createElement('div');
            emptyMessage.className = 'empty-drop-message absolute inset-0 flex items-center justify-center text-gray-500 dark:text-gray-400 text-sm pointer-events-none';
            emptyMessage.textContent = 'Schritt hier ablegen';
            stepsList.appendChild(emptyMessage);
          }
        } else {
          // Create drag indicator for non-empty lists
          const indicator = document.createElement('div');
          indicator.className = 'drag-indicator h-0.5 bg-orange-400 rounded mx-4 transition-all duration-200';
          
          if (afterElement == null) {
            stepsList.appendChild(indicator);
          } else {
            stepsList.insertBefore(indicator, afterElement);
          }
        }
      });

      stepsList.addEventListener('dragleave', (e: Event) => {
        const dragEvent = e as DragEvent;
        // Only remove indicator if we're leaving the steps list entirely
        if (!stepsList.contains(dragEvent.relatedTarget as Node)) {
          const dragIndicator = stepsList.querySelector('.drag-indicator');
          if (dragIndicator) {
            dragIndicator.remove();
          }
          
          // Remove empty state styling
          stepsList.classList.remove('border-orange-300', 'bg-orange-50', 'dark:bg-orange-900/20', 'border-2', 'border-dashed');
          const emptyMessage = stepsList.querySelector('.empty-drop-message');
          if (emptyMessage) {
            emptyMessage.remove();
          }
        }
      });

      stepsList.addEventListener('drop', (e: Event) => {
        const dragEvent = e as DragEvent;
        dragEvent.preventDefault();
        
        if (!draggedStepElement) return;

        const afterElement = getDragAfterElement(stepsList, dragEvent.clientY);
        const dragIndicator = stepsList.querySelector('.drag-indicator');
        
        if (dragIndicator) {
          dragIndicator.remove();
        }

        // Check if we're actually moving the element to a different position
        let shouldMove = false;
        
        if (draggedFromList !== stepsList) {
          // Moving between different lists - always move
          shouldMove = true;
        } else {
          // Same list - check if position changes
          const allSteps = Array.from(stepsList.children);
          const currentPosition = allSteps.indexOf(draggedStepElement);
          let targetPosition = allSteps.length; // Default to end
          
          if (afterElement) {
            targetPosition = allSteps.indexOf(afterElement);
          }
          
          // Only move if the target position is different
          shouldMove = currentPosition !== targetPosition && currentPosition !== (targetPosition - 1);
        }
        
        // Only move if position actually changes or if moving between different lists
        if (shouldMove) {
          // Remove from original position
          draggedStepElement.remove();

          // Insert at new position
          if (afterElement == null) {
            stepsList.appendChild(draggedStepElement);
          } else {
            stepsList.insertBefore(draggedStepElement, afterElement);
          }

          // Update step numbers for both lists
          if (draggedFromList && draggedFromList !== stepsList) {
            updateStepNumbers(draggedFromList);
          }
          updateStepNumbers(stepsList);
        }

        // Reset drag state
        draggedStepElement.classList.remove('opacity-50', 'scale-95');
        
        // Clean up empty state styling
        stepsList.classList.remove('border-orange-300', 'bg-orange-50', 'dark:bg-orange-900/20', 'border-2', 'border-dashed');
        const emptyMessage = stepsList.querySelector('.empty-drop-message');
        if (emptyMessage) {
          emptyMessage.remove();
        }
      });
    }

    function getDragAfterElement(container: Element, y: number): Element | null {
      // Exclude the currently dragged element from calculations
      const draggableElements = Array.from(container.querySelectorAll('.step-edit-item')).filter(el => el !== draggedStepElement);
      
      return draggableElements.reduce((closest: { offset: number; element: Element | null }, child) => {
        const box = (child as Element).getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        
        if (offset < 0 && offset > closest.offset) {
          return { offset: offset, element: child as Element };
        } else {
          return closest;
        }
      }, { offset: Number.NEGATIVE_INFINITY, element: null }).element;
    }



    // Check if we should auto-enter edit mode (for new recipes)
    function checkAutoEditMode() {
      const urlParams = new URLSearchParams(window.location.search);
      const shouldEdit = urlParams.get('edit');
      
      if (shouldEdit === 'true') {
        // Remove the edit parameter from URL without page reload
        const newUrl = window.location.pathname;
        window.history.replaceState({}, '', newUrl);
        
        // Auto-enter edit mode
        toggleEditMode();
      }
    }
    
    // Initialize all event listeners
    initializeExistingEventListeners();
    
    // Check for auto-edit mode
    checkAutoEditMode();



    // Collect ingredients from edit form
    function collectIngredientGroups() {
      const groups: any[] = [];
      const groupElements = document.querySelectorAll('.ingredient-group-edit');
      
      groupElements.forEach((groupElement, groupIndex) => {
        const isDefaultGroup = groupElement.hasAttribute('data-is-default');
        const groupTitle = isDefaultGroup ? '' : ((groupElement.querySelector('.group-title-input') as HTMLInputElement)?.value || '');
        const ingredients: any[] = [];
        
        const ingredientElements = groupElement.querySelectorAll('.ingredient-edit-item');
        ingredientElements.forEach((ingredientElement, ingredientIndex) => {
          const nameInput = ingredientElement.querySelector('input[placeholder="Zutatename"]') as HTMLInputElement;
          const amountInput = ingredientElement.querySelector('input[placeholder="Menge"]') as HTMLInputElement;
          const unitSelect = ingredientElement.querySelector('select') as HTMLSelectElement;
          
          if (nameInput?.value.trim()) {
            ingredients.push({
              id: `ingredient-${groupIndex}-${ingredientIndex}`,
              name: nameInput.value.trim(),
              quantities: [{
                amount: parseFloat(amountInput?.value || '0'),
                unit: unitSelect?.value || ''
              }]
            });
          }
        });
        
        // Only add groups that have ingredients
        if (ingredients.length > 0) {
          groups.push({
            id: `group-${groupIndex}`,
            title: groupTitle || undefined,
            ingredients: ingredients
          });
        }
      });
      
      return groups.length > 0 ? groups : [{
        id: 'default-group',
        ingredients: []
      }];
    }

    // Collect preparation steps from edit form
    function collectPreparationGroups() {
      const groups: any[] = [];
      const groupElements = document.querySelectorAll('.preparation-group-edit');
      
      groupElements.forEach((groupElement, groupIndex) => {
        const isDefaultGroup = groupElement.hasAttribute('data-is-default');
        const groupTitle = isDefaultGroup ? '' : ((groupElement.querySelector('.group-title-input') as HTMLInputElement)?.value || '');
        const steps: any[] = [];
        
        const stepElements = groupElement.querySelectorAll('.step-edit-item');
        stepElements.forEach((stepElement, stepIndex) => {
          const textArea = stepElement.querySelector('textarea') as HTMLTextAreaElement;
          
          if (textArea?.value.trim()) {
            steps.push({
              id: `step-${groupIndex}-${stepIndex}`,
              text: textArea.value.trim(),
              linkedIngredients: []
            });
          }
        });
        
        // Only add groups that have steps
        if (steps.length > 0) {
          groups.push({
            id: `prep-group-${groupIndex}`,
            title: groupTitle || undefined,
            steps: steps
          });
        }
      });
      
      return groups.length > 0 ? groups : [{
        id: 'default-prep-group',
        steps: []
      }];
    }


  </script>
</Layout> 
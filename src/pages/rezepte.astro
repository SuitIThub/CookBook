---
import Layout from '../layouts/Layout.astro';
import RecipeListHeader from '../components/recipe_list/RecipeListHeader.astro';
import RecipeCard from '../components/recipe_list/RecipeCard.astro';
import EmptyState from '../components/recipe_list/EmptyState.astro';
import SearchBar from '../components/recipe_list/SearchBar.astro';
import { ImportModal } from '../components/modals';
import { db } from '../lib/database';

// Fetch recipes from the database
const recipes = db.getAllRecipes();

// Extract unique categories and remove undefined/null
const categories = Array.from(new Set(
  recipes
    .map(r => r.category)
    .filter((c): c is string => c != null)
));

// Get URL parameters
const searchQuery = Astro.url.searchParams.get('search') || '';
const selectedCategory = Astro.url.searchParams.get('category') || '';
---

<Layout title="Rezepte - Kochbuch">
  <div class="space-y-6">
    <RecipeListHeader recipeCount={recipes.length} />
    <SearchBar 
      categories={categories}
      initialSearchQuery={searchQuery}
      initialCategory={selectedCategory}
    />
    
    {recipes.length > 0 ? (
      <div class="grid-responsive">
        {recipes.map(recipe => (
          <RecipeCard recipe={recipe} />
        ))}
      </div>
    ) : (
      <EmptyState />
    )}
  </div>
  
  <!-- Import Modal -->
  <ImportModal id="import-modal" />
  
  <!-- Hidden file input for import -->
  <input type="file" id="import-file" accept=".json,.rcb" style="display: none;">
</Layout>

<script>
  // Function to initialize page functionality
  function initializePageFunctionality() {
    // Button in RecipeListHeader
    const createBtn = document.getElementById('create-recipe-btn');
    if (createBtn) {
      // The createNewRecipe function is defined in EmptyState.astro
      // We're attaching it to the button in RecipeListHeader
      createBtn.addEventListener('click', async () => {
        try {
          const response = await fetch('/api/recipes?action=create-empty', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          if (response.ok) {
            const newRecipe = await response.json();
            // Redirect to the new recipe in edit mode
            window.location.href = `/rezept/${newRecipe.id}?edit=true`;
          } else {
            console.error('Failed to create recipe');
            if (window.showError) {
              window.showError('Fehler beim Erstellen des Rezepts. Bitte versuchen Sie es erneut.');
            } else {
              alert('Fehler beim Erstellen des Rezepts. Bitte versuchen Sie es erneut.');
            }
          }
        } catch (error) {
          console.error('Error creating recipe:', error);
          if (window.showError) {
            window.showError('Fehler beim Erstellen des Rezepts. Bitte versuchen Sie es erneut.');
          } else {
            alert('Fehler beim Erstellen des Rezepts. Bitte versuchen Sie es erneut.');
          }
        }
      });
    }
  }

  // Clear URL parameters when leaving the page
  window.addEventListener('beforeunload', () => {
    // Only clear if we're navigating away from the recipe list
    if (window.location.pathname === '/rezepte') {
      const url = new URL(window.location.href);
      url.searchParams.delete('search');
      url.searchParams.delete('category');
      window.history.replaceState({}, '', url);
    }
  });
  
  // Initialize on DOMContentLoaded
  document.addEventListener('DOMContentLoaded', initializePageFunctionality);
  
  // Initialize after Astro View Transitions
  document.addEventListener('astro:page-load', initializePageFunctionality);
</script> 
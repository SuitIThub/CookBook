---
import '../styles/components.css';
import MultiTimerManager from '../components/timer/MultiTimerManager.astro';

export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="de" style="background-color: #111827; color: #f9fafb;">
  <script>
    // Theme detection script (runs immediately to prevent flash)
    (function() {
      const theme = localStorage.getItem('theme') || 
        (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
      
      // Apply theme class immediately
      document.documentElement.classList.toggle('dark', theme === 'dark');
      document.documentElement.classList.add(theme);
      
      // Apply correct colors based on theme
      if (theme === 'dark') {
        document.documentElement.style.backgroundColor = '#111827'; // gray-900
        document.documentElement.style.color = '#f9fafb'; // gray-100
      } else {
        document.documentElement.style.backgroundColor = '#f9fafb'; // gray-50
        document.documentElement.style.color = '#111827'; // gray-900
      }
      
      // Ensure visibility is set
      document.documentElement.style.visibility = 'visible';
    })();
  </script>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Digitales Kochbuch fÃ¼r Rezepte und Einkaufslisten" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- PWA Meta Tags -->
    <meta name="application-name" content="Kochbuch" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Kochbuch" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="theme-color" content="#f97316" />
    
    <!-- PWA Links -->
    <link rel="manifest" href="/manifest.json" />
    <link rel="shortcut icon" href="/favicon.svg" />
    
    <!-- Apple Touch Icons -->
    <link rel="apple-touch-icon" href="/icons/icon-152x152.svg" />
    <link rel="apple-touch-icon" sizes="152x152" href="/icons/icon-152x152.svg" />
    <link rel="apple-touch-icon" sizes="180x180" href="/icons/icon-192x192.svg" />
    
    <!-- Microsoft Tiles -->
    <meta name="msapplication-TileColor" content="#f97316" />
    <meta name="msapplication-TileImage" content="/icons/icon-144x144.svg" />
    <style>
      /* Prevent flash of unstyled content during theme initialization */
      html:not(.dark):not(.light) {
        visibility: hidden;
      }
      /* Ensure smooth transition once CSS loads */
      html {
        transition: background-color 0.2s ease, color 0.2s ease;
      }
      /* Remove inline styles once CSS loads */
      html.css-loaded {
        background-color: unset !important;
        color: unset !important;
      }
    </style>
  </head>
  <body class="min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-200">
    <header class="nav-header">
      <nav class="container">
        <div class="flex justify-between h-16">
          <div class="flex items-center">
            <a href="/" class="flex items-center space-x-2">
              <svg class="w-8 h-8 text-orange-500" fill="currentColor" viewBox="0 0 20 20">
                <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
              </svg>
              <span class="text-xl font-semibold text-gray-900 dark:text-white">Kochbuch</span>
            </a>
          </div>
          <div class="flex items-center space-x-4">
            <a href="/" class="nav-link">
              Rezepte
            </a>
            <a href="/einkaufsliste" class="nav-link">
              Einkaufsliste
            </a>
            <button id="create-recipe-btn" class="btn btn-primary">
              Neues Rezept
            </button>
            <!-- Theme Toggle Button -->
            <button id="theme-toggle" class="btn-icon text-gray-700 dark:text-gray-300 hover:text-orange-500 dark:hover:text-orange-400" aria-label="Toggle dark mode">
              <!-- Sun icon (visible in dark mode) -->
              <svg id="theme-toggle-light-icon" class="hidden dark:block w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
              </svg>
              <!-- Moon icon (visible in light mode) -->
              <svg id="theme-toggle-dark-icon" class="block dark:hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
              </svg>
            </button>
          </div>
        </div>
      </nav>
    </header>

    <main class="container py-8">
      <slot />
    </main>

    <!-- Multi-Timer Component -->
    <MultiTimerManager />

    <script>
      // Theme toggle functionality
      function initializeTheme() {
        const themeToggle = document.getElementById('theme-toggle');
        if (!themeToggle) return;

        function toggleTheme() {
          const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
          const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
          
          document.documentElement.classList.toggle('dark', newTheme === 'dark');
          document.documentElement.classList.remove(currentTheme);
          document.documentElement.classList.add(newTheme);
          localStorage.setItem('theme', newTheme);
        }

        themeToggle.addEventListener('click', toggleTheme);
      }

      // Remove inline styles once CSS is loaded and mark as loaded
      function cleanupInlineStyles() {
        document.documentElement.classList.add('css-loaded');
        // Small delay to ensure CSS transitions work properly
        setTimeout(() => {
          document.documentElement.style.backgroundColor = '';
          document.documentElement.style.color = '';
        }, 100);
      }

      // Initialize theme toggle when DOM is loaded
      document.addEventListener('DOMContentLoaded', () => {
        initializeTheme();
        cleanupInlineStyles();
      });

      // Create recipe functionality
      async function createNewRecipe() {
        try {
          const response = await fetch('/api/recipes?action=create-empty', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          if (response.ok) {
            const newRecipe = await response.json();
            // Redirect to the new recipe in edit mode
            window.location.href = `/rezept/${newRecipe.id}?edit=true`;
          } else {
            console.error('Failed to create recipe');
            alert('Fehler beim Erstellen des Rezepts. Bitte versuchen Sie es erneut.');
          }
        } catch (error) {
          console.error('Error creating recipe:', error);
          alert('Fehler beim Erstellen des Rezepts. Bitte versuchen Sie es erneut.');
        }
      }

      // Initialize create recipe button when DOM is loaded
      document.addEventListener('DOMContentLoaded', () => {
        const createBtn = document.getElementById('create-recipe-btn');
        if (createBtn) {
          createBtn.addEventListener('click', createNewRecipe);
        }
      });

      // Multi-Timer functionality will be handled by the MultiTimerManager component
      // Placeholder for global timer function that will be overridden
      (window as any).startTimer = (label: string, duration: number) => {
        console.log('Timer functionality loading...');
      };
      
      // Register service worker for PWA functionality
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js')
            .then((registration) => {
              console.log('SW registered: ', registration);
            })
            .catch((registrationError) => {
              console.log('SW registration failed: ', registrationError);
            });
        });
      }
    </script>
  </body>
</html> 
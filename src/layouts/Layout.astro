---
import { ViewTransitions } from 'astro:transitions';
import '../styles/components.css';
import MultiTimerManager from '../components/timer/MultiTimerManager.astro';
import NotificationModal from '../components/modals/NotificationModal.astro';
import WarningModal from '../components/modals/WarningModal.astro';
import WarningImportModal from '../components/modals/WarningImportModal.astro';

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Dark mode script - MUSS vor ViewTransitions sein -->
    <script is:inline>
      // Sofort beim Laden der Seite ausf체hren, um Flackern zu vermeiden
      const theme = localStorage.getItem('color-theme');
      
      // Wenn Dark Mode gespeichert ist oder System-Pr채ferenz dunkel ist
      if (theme === 'dark' || (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
      
      // Icons entsprechend aktualisieren (wird sp채ter im DOM ausgef체hrt)
      document.addEventListener('DOMContentLoaded', () => {
        const isDark = document.documentElement.classList.contains('dark');
        const lightIcon = document.getElementById('theme-toggle-light-icon');
        const darkIcon = document.getElementById('theme-toggle-dark-icon');
        
        if (lightIcon && darkIcon) {
          lightIcon.classList.toggle('hidden', !isDark);
          darkIcon.classList.toggle('hidden', isDark);
        }
      });
    </script>
    
    <ViewTransitions />
    
    <!-- PWA meta tags -->
    <meta name="description" content="Eine moderne Kochbuch-App zum Speichern, Verwalten und Kochen deiner Lieblingsrezepte." />
    <meta name="theme-color" content="#f97316" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/manifest.json" />
    
    <!-- Font preloading -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body class="bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-white min-h-screen flex flex-col transition-colors">
    <header class="sticky top-0 z-30 w-full">
      <nav class="nav-header">
        <div class="container flex items-center justify-between h-16">
          <div class="flex items-center">
            <a href="/" class="flex items-center space-x-3">
              <img src="/icons/icon_alpha_32.svg" alt="Logo" class="h-8 w-8" />
              <span class="text-xl font-bold text-gray-900 dark:text-white">Kochbuch</span>
            </a>
            <div class="hidden landscape:flex ml-10 space-x-4">
              <a href="/rezepte" class="nav-link">
                Rezepte
              </a>
              <a href="/einkaufslisten" class="nav-link">
                Einkaufslisten
              </a>
            </div>
          </div>
          <div class="flex items-center space-x-2">
            <button id="theme-toggle" class="btn-icon text-gray-700 dark:text-gray-300 hover:text-orange-500 dark:hover:text-orange-400" aria-label="Toggle dark mode">
              <!-- Sun icon -->
              <svg id="theme-toggle-light-icon" class="hidden w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
              </svg>
              <!-- Moon icon -->
              <svg id="theme-toggle-dark-icon" class="hidden w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
              </svg>
            </button>
            <button id="mobile-menu-toggle" class="btn-icon text-gray-700 dark:text-gray-300 hover:text-orange-500 dark:hover:text-orange-400" aria-label="Toggle mobile menu">
              <!-- Hamburger icon -->
              <svg id="mobile-menu-open" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
              </svg>
              <!-- Close icon -->
              <svg id="mobile-menu-close" class="hidden w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>

        <!-- Mobile menu -->
        <div id="mobile-menu" class="hidden border-t border-gray-200 dark:border-gray-700 mt-2 pt-4 pb-4">
          <div class="flex flex-col space-y-3">
            <a href="/rezepte" class="nav-link text-base">
              Rezepte
            </a>
            <a href="/einkaufslisten" class="nav-link text-base">
              Einkaufslisten
            </a>
          </div>
        </div>
      </nav>
    </header>

    <main class="container py-8">
      <slot />
    </main>

    <!-- Multi-Timer Component -->
    <MultiTimerManager />

    <!-- Global Modal for notifications -->
    <NotificationModal id="notification-modal" />
    
    <!-- Warning Modal -->
    <WarningModal id="warning-modal" />
    
    <!-- Warning Import Modal -->
    <WarningImportModal id="warning-import-modal" />

    <script>
      // Mobile menu toggle
      const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
      const mobileMenu = document.getElementById('mobile-menu');
      const mobileMenuOpen = document.getElementById('mobile-menu-open');
      const mobileMenuClose = document.getElementById('mobile-menu-close');
      
      mobileMenuToggle?.addEventListener('click', () => {
        mobileMenu?.classList.toggle('hidden');
        mobileMenuOpen?.classList.toggle('hidden');
        mobileMenuClose?.classList.toggle('hidden');
      });
      
      // Dark mode toggle
      const themeToggleBtn = document.getElementById('theme-toggle');
      const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');
      const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
      
      // Update icon visibility based on current theme
      function updateThemeToggleIcons() {
        const isDarkMode = document.documentElement.classList.contains('dark');
        
        if (themeToggleLightIcon && themeToggleDarkIcon) {
          // Show sun icon in dark mode, moon icon in light mode
          themeToggleLightIcon.classList.toggle('hidden', !isDarkMode);
          themeToggleDarkIcon.classList.toggle('hidden', isDarkMode);
        }
      }
      
      // Call once on page load to ensure icons are correct
      updateThemeToggleIcons();
      
      themeToggleBtn?.addEventListener('click', function() {
        // Toggle dark mode class
        document.documentElement.classList.toggle('dark');
        
        // Update localStorage
        if (document.documentElement.classList.contains('dark')) {
          localStorage.setItem('color-theme', 'dark');
        } else {
          localStorage.setItem('color-theme', 'light');
        }
        
        // Update icons
        updateThemeToggleIcons();
      });
      
      // Listen for theme changes from other tabs/windows
      window.addEventListener('storage', (e) => {
        if (e.key === 'color-theme') {
          // Update theme based on localStorage
          const isDark = e.newValue === 'dark';
          document.documentElement.classList.toggle('dark', isDark);
          updateThemeToggleIcons();
        }
      });
      
      // Handle Astro View Transitions
      document.addEventListener('astro:after-swap', () => {
        // Re-apply theme after page transition
        const theme = localStorage.getItem('color-theme');
        if (theme === 'dark' || (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
        
        // Update icons after transition
        updateThemeToggleIcons();
      });
    </script>
  </body>
</html> 
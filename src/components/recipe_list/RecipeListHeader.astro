---
interface Props {
  recipeCount: number;
}

const { recipeCount } = Astro.props;

declare global {
  interface Window {
    showModal: (message: string, autoHide?: number) => Promise<void>;
    showSuccess: (message: string) => Promise<void>;
    showError: (message: string) => Promise<void>;
    showWarning: (message: string) => Promise<void>;
    showConfirm: (message: string) => Promise<boolean>;
    showDeleteConfirm: (message: string) => Promise<boolean>;
  }
}
---

<style>
  .flex-between {
    @apply flex flex-col md:flex-row md:justify-between gap-4 md:gap-0;
  }
</style>

<div class="flex-between">
  <div>
    <h1 class="heading-primary">Meine Rezepte</h1>
    <p class="text-muted mt-1">
      <span id="recipe-count">{recipeCount}</span> Rezepte gefunden
      <span id="selected-count" class="hidden">
        (<span class="text-orange-600 dark:text-orange-400">0 ausgewählt</span>)
      </span>
    </p>
  </div>
  
  <!-- Bulk Actions -->
  <div id="bulk-actions" class="hidden flex flex-wrap gap-2">
    <button id="cancel-selection" class="btn btn-secondary flex items-center space-x-2 flex-1 md:flex-none justify-center">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
      <span>Auswahl beenden</span>
    </button>

    <button id="bulk-delete" class="btn btn-danger flex items-center space-x-2 flex-1 md:flex-none justify-center">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
      </svg>
      <span>Löschen</span>
    </button>
    
    <div class="relative flex-1 md:flex-none">
      <button id="bulk-export-btn" class="btn btn-secondary flex items-center space-x-2 w-full justify-center">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
        </svg>
        <span>Exportieren</span>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
        </svg>
      </button>
      <div id="bulk-export-menu" class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 hidden z-10">
        <div class="py-1">
          <button id="bulk-export-json" class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
            JSON (ohne Bilder)
          </button>
          <button id="bulk-export-rcb" class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
            </svg>
            Vollständig (mit Bildern)
          </button>
        </div>
      </div>
    </div>
    
    <button id="bulk-shopping-list" class="btn btn-secondary flex items-center space-x-2 flex-1 md:flex-none justify-center">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"/>
      </svg>
      <span>Zur Einkaufsliste</span>
    </button>
  </div>

  <!-- Regular Actions -->
  <div id="regular-actions" class="flex flex-wrap gap-2">
    <!-- Selection Mode Button (Mobile) -->
    <button id="selection-mode-btn" class="btn btn-secondary flex items-center space-x-2 md:hidden flex-1 justify-center">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
      </svg>
      <span>Auswählen</span>
    </button>

    <!-- Create Recipe Button -->
    <button id="create-recipe-btn" class="btn btn-primary flex items-center space-x-2 flex-1 md:flex-none justify-center">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
      </svg>
      <span>Neues Rezept</span>
    </button>

    <!-- Import Button -->
    <button id="import-btn" class="btn btn-secondary flex items-center space-x-2 flex-1 md:flex-none justify-center">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
      </svg>
      <span>Importieren</span>
    </button>
    
    <!-- Export Dropdown -->
    <div class="relative flex-1 md:flex-none">
      <button id="export-btn" class="btn btn-secondary flex items-center space-x-2 w-full justify-center">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
        </svg>
        <span>Exportieren</span>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
        </svg>
      </button>
      <div id="export-menu" class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 hidden z-10">
        <div class="py-1">
          <button id="export-json" class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
            JSON (ohne Bilder)
          </button>
          <button id="export-rcb" class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
            </svg>
            Vollständig (mit Bildern)
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Hidden file input for import -->
<input type="file" id="import-file" accept=".json,.rcb" style="display: none;">

<!-- Import/Export Modal -->
<div id="import-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
  <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4 shadow-xl">
    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Rezepte importieren</h3>
    
    <!-- Import Type Selector -->
    <div class="mb-4">
      <div class="flex border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-700">
        <button id="import-file-tab" class="flex-1 px-4 py-2 text-sm font-medium text-gray-900 dark:text-white bg-white dark:bg-gray-800 rounded-l-lg border-r border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:bg-orange-50 dark:focus:bg-orange-900/50 transition-colors">
          Datei
        </button>
        <button id="import-url-tab" class="flex-1 px-4 py-2 text-sm font-medium text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:bg-orange-50 dark:focus:bg-orange-900/50 transition-colors">
          URL
        </button>
      </div>
    </div>
    
    <!-- File Import Content -->
    <div id="import-file-content">
      <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center hover:border-orange-400 dark:hover:border-orange-500 transition-colors">
        <svg class="mx-auto h-12 w-12 text-gray-400 dark:text-gray-500" stroke="currentColor" fill="none" viewBox="0 0 48 48">
          <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3-3m-3 3l3 3m-3-3H21" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <div class="mt-4">
          <label for="file-upload" class="cursor-pointer">
            <span class="mt-2 block text-sm font-medium text-gray-900 dark:text-white">
              Datei auswählen oder hier ablegen
            </span>
            <span class="mt-1 block text-xs text-gray-500 dark:text-gray-400">
              JSON oder RCB Dateien (.json, .rcb)
            </span>
          </label>
          <input id="file-upload" name="file-upload" type="file" accept=".json,.rcb" class="sr-only">
        </div>
      </div>
    </div>
    
    <!-- URL Import Content -->
    <div id="import-url-content" class="hidden">
      <div class="space-y-4">
        <div>
          <label for="recipe-url" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Rezept-URL eingeben
          </label>
          <input 
            type="url" 
            id="recipe-url" 
            placeholder="https://www.chefkoch.de/rezepte/..." 
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-orange-500 focus:border-orange-500 dark:bg-gray-700 dark:text-white"
          >
          <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
            Unterstützt: Chefkoch.de, Lecker.de und viele andere Websites mit Rezept-Daten
          </p>
        </div>
        <div id="url-preview" class="hidden p-4 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600">
          <div class="space-y-3">
            <div class="text-sm text-gray-600 dark:text-gray-300">
              <strong>Erkannte Website:</strong> <span id="detected-site" class="text-orange-600 dark:text-orange-400"></span>
            </div>
            
            <div id="extractor-details" class="text-sm text-gray-600 dark:text-gray-300">
              <div class="font-medium mb-2">Extraktor-Funktionen:</div>
              <div class="grid grid-cols-2 gap-2 text-xs">
                <div class="flex items-center space-x-2">
                  <span id="ingredient-groups-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Zutatengruppen</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="preparation-groups-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Zubereitungsgruppen</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="images-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Bilder</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="nutrition-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Nährwerte</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="metadata-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Metadaten</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="keywords-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Keywords</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="category-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Kategorie</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="difficulty-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Schwierigkeit</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="time-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Zeit-Extraktion</span>
                </div>
              </div>
              <div id="extractor-description" class="mt-2 text-xs text-gray-500 dark:text-gray-400 italic"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="mt-6 flex justify-end space-x-3">
      <button id="cancel-import" class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">Abbrechen</button>
      <button id="confirm-import" class="px-4 py-2 text-sm font-medium text-white bg-orange-500 border border-transparent rounded-md hover:bg-orange-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed" disabled>Importieren</button>
    </div>
  </div>
</div>

<!-- Warning Modal -->
<div id="warning-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
  <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4 shadow-xl">
    <div class="flex items-center mb-4">
      <svg class="w-6 h-6 text-yellow-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
      </svg>
      <h3 class="text-lg font-medium text-gray-900 dark:text-white">Wichtige Hinweise zum Import</h3>
    </div>
    
    <div id="warning-list" class="space-y-2 mb-6 text-sm text-gray-700 dark:text-gray-300">
      <!-- Warnings will be inserted here -->
    </div>
    
    <div class="flex justify-end">
      <button id="continue-to-recipe" class="px-4 py-2 text-sm font-medium text-white bg-orange-500 border border-transparent rounded-md hover:bg-orange-600 transition-colors">
        Verstanden, weiter zum Rezept
      </button>
    </div>
  </div>
</div>

<!-- Shopping List Modal -->
<div id="shopping-list-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
  <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4 shadow-xl">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-medium text-gray-900 dark:text-white">Zur Einkaufsliste hinzufügen</h3>
      <button id="close-shopping-list-modal" class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <div class="space-y-4">
      <!-- Create New List Button -->
      <button id="create-new-list" class="w-full btn btn-primary flex items-center justify-center space-x-2">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
        </svg>
        <span>Neue Einkaufsliste erstellen</span>
      </button>

      <!-- Existing Lists -->
      <div class="border-t border-gray-200 dark:border-gray-700 pt-4">
        <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Oder zu bestehender Liste hinzufügen:</h4>
        <div id="existing-lists" class="space-y-2 max-h-60 overflow-y-auto">
          <!-- Lists will be inserted here -->
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Selection state
  let selectedRecipes = new Set();
  let isSelectionMode = false;
  
  // UI Elements
  const bulkActions = document.getElementById('bulk-actions');
  const regularActions = document.getElementById('regular-actions');
  const selectedCount = document.getElementById('selected-count');
  const selectedCountText = selectedCount?.querySelector('span');
  const cancelSelectionBtn = document.getElementById('cancel-selection');
  const selectionModeBtn = document.getElementById('selection-mode-btn');
  
  // Bulk action buttons
  const bulkDeleteBtn = document.getElementById('bulk-delete');
  const bulkExportBtn = document.getElementById('bulk-export-btn');
  const bulkExportMenu = document.getElementById('bulk-export-menu');
  const bulkExportJsonBtn = document.getElementById('bulk-export-json');
  const bulkExportRcbBtn = document.getElementById('bulk-export-rcb');
  const bulkShoppingListBtn = document.getElementById('bulk-shopping-list');
  
  // Toggle selection mode
  selectionModeBtn?.addEventListener('click', () => {
    isSelectionMode = true;
    document.querySelectorAll('.recipe-card').forEach(card => {
      card.classList.add('selection-mode');
    });
    updateUI();
  });

  // Handle recipe card clicks in selection mode
  document.addEventListener('click', (e) => {
    const recipeCard = (e.target as HTMLElement).closest('.recipe-card');
    if (!recipeCard || !isSelectionMode) return;

    const recipeId = recipeCard.getAttribute('data-recipe-id');
    if (!recipeId) return;

    const checkbox = recipeCard.querySelector<HTMLInputElement>('.recipe-select-checkbox');
    if (!checkbox) return;

    // Toggle checkbox
    checkbox.checked = !checkbox.checked;

    if (checkbox.checked) {
      selectedRecipes.add(recipeId);
      recipeCard.classList.add('selected');
    } else {
      selectedRecipes.delete(recipeId);
      recipeCard.classList.remove('selected');
    }

    updateUI();
  });

  // Update UI based on selection state
  function updateUI() {
    const count = selectedRecipes.size;
    
    if (count > 0 || isSelectionMode) {
      bulkActions?.classList.remove('hidden');
      regularActions?.classList.add('hidden');
      selectedCount?.classList.remove('hidden');
      if (selectedCountText) {
        selectedCountText.textContent = `${count} ausgewählt`;
      }
    } else {
      bulkActions?.classList.add('hidden');
      regularActions?.classList.remove('hidden');
      selectedCount?.classList.add('hidden');
    }
  }

  // Cancel selection
  function cancelSelection() {
    // Uncheck all checkboxes
    document.querySelectorAll<HTMLInputElement>('.recipe-select-checkbox').forEach(checkbox => {
      checkbox.checked = false;
    });
    
    // Remove selected class from all recipe cards
    document.querySelectorAll('.recipe-card').forEach(card => {
      card.classList.remove('selected');
      card.classList.remove('selection-mode');
    });
    
    // Clear selection set and mode
    selectedRecipes.clear();
    isSelectionMode = false;
    
    // Update UI
    updateUI();
  }

  // Cancel selection button click
  cancelSelectionBtn?.addEventListener('click', cancelSelection);

  // Handle checkbox changes (for desktop)
  document.addEventListener('change', (e) => {
    const checkbox = e.target as HTMLInputElement;
    if (!checkbox.classList.contains('recipe-select-checkbox')) return;
    
    const recipeId = checkbox.dataset.recipeId;
    if (!recipeId) return;
    
    const recipeCard = document.querySelector(`.recipe-card[data-recipe-id="${recipeId}"]`);
    if (!recipeCard) return;
    
    if (checkbox.checked) {
      selectedRecipes.add(recipeId);
      recipeCard.classList.add('selected');
      if (!isSelectionMode) {
        isSelectionMode = true;
        document.querySelectorAll('.recipe-card').forEach(card => {
          card.classList.add('selection-mode');
        });
      }
    } else {
      selectedRecipes.delete(recipeId);
      recipeCard.classList.remove('selected');
    }
    
    updateUI();
  });
  
  // Bulk delete
  bulkDeleteBtn?.addEventListener('click', async () => {
    if (selectedRecipes.size === 0) return;
    
    const confirmed = await window.showDeleteConfirm(
      `Möchten Sie wirklich ${selectedRecipes.size} Rezept${selectedRecipes.size === 1 ? '' : 'e'} löschen?`
    );
    
    if (!confirmed) return;
    
    try {
      const response = await fetch('/api/recipes', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: Array.from(selectedRecipes) })
      });
      
      if (!response.ok) throw new Error('Fehler beim Löschen der Rezepte');
      
      window.location.reload();
    } catch (error) {
      console.error('Fehler beim Löschen:', error);
      window.showError('Die Rezepte konnten nicht gelöscht werden.');
    }
  });
  
  // Bulk export
  bulkExportBtn?.addEventListener('click', (e) => {
    e.stopPropagation();
    bulkExportMenu?.classList.toggle('hidden');
  });
  
  document.addEventListener('click', () => {
    bulkExportMenu?.classList.add('hidden');
  });
  
  bulkExportJsonBtn?.addEventListener('click', () => {
    if (selectedRecipes.size === 0) return;
    window.location.href = `/api/recipe-export?format=json&ids=${Array.from(selectedRecipes).join(',')}`;
    bulkExportMenu?.classList.add('hidden');
  });
  
  bulkExportRcbBtn?.addEventListener('click', () => {
    if (selectedRecipes.size === 0) return;
    window.location.href = `/api/recipe-export?format=rcb&ids=${Array.from(selectedRecipes).join(',')}`;
    bulkExportMenu?.classList.add('hidden');
  });
  
  // Shopping List Modal
  const shoppingListModal = document.getElementById('shopping-list-modal');
  const closeShoppingListModal = document.getElementById('close-shopping-list-modal');
  const createNewList = document.getElementById('create-new-list');
  const existingLists = document.getElementById('existing-lists');

  // Show shopping list modal
  bulkShoppingListBtn?.addEventListener('click', async () => {
    if (selectedRecipes.size === 0) return;

    try {
      // Fetch existing shopping lists
      const response = await fetch('/api/shopping-lists');
      if (!response.ok) throw new Error('Fehler beim Laden der Einkaufslisten');
      
      const lists = await response.json();
      
      // Clear and populate existing lists
      if (existingLists) {
        existingLists.innerHTML = '';
        
        if (lists.length === 0) {
          existingLists.innerHTML = `
            <p class="text-sm text-gray-500 dark:text-gray-400 text-center py-4">
              Keine bestehenden Einkaufslisten gefunden
            </p>
          `;
        } else {
          lists.forEach((list: any) => {
            const button = document.createElement('button');
            button.className = 'w-full btn btn-secondary flex items-center justify-between p-3 hover:bg-gray-50 dark:hover:bg-gray-700';
            button.innerHTML = `
              <span class="flex items-center space-x-3">
                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
                <span class="text-left">
                  <span class="block font-medium">${list.title}</span>
                  <span class="block text-sm text-gray-500">${list.items?.length || 0} Zutaten</span>
                </span>
              </span>
              <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            `;
            
            button.addEventListener('click', () => addToExistingList(list.id));
            existingLists.appendChild(button);
          });
        }
      }
      
      // Show modal
      shoppingListModal?.classList.remove('hidden');
    } catch (error) {
      console.error('Fehler beim Laden der Einkaufslisten:', error);
      const errorMessage = document.createElement('div');
      errorMessage.className = 'text-sm text-red-600 dark:text-red-400 text-center py-4';
      errorMessage.textContent = 'Fehler beim Laden der Einkaufslisten';
      if (existingLists) existingLists.innerHTML = errorMessage.outerHTML;
    }
  });

  // Close modal
  closeShoppingListModal?.addEventListener('click', () => {
    shoppingListModal?.classList.add('hidden');
  });

  // Create new list
  createNewList?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/shopping-lists', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: `Einkaufsliste vom ${new Date().toLocaleDateString('de-DE')}`,
          recipeIds: Array.from(selectedRecipes)
        })
      });
      
      if (!response.ok) throw new Error('Fehler beim Erstellen der Einkaufsliste');
      
      const { id } = await response.json();
      window.location.href = `/einkaufsliste/${id}`;
    } catch (error) {
      console.error('Fehler beim Erstellen der Einkaufsliste:', error);
      alert('Die Einkaufsliste konnte nicht erstellt werden.');
    }
  });

  // Add to existing list
  async function addToExistingList(listId: string) {
    try {
      const response = await fetch(`/api/shopping-lists/${listId}/recipes`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          recipeIds: Array.from(selectedRecipes)
        })
      });
      
      if (!response.ok) throw new Error('Fehler beim Hinzufügen zur Einkaufsliste');
      
      window.location.href = `/einkaufsliste/${listId}`;
    } catch (error) {
      console.error('Fehler beim Hinzufügen zur Einkaufsliste:', error);
      alert('Die Rezepte konnten nicht zur Einkaufsliste hinzugefügt werden.');
    }
  }

  // Close modal when clicking outside
  shoppingListModal?.addEventListener('click', (e) => {
    if (e.target === shoppingListModal) {
      shoppingListModal.classList.add('hidden');
    }
  });

  // Import functionality
  const importBtn = document.getElementById('import-btn');
  const importModal = document.getElementById('import-modal');
  const importFile = document.getElementById('import-file');
  const fileUpload = document.getElementById('file-upload');
  const cancelImport = document.getElementById('cancel-import');
  const confirmImport = document.getElementById('confirm-import');
  
  // Tab elements
  const importFileTab = document.getElementById('import-file-tab');
  const importUrlTab = document.getElementById('import-url-tab');
  const importFileContent = document.getElementById('import-file-content');
  const importUrlContent = document.getElementById('import-url-content');
  
  // URL elements
  const recipeUrl = document.getElementById('recipe-url') as HTMLInputElement;
  const urlPreview = document.getElementById('url-preview');
  const detectedSite = document.getElementById('detected-site');
  
  let selectedFile: File | null = null;
  let currentImportType: 'file' | 'url' = 'file';
  let supportedSites: any[] = [];

  // Load supported sites
  loadSupportedSites();

  importBtn?.addEventListener('click', () => {
    importModal?.classList.remove('hidden');
    setImportType('file');
  });

  cancelImport?.addEventListener('click', () => {
    importModal?.classList.add('hidden');
    resetImportModal();
  });

  // Tab switching
  importFileTab?.addEventListener('click', () => setImportType('file'));
  importUrlTab?.addEventListener('click', () => setImportType('url'));

  // File upload
  fileUpload?.addEventListener('change', (e) => {
    const target = e.target as HTMLInputElement;
    if (target.files && target.files[0]) {
      selectedFile = target.files[0];
      updateImportButton();
      updateFileDisplay();
    }
  });

  // URL input
  recipeUrl?.addEventListener('input', async (e) => {
    const target = e.target as HTMLInputElement;
    const url = target.value.trim();
    
    if (url) {
      await updateUrlPreview(url);
      updateImportButton();
    } else {
      hideUrlPreview();
      updateImportButton();
    }
  });

  confirmImport?.addEventListener('click', async () => {
    if (currentImportType === 'file') {
      await handleFileImport();
    } else {
      await handleUrlImport();
    }
  });

  function setImportType(type: 'file' | 'url') {
    currentImportType = type;
    
    if (type === 'file') {
      // Activate file tab
      importFileTab?.classList.add('text-gray-900', 'dark:text-white', 'bg-white', 'dark:bg-gray-800');
      importFileTab?.classList.remove('text-gray-500', 'dark:text-gray-400', 'bg-gray-50', 'dark:bg-gray-700');
      
      // Deactivate URL tab
      importUrlTab?.classList.add('text-gray-500', 'dark:text-gray-400', 'bg-gray-50', 'dark:bg-gray-700');
      importUrlTab?.classList.remove('text-gray-900', 'dark:text-white', 'bg-white', 'dark:bg-gray-800');
      
      importFileContent?.classList.remove('hidden');
      importUrlContent?.classList.add('hidden');
    } else {
      // Activate URL tab
      importUrlTab?.classList.add('text-gray-900', 'dark:text-white', 'bg-white', 'dark:bg-gray-800');
      importUrlTab?.classList.remove('text-gray-500', 'dark:text-gray-400', 'bg-gray-50', 'dark:bg-gray-700');
      
      // Deactivate file tab
      importFileTab?.classList.add('text-gray-500', 'dark:text-gray-400', 'bg-gray-50', 'dark:bg-gray-700');
      importFileTab?.classList.remove('text-gray-900', 'dark:text-white', 'bg-white', 'dark:bg-gray-800');
      
      importUrlContent?.classList.remove('hidden');
      importFileContent?.classList.add('hidden');
    }
    
    updateImportButton();
  }

  async function loadSupportedSites() {
    try {
      const response = await fetch('/api/recipe-import-url');
      if (response.ok) {
        const data = await response.json();
        supportedSites = data.supportedSites || [];
      }
    } catch (error) {
      console.error('Failed to load supported sites:', error);
    }
  }

  async function updateUrlPreview(url: string) {
    try {
      new URL(url); // Validate URL format first
      
      // Get extractor preview information
      const response = await fetch('/api/recipe-import-preview', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ url })
      });
      
      if (response.ok) {
        const data = await response.json();
        
        // Update extractor name
        if (detectedSite) {
          detectedSite.textContent = data.extractorName;
        }
        
        // Update capabilities
        updateCapabilityIndicator('ingredient-groups-support', data.capabilities.supportsIngredientGroups);
        updateCapabilityIndicator('preparation-groups-support', data.capabilities.supportsPreparationGroups);
        updateCapabilityIndicator('images-support', data.capabilities.supportsImages);
        updateCapabilityIndicator('nutrition-support', data.capabilities.supportsNutrition);
        updateCapabilityIndicator('metadata-support', data.capabilities.supportsMetadata);
        updateCapabilityIndicator('keywords-support', data.capabilities.supportsKeywordExtraction);
        updateCapabilityIndicator('category-support', data.capabilities.supportsCategoryExtraction);
        updateCapabilityIndicator('difficulty-support', data.capabilities.supportsDifficultyExtraction);
        updateCapabilityIndicator('time-support', data.capabilities.supportsTimeExtraction);
        
        // Update description
        const descriptionElement = document.getElementById('extractor-description');
        if (descriptionElement) {
          descriptionElement.textContent = data.capabilities.description;
        }
        
        urlPreview?.classList.remove('hidden');
      } else {
        // Fallback to simple domain detection
        const urlObj = new URL(url);
        const domain = urlObj.hostname.toLowerCase();
        
        const matchingSite = supportedSites.find(site => 
          site.domains.some((d: string) => 
            domain === d || domain.endsWith(`.${d}`) || domain.includes(d)
          )
        );
        
        if (detectedSite) {
          detectedSite.textContent = matchingSite ? matchingSite.name : 'Allgemeine Website (JSON-LD Fallback)';
        }
        
        // Set default capabilities for fallback
        updateCapabilityIndicator('ingredient-groups-support', false);
        updateCapabilityIndicator('preparation-groups-support', false);
        updateCapabilityIndicator('images-support', true);
        updateCapabilityIndicator('nutrition-support', false);
        updateCapabilityIndicator('metadata-support', true);
        updateCapabilityIndicator('keywords-support', true);
        updateCapabilityIndicator('category-support', true);
        updateCapabilityIndicator('difficulty-support', false);
        updateCapabilityIndicator('time-support', false);
        
        const descriptionElement = document.getElementById('extractor-description');
        if (descriptionElement) {
          descriptionElement.textContent = 'Basis-Funktionalität verfügbar';
        }
        
        urlPreview?.classList.remove('hidden');
      }
    } catch {
      hideUrlPreview();
    }
  }
  
  function updateCapabilityIndicator(elementId: string, isSupported: boolean | 'experimental') {
    const element = document.getElementById(elementId);
    if (element) {
      if (isSupported === 'experimental') {
        element.className = 'w-3 h-3 rounded-full bg-yellow-500';
      } else {
        element.className = `w-3 h-3 rounded-full ${
          isSupported 
            ? 'bg-green-500' 
            : 'bg-gray-400'
        }`;
      }
    }
  }

  function hideUrlPreview() {
    urlPreview?.classList.add('hidden');
  }

  async function handleUrlImport() {
    const url = recipeUrl?.value.trim();
    if (!url) return;

    // Show loading state
    if (confirmImport) {
      (confirmImport as HTMLButtonElement).disabled = true;
      (confirmImport as HTMLButtonElement).textContent = 'Importiere...';
    }

    try {
      const response = await fetch('/api/recipe-import-url', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ url })
      });

      const result = await response.json();
      console.log('Import result:', result); // Debug log

      if (response.ok) {
        // Hide import modal
        importModal?.classList.add('hidden');
        
        // Show success message
        if (window.showSuccess) {
          await window.showSuccess(`Erfolgreich Rezept "${result.recipe.title}" importiert mit ${result.extractorUsed}!`);
        }

        // Show warnings if any and redirect after confirmation
        if (result.warnings && result.warnings.length > 0) {
          console.log('Warnings found:', result.warnings); // Debug log
          console.log('showWarnings function exists:', !!window.showWarnings); // Debug log
          
          if (window.showWarnings) {
            console.log('Showing warnings modal...'); // Debug log
            window.showWarnings(result.warnings, () => {
              console.log('Warning modal confirmed, redirecting...'); // Debug log
              if (result.recipeId) {
                window.location.href = `/rezept/${result.recipeId}`;
              } else {
                window.location.reload();
              }
            });
          } else {
            console.warn('showWarnings function not found!'); // Debug log
            // Fallback: redirect immediately if showWarnings is not available
            if (result.recipeId) {
              window.location.href = `/rezept/${result.recipeId}`;
            } else {
              window.location.reload();
            }
          }
        } else {
          console.log('No warnings, redirecting immediately...'); // Debug log
          // No warnings, redirect immediately
          if (result.recipeId) {
            window.location.href = `/rezept/${result.recipeId}`;
          } else {
            window.location.reload();
          }
        }
      } else {
        console.error('Import failed:', result.error); // Debug log
        if (window.showError) {
          window.showError(`Import fehlgeschlagen: ${result.error}`);
        } else {
          alert(`Import fehlgeschlagen: ${result.error}`);
        }
      }
    } catch (error) {
      console.error('Import error:', error); // Debug log
      if (window.showError) {
        window.showError(`Import fehlgeschlagen: ${error}`);
      } else {
        alert(`Import fehlgeschlagen: ${error}`);
      }
    }

    // Reset loading state
    if (confirmImport) {
      (confirmImport as HTMLButtonElement).disabled = false;
      (confirmImport as HTMLButtonElement).textContent = 'Importieren';
    }

    resetImportModal();
  }

  async function handleFileImport() {
    if (!selectedFile) return;

    try {
      const formData = new FormData();
      formData.append('file', selectedFile);

      const response = await fetch('/api/recipe-import', {
        method: 'POST',
        body: formData
      });

      const result = await response.json();

      if (response.ok) {
        const imageInfo = result.totalImages ? ` (mit ${result.totalImages} Bild(ern))` : '';
        
        if (result.imported === 1 && result.recipeId) {
          // Single recipe imported - redirect to recipe page
          if (window.showSuccess) {
            await window.showSuccess(`Erfolgreich Rezept importiert${imageInfo}!`);
          }
          window.location.href = `/rezept/${result.recipeId}`;
        } else {
          // Multiple recipes imported - stay on recipe list
          if (window.showSuccess) {
            await window.showSuccess(`Erfolgreich ${result.imported} Rezept(e) importiert${imageInfo}!`);
          }
          window.location.reload();
        }
      } else {
        if (window.showError) {
          window.showError(`Import fehlgeschlagen: ${result.error}`);
        } else {
          alert(`Import fehlgeschlagen: ${result.error}`);
        }
      }
    } catch (error) {
      if (window.showError) {
        window.showError(`Import fehlgeschlagen: ${error}`);
      } else {
        alert(`Import fehlgeschlagen: ${error}`);
      }
    }

    // Reset loading state
    if (confirmImport) {
      (confirmImport as HTMLButtonElement).disabled = false;
      (confirmImport as HTMLButtonElement).textContent = 'Importieren';
    }

    resetImportModal();
  }

  function resetImportModal() {
    // Reset file upload
    selectedFile = null;
    if (fileUpload) {
      (fileUpload as HTMLInputElement).value = '';
    }
    
    // Reset URL input
    if (recipeUrl) {
      recipeUrl.value = '';
    }
    hideUrlPreview();
    
    // Reset import button
    updateImportButton();
    
    // Reset to file tab
    setImportType('file');
    
    // Hide modals
    importModal?.classList.add('hidden');
    document.getElementById('warning-modal')?.classList.add('hidden');
  }

  function updateImportButton() {
    if (!confirmImport) return;
    
    const button = confirmImport as HTMLButtonElement;
    if (currentImportType === 'file') {
      button.disabled = !selectedFile;
    } else {
      button.disabled = !recipeUrl?.value.trim();
    }
  }

  function updateFileDisplay() {
    const dropText = document.querySelector('#import-file-content .text-sm');
    if (dropText && selectedFile) {
      dropText.textContent = selectedFile.name;
    }
  }

  // Export functionality
  const exportBtn = document.getElementById('export-btn');
  const exportMenu = document.getElementById('export-menu');
  const exportJsonBtn = document.getElementById('export-json');
  const exportRcbBtn = document.getElementById('export-rcb');

  // Toggle export dropdown
  exportBtn?.addEventListener('click', (e) => {
    e.stopPropagation();
    exportMenu?.classList.toggle('hidden');
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', () => {
    exportMenu?.classList.add('hidden');
  });

  // Export handlers
  exportJsonBtn?.addEventListener('click', () => {
    window.location.href = '/api/recipe-export?format=json';
    exportMenu?.classList.add('hidden');
  });

  exportRcbBtn?.addEventListener('click', () => {
    window.location.href = '/api/recipe-export?format=rcb';
    exportMenu?.classList.add('hidden');
  });
</script>
---
interface Props {
  listCount: number;
}

const { listCount } = Astro.props;
---

<div class="flex-between">
  <div>
    <h1 class="heading-primary mb-2">Einkaufslisten</h1>
    <p class="text-muted">
      {listCount === 0 
        ? 'Noch keine Einkaufslisten vorhanden' 
        : `${listCount} ${listCount === 1 ? 'Liste' : 'Listen'} verfügbar`
      }
    </p>
  </div>
  
  <div class="flex flex-col sm:flex-row gap-3">
    <!-- Selection Mode Buttons -->
    <div id="selection-buttons" class="hidden sm:flex-row flex-col w-full sm:w-auto gap-3">
      <button id="delete-selected-btn" class="btn btn-danger flex items-center space-x-2 w-full sm:w-auto justify-center" disabled>
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
        </svg>
        <span>Ausgewählte löschen</span>
      </button>
      <button id="cancel-selection-btn" class="btn btn-secondary w-full sm:w-auto justify-center">
        Abbrechen
      </button>
    </div>

    <!-- Normal Mode Buttons -->
    <div id="normal-buttons" class="flex flex-col sm:flex-row gap-3">
      <button id="select-lists-btn" class="btn btn-secondary flex items-center space-x-2 w-full sm:w-auto justify-center">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
        </svg>
        <span>Auswählen</span>
      </button>
      <button id="quick-add-list-btn" class="btn btn-success flex items-center space-x-2 w-full sm:w-auto justify-center">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        <span>Schnell hinzufügen</span>
      </button>
      <button id="create-shopping-list-btn" class="btn btn-success flex items-center space-x-2 w-full sm:w-auto justify-center">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
        </svg>
        <span>Neue Liste</span>
      </button>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const createBtn = document.getElementById('create-shopping-list-btn');
  const quickAddBtn = document.getElementById('quick-add-list-btn');
  const modal = document.getElementById('create-shopping-list-modal');

  // Selection mode elements
  const selectButton = document.getElementById('select-lists-btn');
  const cancelButton = document.getElementById('cancel-selection-btn');
  const deleteSelectedButton = document.getElementById('delete-selected-btn') as HTMLButtonElement;
  const normalButtons = document.getElementById('normal-buttons');
  const selectionButtons = document.getElementById('selection-buttons');
  
  let isSelectionMode = false;
  let selectedLists = new Set<string>();

  // Open modal when clicking "Neue Liste" button
  createBtn?.addEventListener('click', () => {
    modal?.classList.remove('hidden');
    document.getElementById('shopping-list-title')?.focus();
  });

  // Quick add functionality - create a list with current date as title
  quickAddBtn?.addEventListener('click', async () => {
    try {
      const currentDate = new Date().toLocaleDateString('de-DE');
      const response = await fetch('/api/shopping-lists', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: `Einkaufsliste vom ${currentDate}`,
          description: ''
        }),
      });

      if (response.ok) {
        const newList = await response.json();
        // Show success message
        window.showSuccess('Einkaufsliste erfolgreich erstellt');
        // Redirect to the new list
        window.location.href = `/einkaufsliste/${newList.id}`;
      } else {
        const error = await response.json();
        window.showError(error.error || 'Fehler beim Erstellen der Einkaufsliste');
      }
    } catch (error) {
      console.error('Error creating shopping list:', error);
      window.showError('Fehler beim Erstellen der Einkaufsliste');
    }
  });

  // Toggle selection mode
  function toggleSelectionMode(enable: boolean) {
    isSelectionMode = enable;
    document.body.classList.toggle('selection-mode', enable);
    normalButtons?.classList.toggle('hidden', enable);
    selectionButtons?.classList.toggle('hidden', !enable);
    
    // Reset selection when disabling
    if (!enable) {
      selectedLists.clear();
      document.querySelectorAll('.shopping-list-checkbox').forEach((checkbox) => {
        (checkbox as HTMLInputElement).checked = false;
      });
      document.querySelectorAll('.shopping-list-card').forEach(card => {
        card.classList.remove('selected');
      });
      updateDeleteButton();
    }
  }

  // Update delete button state
  function updateDeleteButton() {
    if (deleteSelectedButton) {
      deleteSelectedButton.disabled = selectedLists.size === 0;
    }
  }

  // Handle selection mode toggle
  selectButton?.addEventListener('click', () => toggleSelectionMode(true));
  cancelButton?.addEventListener('click', () => toggleSelectionMode(false));

  // Handle bulk delete
  deleteSelectedButton?.addEventListener('click', async () => {
    if (selectedLists.size === 0) return;

    const confirmed = await (window as any).showDeleteConfirm(
      `Möchten Sie ${selectedLists.size} ausgewählte ${selectedLists.size === 1 ? 'Liste' : 'Listen'} wirklich löschen?`
    );

    if (confirmed) {
      const deletePromises = Array.from(selectedLists).map(async (listId) => {
        try {
          const response = await fetch(`/api/shopping-lists?id=${listId}`, {
            method: 'DELETE'
          });
          return response.ok;
        } catch (error) {
          console.error('Error deleting shopping list:', error);
          return false;
        }
      });

      const results = await Promise.all(deletePromises);
      const successCount = results.filter(result => result).length;
      const failCount = selectedLists.size - successCount;

      if (failCount === 0) {
        (window as any).showInfo(`${successCount} ${successCount === 1 ? 'Liste wurde' : 'Listen wurden'} erfolgreich gelöscht`);
      } else {
        (window as any).showWarning(`${failCount} ${failCount === 1 ? 'Liste konnte' : 'Listen konnten'} nicht gelöscht werden`);
      }

      toggleSelectionMode(false);
    }
  });

  // Handle list selection events
  document.addEventListener('shoppingListSelected', ((event: CustomEvent) => {
    const { listId, selected } = event.detail;
    if (selected) {
      selectedLists.add(listId);
    } else {
      selectedLists.delete(listId);
    }
    updateDeleteButton();
  }) as EventListener);
});
</script>

<style>
  /* Selection mode styles */
  :global(body.selection-mode) :global(.shopping-list-checkbox) {
    display: block !important;
  }

  :global(body.selection-mode) :global(.shopping-list-card.selected) {
    @apply ring-2 ring-primary-500;
  }

  @media (max-width: 640px) {
    :global(body.selection-mode) :global(.card-actions) {
      display: none;
    }
  }
</style> 
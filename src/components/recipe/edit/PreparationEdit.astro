---
import type { Recipe, PreparationStep } from '../../../types/recipe';

interface Props {
  recipe: Recipe;
}

const { recipe } = Astro.props;
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-200">
  <div class="flex justify-between items-center mb-4">
    <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Zubereitung bearbeiten</h2>
    <div class="flex space-x-2">
      <button 
        type="button" 
        id="add-preparation-group-btn"
        class="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded transition-colors"
      >
        + Gruppe hinzufügen
      </button>
      <button 
        type="button" 
        id="add-step-btn"
        class="px-3 py-1 text-sm bg-green-500 hover:bg-green-600 text-white rounded transition-colors"
      >
        + Schritt hinzufügen
      </button>
    </div>
  </div>
  
  <div id="preparation-edit-container" class="space-y-6">
    <!-- Default ungrouped steps section -->
    <div class="preparation-group-edit default-group border border-gray-300 dark:border-gray-600 rounded-lg p-4 bg-gray-50 dark:bg-gray-700/50 transition-colors duration-200" data-is-default="true">
      <div class="flex justify-between items-center mb-3">
        <div class="flex-1 px-3 py-2 text-lg font-medium text-gray-600 dark:text-gray-300">
          Zubereitungsschritte (ungruppiert)
        </div>
      </div>
      
      <div class="steps-list space-y-4 min-h-[60px] relative">
        {recipe.preparationGroups.map((group) => 
          !group.title ? group.steps.map((step, stepIndex) => (
            'text' in step ? (
              <div class="step-edit-item border border-gray-200 dark:border-gray-600 rounded-md p-4 bg-white dark:bg-gray-800 transition-colors duration-200" draggable="true" data-step-id={(step as PreparationStep).id}>
                <div class="flex items-start space-x-3">
                  <div class="flex items-center space-x-2">
                    <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-400">
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                      </svg>
                    </div>
                    <div class="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                      {stepIndex + 1}
                    </div>
                  </div>
                  <div class="flex-1 space-y-3">
                    <textarea 
                      rows="3"
                      placeholder="Zubereitungsschritt..."
                      class="step-text-input w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                    >{(step as PreparationStep).text}</textarea>
                    
                    <!-- Intermediate Ingredients Section -->
                    <div class="intermediate-ingredients-section border-t border-gray-200 dark:border-gray-600 pt-3">
                      <div class="flex justify-between items-center mb-2">
                        <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Zwischenzutaten</h4>
                        <button 
                          type="button" 
                          class="add-intermediate-ingredient-btn px-2 py-1 text-xs bg-teal-500 hover:bg-teal-600 text-white rounded transition-colors"
                          title="Zwischenzutat hinzufügen"
                        >
                          + Zwischenzutat
                        </button>
                      </div>
                      <div class="intermediate-ingredients-list space-y-2">
                        {(step as PreparationStep).intermediateIngredients?.map((intermediate) => (
                          <div class="intermediate-ingredient-item flex items-center space-x-2 p-2 bg-teal-50 dark:bg-teal-900/20 rounded border" data-intermediate-id={intermediate.id}>
                            <input 
                              type="text" 
                              value={intermediate.name}
                              placeholder="Name der Zwischenzutat"
                              class="intermediate-name-input flex-1 px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-teal-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                            />
                            <input 
                              type="text" 
                              value={intermediate.description || ''}
                              placeholder="Beschreibung (optional)"
                              class="intermediate-description-input flex-1 px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-teal-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                            />
                            <button 
                              type="button" 
                              class="remove-intermediate-btn text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 transition-colors"
                            >
                              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                              </svg>
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    <!-- Linked Ingredients Display -->
                    <div class="linked-ingredients-display">
                      {(step as PreparationStep).linkedIngredients?.length > 0 && (
                        <div class="flex flex-wrap gap-2 mb-2">
                          {(step as PreparationStep).linkedIngredients.map((link) => {
                            if (link.isIntermediate) {
                              // Find intermediate ingredient from previous steps
                              const allSteps = recipe.preparationGroups.flatMap(g => g.steps.filter(s => 'text' in s));
                              let intermediateIngredient = null;
                              for (const s of allSteps) {
                                if (s.intermediateIngredients) {
                                  intermediateIngredient = s.intermediateIngredients.find(int => int.id === link.ingredientId);
                                  if (intermediateIngredient) break;
                                }
                              }
                              if (!intermediateIngredient) return null;
                              return (
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200">
                                  {intermediateIngredient.name} (Zwischenzutat)
                                </span>
                              );
                            } else {
                              // Regular ingredient
                              const allIngredients = recipe.ingredientGroups.flatMap(group => 
                                group.ingredients.filter(item => 'id' in item && 'name' in item)
                              );
                              const ingredient = allIngredients.find(ing => ing.id === link.ingredientId);
                              if (!ingredient || !('name' in ingredient)) return null;
                              const quantity = ingredient.quantities[link.selectedQuantityIndex];
                              return (
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                                  {ingredient.name} ({quantity.amount} {quantity.unit})
                                </span>
                              );
                            }
                          })}
                        </div>
                      )}
                    </div>
                    
                    <!-- Ingredient Linking Buttons -->
                    <div class="flex justify-between items-center">
                      <div class="flex space-x-2">
                        <button 
                          type="button" 
                          class="auto-link-btn px-3 py-1 text-xs bg-purple-500 hover:bg-purple-600 text-white rounded transition-colors flex items-center space-x-1"
                          title="Zutaten automatisch verlinken"
                        >
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"/>
                          </svg>
                          <span>Auto-Link</span>
                        </button>
                        <button 
                          type="button" 
                          class="manual-link-btn px-3 py-1 text-xs bg-indigo-500 hover:bg-indigo-600 text-white rounded transition-colors flex items-center space-x-1"
                          title="Zutaten manuell verlinken"
                        >
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
                          </svg>
                          <span>Manual-Link</span>
                        </button>
                      </div>
                      <button 
                        type="button" 
                        class="remove-step-btn px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ) : null
          )) : null
        )}
      </div>
      
      <button 
        type="button" 
        class="add-step-to-group-btn mt-3 px-3 py-1 text-sm bg-gray-500 hover:bg-gray-600 dark:bg-gray-600 dark:hover:bg-gray-500 text-white rounded transition-colors"
      >
        + Schritt zu ungruppiert hinzufügen
      </button>
    </div>

    <!-- Named preparation groups -->
    {recipe.preparationGroups.map((group, groupIndex) => 
      group.title ? (
        <div class="preparation-group-edit border border-gray-300 dark:border-gray-600 rounded-lg p-4 bg-gray-50 dark:bg-gray-700/50 transition-colors duration-200">
          <div class="flex justify-between items-center mb-3">
            <input 
              type="text" 
              value={group.title || ''}
              placeholder="Gruppenname (optional)"
              class="group-title-input flex-1 px-3 py-2 text-lg font-medium border-b border-gray-300 dark:border-gray-600 focus:outline-none focus:border-green-500 bg-transparent text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
            />
            <button 
              type="button" 
              class="remove-prep-group-btn ml-3 px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
              </svg>
            </button>
          </div>
          
          <div class="steps-list space-y-4 min-h-[60px] relative">
            {group.steps.map((step, stepIndex) => (
              'text' in step ? (
                <div class="step-edit-item border border-gray-200 dark:border-gray-600 rounded-md p-4 bg-white dark:bg-gray-800 transition-colors duration-200" draggable="true" data-step-id={(step as PreparationStep).id}>
                  <div class="flex items-start space-x-3">
                    <div class="flex items-center space-x-2">
                      <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-400">
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                        </svg>
                      </div>
                      <div class="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                        {stepIndex + 1}
                      </div>
                    </div>
                    <div class="flex-1 space-y-3">
                      <textarea 
                        rows="3"
                        placeholder="Zubereitungsschritt..."
                        class="step-text-input w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                      >{(step as PreparationStep).text}</textarea>
                      
                      <!-- Intermediate Ingredients Section -->
                      <div class="intermediate-ingredients-section border-t border-gray-200 dark:border-gray-600 pt-3">
                        <div class="flex justify-between items-center mb-2">
                          <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Zwischenzutaten</h4>
                          <button 
                            type="button" 
                            class="add-intermediate-ingredient-btn px-2 py-1 text-xs bg-teal-500 hover:bg-teal-600 text-white rounded transition-colors"
                            title="Zwischenzutat hinzufügen"
                          >
                            + Zwischenzutat
                          </button>
                        </div>
                        <div class="intermediate-ingredients-list space-y-2">
                          {(step as PreparationStep).intermediateIngredients?.map((intermediate) => (
                            <div class="intermediate-ingredient-item flex items-center space-x-2 p-2 bg-teal-50 dark:bg-teal-900/20 rounded border" data-intermediate-id={intermediate.id}>
                              <input 
                                type="text" 
                                value={intermediate.name}
                                placeholder="Name der Zwischenzutat"
                                class="intermediate-name-input flex-1 px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-teal-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                              />
                              <input 
                                type="text" 
                                value={intermediate.description || ''}
                                placeholder="Beschreibung (optional)"
                                class="intermediate-description-input flex-1 px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-teal-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                              />
                              <button 
                                type="button" 
                                class="remove-intermediate-btn text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 transition-colors"
                              >
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                </svg>
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>
                      
                      <!-- Linked Ingredients Display -->
                      <div class="linked-ingredients-display">
                        {(step as PreparationStep).linkedIngredients?.length > 0 && (
                          <div class="flex flex-wrap gap-2 mb-2">
                            {(step as PreparationStep).linkedIngredients.map((link) => {
                              if (link.isIntermediate) {
                                // Find intermediate ingredient from previous steps
                                const allSteps = recipe.preparationGroups.flatMap(g => g.steps.filter(s => 'text' in s));
                                let intermediateIngredient = null;
                                for (const s of allSteps) {
                                  if (s.intermediateIngredients) {
                                    intermediateIngredient = s.intermediateIngredients.find(int => int.id === link.ingredientId);
                                    if (intermediateIngredient) break;
                                  }
                                }
                                if (!intermediateIngredient) return null;
                                return (
                                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200">
                                    {intermediateIngredient.name} (Zwischenzutat)
                                  </span>
                                );
                              } else {
                                // Regular ingredient
                                const allIngredients = recipe.ingredientGroups.flatMap(group => 
                                  group.ingredients.filter(item => 'id' in item && 'name' in item)
                                );
                                const ingredient = allIngredients.find(ing => ing.id === link.ingredientId);
                                if (!ingredient || !('name' in ingredient)) return null;
                                const quantity = ingredient.quantities[link.selectedQuantityIndex];
                                return (
                                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                                    {ingredient.name} ({quantity.amount} {quantity.unit})
                                  </span>
                                );
                              }
                            })}
                          </div>
                        )}
                      </div>
                      
                      <!-- Ingredient Linking Buttons -->
                      <div class="flex justify-between items-center">
                        <div class="flex space-x-2">
                          <button 
                            type="button" 
                            class="auto-link-btn px-3 py-1 text-xs bg-purple-500 hover:bg-purple-600 text-white rounded transition-colors flex items-center space-x-1"
                            title="Zutaten automatisch verlinken"
                          >
                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"/>
                            </svg>
                            <span>Auto-Link</span>
                          </button>
                          <button 
                            type="button" 
                            class="manual-link-btn px-3 py-1 text-xs bg-indigo-500 hover:bg-indigo-600 text-white rounded transition-colors flex items-center space-x-1"
                            title="Zutaten manuell verlinken"
                          >
                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
                            </svg>
                            <span>Manual-Link</span>
                          </button>
                        </div>
                        <button 
                          type="button" 
                          class="remove-step-btn px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null
            ))}
          </div>
          
          <button 
            type="button" 
            class="add-step-to-group-btn mt-3 px-3 py-1 text-sm bg-gray-500 hover:bg-gray-600 text-white rounded transition-colors"
          >
            + Schritt zu dieser Gruppe hinzufügen
          </button>
        </div>
      ) : null
    )}
  </div>
</div>

 
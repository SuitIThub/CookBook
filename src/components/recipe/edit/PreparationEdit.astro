---
import type { Recipe, PreparationStep } from '../../../types/recipe';

interface Props {
  recipe: Recipe;
}

const { recipe } = Astro.props;
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4 sm:p-6 transition-colors duration-200">
  <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 space-y-2 sm:space-y-0">
    <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Zubereitung bearbeiten</h2>
    <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
      <button 
        type="button" 
        id="add-preparation-group-btn"
        class="px-3 py-2 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded transition-colors"
      >
        + Gruppe hinzufügen
      </button>
      <button 
        type="button" 
        id="add-step-btn"
        class="px-3 py-2 text-sm bg-green-500 hover:bg-green-600 text-white rounded transition-colors"
      >
        + Schritt hinzufügen
      </button>
    </div>
  </div>
  
  <div id="preparation-edit-container" class="space-y-6">
    <!-- Default ungrouped steps section -->
    <div class="preparation-group-edit default-group border border-gray-300 dark:border-gray-600 rounded-lg p-3 sm:p-4 bg-gray-50 dark:bg-gray-700/50 transition-colors duration-200" data-is-default="true">
      <div class="flex justify-between items-center mb-3">
        <div class="flex-1 px-3 py-2 text-base sm:text-lg font-medium text-gray-600 dark:text-gray-300">
          Zubereitungsschritte (ungruppiert)
        </div>
      </div>
      
      <div class="steps-list space-y-4 min-h-[60px] relative">
        {recipe.preparationGroups.map((group) => 
          !group.title ? group.steps.map((step, stepIndex) => (
            'text' in step ? (
              <div class="step-edit-item border border-gray-200 dark:border-gray-600 rounded-md p-3 sm:p-4 bg-white dark:bg-gray-800 transition-colors duration-200" draggable="true" data-step-id={(step as PreparationStep).id}>
                <div class="flex flex-col sm:flex-row sm:items-start space-y-3 sm:space-y-0 sm:space-x-3">
                  <div class="flex items-center space-x-2 sm:flex-col sm:space-x-0 sm:space-y-2">
                    <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-400">
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                      </svg>
                    </div>
                    <div class="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                      {stepIndex + 1}
                    </div>
                  </div>
                  <div class="flex-1 space-y-3">
                    <textarea 
                      rows="3"
                      placeholder="Zubereitungsschritt..."
                      class="step-text-input w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                    >{(step as PreparationStep).text}</textarea>
                    
                    <!-- Intermediate Ingredients Section -->
                    <div class="intermediate-ingredients-section border-t border-gray-200 dark:border-gray-600 pt-3">
                      <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-2 space-y-2 sm:space-y-0">
                        <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Zwischenzutaten</h4>
                        <button 
                          type="button" 
                          class="add-intermediate-ingredient-btn px-2 py-1 text-xs bg-teal-500 hover:bg-teal-600 text-white rounded transition-colors self-start sm:self-auto"
                          title="Zwischenzutat hinzufügen"
                        >
                          + Zwischenzutat
                        </button>
                      </div>
                      <div class="intermediate-ingredients-list space-y-2">
                        {(step as PreparationStep).intermediateIngredients?.map((intermediate) => (
                          <div class="intermediate-ingredient-item flex flex-col space-y-3 p-3 bg-teal-50 dark:bg-teal-900/20 rounded border" data-intermediate-id={intermediate.id}>
                            <!-- Name field - full width on mobile -->
                            <input 
                              type="text" 
                              value={intermediate.name}
                              placeholder="Name der Zwischenzutat"
                              class="intermediate-name-input w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                            />
                            <!-- Description field and delete button -->
                            <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                              <input 
                                type="text" 
                                value={intermediate.description || ''}
                                placeholder="Beschreibung (optional)"
                                class="intermediate-description-input flex-1 px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                              />
                              <button 
                                type="button" 
                                class="remove-intermediate-btn text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 transition-colors px-3 py-2 rounded-md hover:bg-red-50 dark:hover:bg-red-900/20 self-start sm:self-auto"
                              >
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                </svg>
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    <!-- Linked Ingredients Display -->
                    <div class="linked-ingredients-display">
                      {(step as PreparationStep).linkedIngredients?.length > 0 && (
                        <div class="flex flex-wrap gap-1 sm:gap-2 mb-2">
                          {(step as PreparationStep).linkedIngredients.map((link) => {
                            if (link.isIntermediate) {
                              // Find intermediate ingredient from previous steps
                              const allSteps = recipe.preparationGroups.flatMap(g => g.steps.filter(s => 'text' in s));
                              let intermediateIngredient = null;
                              for (const s of allSteps) {
                                if (s.intermediateIngredients) {
                                  intermediateIngredient = s.intermediateIngredients.find(int => int.id === link.ingredientId);
                                  if (intermediateIngredient) break;
                                }
                              }
                              if (!intermediateIngredient) return null;
                              return (
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200 break-words">
                                  {intermediateIngredient.name} (Zwischenzutat)
                                </span>
                              );
                            } else {
                              // Regular ingredient
                              const allIngredients = recipe.ingredientGroups.flatMap(group => 
                                group.ingredients.filter(item => 'id' in item && 'name' in item)
                              );
                              const ingredient = allIngredients.find(ing => ing.id === link.ingredientId);
                              if (!ingredient || !('name' in ingredient)) return null;
                              const quantity = ingredient.quantities[link.selectedQuantityIndex];
                              return (
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 break-words">
                                  {ingredient.name} ({quantity.amount} {quantity.unit})
                                </span>
                              );
                            }
                          })}
                        </div>
                      )}
                    </div>
                    
                    <!-- Ingredient Linking Buttons -->
                    <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-2 sm:space-y-0">
                      <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                        <button 
                          type="button" 
                          class="auto-link-btn px-3 py-1 text-xs bg-purple-500 hover:bg-purple-600 text-white rounded transition-colors flex items-center justify-center space-x-1"
                          title="Zutaten automatisch verlinken"
                        >
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"/>
                          </svg>
                          <span>Auto-Link</span>
                        </button>
                        <button 
                          type="button" 
                          class="manual-link-btn px-3 py-1 text-xs bg-indigo-500 hover:bg-indigo-600 text-white rounded transition-colors flex items-center justify-center space-x-1"
                          title="Zutaten manuell verlinken"
                        >
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
                          </svg>
                          <span>Manual-Link</span>
                        </button>
                      </div>
                      <button 
                        type="button" 
                        class="remove-step-btn px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors self-end sm:self-auto"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ) : null
          )) : null
        )}
      </div>
      
      <button 
        type="button" 
        class="add-step-to-group-btn mt-3 px-3 py-2 text-sm bg-gray-500 hover:bg-gray-600 dark:bg-gray-600 dark:hover:bg-gray-500 text-white rounded transition-colors w-full sm:w-auto"
      >
        + Schritt zu ungruppiert hinzufügen
      </button>
    </div>

    <!-- Named preparation groups -->
    {recipe.preparationGroups.map((group, groupIndex) => 
      group.title ? (
        <div class="preparation-group-edit border border-gray-300 dark:border-gray-600 rounded-lg p-3 sm:p-4 bg-gray-50 dark:bg-gray-700/50 transition-colors duration-200">
          <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-3 space-y-2 sm:space-y-0">
            <input 
              type="text" 
              value={group.title || ''}
              placeholder="Gruppenname (optional)"
              class="group-title-input flex-1 px-3 py-2 text-base sm:text-lg font-medium border-b border-gray-300 dark:border-gray-600 focus:outline-none focus:border-green-500 bg-transparent text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
            />
            <button 
              type="button" 
              class="remove-prep-group-btn ml-0 sm:ml-3 px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors self-end"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
              </svg>
            </button>
          </div>
          
          <div class="steps-list space-y-4 min-h-[60px] relative">
            {group.steps.map((step, stepIndex) => (
              'text' in step ? (
                <div class="step-edit-item border border-gray-200 dark:border-gray-600 rounded-md p-3 sm:p-4 bg-white dark:bg-gray-800 transition-colors duration-200" draggable="true" data-step-id={(step as PreparationStep).id}>
                  <div class="flex flex-col sm:flex-row sm:items-start space-y-3 sm:space-y-0 sm:space-x-3">
                    <div class="flex items-center space-x-2 sm:flex-col sm:space-x-0 sm:space-y-2">
                      <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-400">
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                        </svg>
                      </div>
                      <div class="flex-shrink-0 w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                        {stepIndex + 1}
                      </div>
                    </div>
                    <div class="flex-1 space-y-3">
                      <textarea 
                        rows="3"
                        placeholder="Zubereitungsschritt..."
                        class="step-text-input w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                      >{(step as PreparationStep).text}</textarea>
                      
                      <!-- Intermediate Ingredients Section -->
                      <div class="intermediate-ingredients-section border-t border-gray-200 dark:border-gray-600 pt-3">
                        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-2 space-y-2 sm:space-y-0">
                          <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Zwischenzutaten</h4>
                          <button 
                            type="button" 
                            class="add-intermediate-ingredient-btn px-2 py-1 text-xs bg-teal-500 hover:bg-teal-600 text-white rounded transition-colors self-start sm:self-auto"
                            title="Zwischenzutat hinzufügen"
                          >
                            + Zwischenzutat
                          </button>
                        </div>
                        <div class="intermediate-ingredients-list space-y-2">
                          {(step as PreparationStep).intermediateIngredients?.map((intermediate) => (
                            <div class="intermediate-ingredient-item flex flex-col space-y-3 p-3 bg-teal-50 dark:bg-teal-900/20 rounded border" data-intermediate-id={intermediate.id}>
                              <!-- Name field - full width on mobile -->
                              <input 
                                type="text" 
                                value={intermediate.name}
                                placeholder="Name der Zwischenzutat"
                                class="intermediate-name-input w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                              />
                              <!-- Description field and delete button -->
                              <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                                <input 
                                  type="text" 
                                  value={intermediate.description || ''}
                                  placeholder="Beschreibung (optional)"
                                  class="intermediate-description-input flex-1 px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                                />
                                <button 
                                  type="button" 
                                  class="remove-intermediate-btn text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 transition-colors px-3 py-2 rounded-md hover:bg-red-50 dark:hover:bg-red-900/20 self-start sm:self-auto"
                                >
                                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                  </svg>
                                </button>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                      
                      <!-- Linked Ingredients Display -->
                      <div class="linked-ingredients-display">
                        {(step as PreparationStep).linkedIngredients?.length > 0 && (
                          <div class="flex flex-wrap gap-1 sm:gap-2 mb-2">
                            {(step as PreparationStep).linkedIngredients.map((link) => {
                              if (link.isIntermediate) {
                                // Find intermediate ingredient from previous steps
                                const allSteps = recipe.preparationGroups.flatMap(g => g.steps.filter(s => 'text' in s));
                                let intermediateIngredient = null;
                                for (const s of allSteps) {
                                  if (s.intermediateIngredients) {
                                    intermediateIngredient = s.intermediateIngredients.find(int => int.id === link.ingredientId);
                                    if (intermediateIngredient) break;
                                  }
                                }
                                if (!intermediateIngredient) return null;
                                return (
                                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200 break-words">
                                    {intermediateIngredient.name} (Zwischenzutat)
                                  </span>
                                );
                              } else {
                                // Regular ingredient
                                const allIngredients = recipe.ingredientGroups.flatMap(group => 
                                  group.ingredients.filter(item => 'id' in item && 'name' in item)
                                );
                                const ingredient = allIngredients.find(ing => ing.id === link.ingredientId);
                                if (!ingredient || !('name' in ingredient)) return null;
                                const quantity = ingredient.quantities[link.selectedQuantityIndex];
                                return (
                                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 break-words">
                                    {ingredient.name} ({quantity.amount} {quantity.unit})
                                  </span>
                                );
                              }
                            })}
                          </div>
                        )}
                      </div>
                      
                      <!-- Ingredient Linking Buttons -->
                      <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-2 sm:space-y-0">
                        <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                          <button 
                            type="button" 
                            class="auto-link-btn px-3 py-1 text-xs bg-purple-500 hover:bg-purple-600 text-white rounded transition-colors flex items-center justify-center space-x-1"
                            title="Zutaten automatisch verlinken"
                          >
                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"/>
                            </svg>
                            <span>Auto-Link</span>
                          </button>
                          <button 
                            type="button" 
                            class="manual-link-btn px-3 py-1 text-xs bg-indigo-500 hover:bg-indigo-600 text-white rounded transition-colors flex items-center justify-center space-x-1"
                            title="Zutaten manuell verlinken"
                          >
                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
                            </svg>
                            <span>Manual-Link</span>
                          </button>
                        </div>
                        <button 
                          type="button" 
                          class="remove-step-btn px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors self-end sm:self-auto"
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null
            ))}
          </div>
          
          <button 
            type="button" 
            class="add-step-to-group-btn mt-3 px-3 py-2 text-sm bg-gray-500 hover:bg-gray-600 dark:bg-gray-600 dark:hover:bg-gray-500 text-white rounded transition-colors w-full sm:w-auto"
          >
            + Schritt zu dieser Gruppe hinzufügen
          </button>
        </div>
      ) : null
    )}
  </div>
</div>

<script>
// Drag and Drop functionality for preparation steps
document.addEventListener('DOMContentLoaded', function() {
  let draggedElement = null;
  let draggedData = null;
  let placeholder = null;

  function initDragAndDrop() {
    // Add event listeners to all preparation group containers AND their steps-list children
    const preparationGroups = document.querySelectorAll('.preparation-group-edit');
    const stepContainers = document.querySelectorAll('.steps-list');
    
    // Add listeners to step containers
    stepContainers.forEach(container => {
      container.addEventListener('dragover', handleDragOver);
      container.addEventListener('drop', handleDrop);
      container.addEventListener('dragenter', handleDragEnter);
      container.addEventListener('dragleave', handleDragLeave);
    });
    
    // Also add listeners to the preparation group containers for better cross-group support
    preparationGroups.forEach(group => {
      group.addEventListener('dragover', handleDragOverGroup);
      group.addEventListener('drop', handleDropGroup);
    });
    
    updateStepEventListeners();
  }

  function updateStepEventListeners() {
    const stepItems = document.querySelectorAll('.step-edit-item');
    stepItems.forEach(item => {
      if (!item.hasAttribute('data-drag-initialized')) {
        item.setAttribute('data-drag-initialized', 'true');
        item.addEventListener('dragstart', handleDragStart);
        item.addEventListener('dragend', handleDragEnd);
      }
    });
  }

  function handleDragStart(e) {
    draggedElement = e.currentTarget;
    const parent = draggedElement.parentNode;
    draggedData = {
      stepId: draggedElement.dataset.stepId,
      sourceGroup: draggedElement.closest('.preparation-group-edit'),
      sourceIndex: parent ? Array.from(parent.children).indexOf(draggedElement) : -1
    };

    placeholder = document.createElement('div');
    placeholder.className = 'step-placeholder border-2 border-dashed border-orange-400 dark:border-orange-500 rounded-md p-4 bg-orange-50 dark:bg-orange-900/20 transition-colors duration-200';
    placeholder.innerHTML = '<div class="text-center text-orange-600 dark:text-orange-400 font-medium">Hier ablegen</div>';

    draggedElement.style.opacity = '0.5';
    if (e.dataTransfer) {
      e.dataTransfer.effectAllowed = 'move';
      e.dataTransfer.setData('text/html', draggedElement.outerHTML);
    }
  }

  function handleDragEnd(e) {
    if (draggedElement) {
      draggedElement.style.opacity = '1';
    }
    document.querySelectorAll('.step-placeholder').forEach(p => p.remove());
    draggedElement = null;
    draggedData = null;
    placeholder = null;
    document.querySelectorAll('.steps-list').forEach(container => {
      container.classList.remove('drag-over');
    });
  }

  function handleDragEnter(e) {
    e.preventDefault();
    e.currentTarget.classList.add('drag-over');
  }

  function handleDragLeave(e) {
    e.preventDefault();
    const container = e.currentTarget;
    // Use setTimeout to ensure this runs after any potential dragenter events
    setTimeout(() => {
      if (!container.contains(e.relatedTarget)) {
        container.classList.remove('drag-over');
        // Only remove placeholders from this specific container
        container.querySelectorAll('.step-placeholder').forEach(p => p.remove());
      }
    }, 10);
  }

  function handleDragOver(e) {
    e.preventDefault();
    if (e.dataTransfer) e.dataTransfer.dropEffect = 'move';
    if (!draggedElement || !placeholder) return;

    const container = e.currentTarget;
    const afterElement = getDragAfterElement(container, e.clientY);
    container.querySelectorAll('.step-placeholder').forEach(p => p.remove());
    
    if (afterElement == null) {
      container.appendChild(placeholder);
    } else {
      container.insertBefore(placeholder, afterElement);
    }
  }

  function handleDrop(e) {
    e.preventDefault();
    if (!draggedElement || !draggedData || !placeholder) return;

    const targetContainer = e.currentTarget;
    const targetGroup = targetContainer.closest('.preparation-group-edit');
    const targetIndex = Array.from(targetContainer.children).indexOf(placeholder);
    
    draggedElement.remove();
    
    if (targetIndex >= targetContainer.children.length - 1) {
      targetContainer.appendChild(draggedElement);
    } else {
      const nextElement = targetContainer.children[targetIndex + 1];
      targetContainer.insertBefore(draggedElement, nextElement);
    }
    
    placeholder.remove();
    updateStepNumbers(draggedData.sourceGroup);
    if (targetGroup !== draggedData.sourceGroup) {
      updateStepNumbers(targetGroup);
    }
    targetContainer.classList.remove('drag-over');
    draggedElement.style.opacity = '1';
  }

  function handleDragOverGroup(e) {
    e.preventDefault();
    if (!draggedElement || !placeholder) return;
    
    // Find the steps-list within this group
    const stepsContainer = e.currentTarget.querySelector('.steps-list');
    if (stepsContainer) {
      // Forward the event to the steps container
      const afterElement = getDragAfterElement(stepsContainer, e.clientY);
      stepsContainer.querySelectorAll('.step-placeholder').forEach(p => p.remove());
      
      if (afterElement == null) {
        stepsContainer.appendChild(placeholder);
      } else {
        stepsContainer.insertBefore(placeholder, afterElement);
      }
      
      stepsContainer.classList.add('drag-over');
    }
  }

  function handleDropGroup(e) {
    e.preventDefault();
    if (!draggedElement || !draggedData || !placeholder) return;
    
    // Find the steps-list within this group
    const stepsContainer = e.currentTarget.querySelector('.steps-list');
    if (stepsContainer && stepsContainer.contains(placeholder)) {
      // Forward to the regular drop handler
      const fakeEvent = { 
        preventDefault: () => {}, 
        currentTarget: stepsContainer 
      };
      handleDrop(fakeEvent);
    }
  }

  function getDragAfterElement(container, y) {
    const draggableElements = [...container.querySelectorAll('.step-edit-item:not(.dragging)')];
    return draggableElements.reduce((closest, child) => {
      const box = child.getBoundingClientRect();
      const offset = y - box.top - box.height / 2;
      if (offset < 0 && offset > closest.offset) {
        return { offset: offset, element: child };
      } else {
        return closest;
      }
    }, { offset: Number.NEGATIVE_INFINITY }).element;
  }

  function updateStepNumbers(groupElement) {
    if (!groupElement) return;
    const steps = groupElement.querySelectorAll('.step-edit-item');
    steps.forEach((step, index) => {
      const numberElement = step.querySelector('.bg-orange-500, .bg-green-500');
      if (numberElement) {
        numberElement.textContent = index + 1;
      }
    });
  }

  const style = document.createElement('style');
  style.textContent = `
    .steps-list.drag-over {
      background-color: rgba(251, 146, 60, 0.1);
      border-color: rgba(251, 146, 60, 0.3);
    }
    .dark .steps-list.drag-over {
      background-color: rgba(251, 146, 60, 0.05);
      border-color: rgba(251, 146, 60, 0.2);
    }
    .step-edit-item[draggable="true"] {
      cursor: grab;
    }
    .step-edit-item[draggable="true"]:active {
      cursor: grabbing;
    }
    .preparation-group-edit {
      min-height: 120px;
    }
    .steps-list {
      min-height: 80px;
      padding: 8px;
      border-radius: 4px;
      transition: all 0.2s ease;
    }
  `;
  document.head.appendChild(style);

  initDragAndDrop();

  const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach(function(node) {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node;
            if (element.classList && element.classList.contains('step-edit-item')) {
              updateStepEventListeners();
            } else if (element.classList && element.classList.contains('preparation-group-edit')) {
              // New group added, reinitialize all drag and drop
              initDragAndDrop();
            } else if (element.querySelectorAll) {
              const stepItems = element.querySelectorAll('.step-edit-item');
              const groupItems = element.querySelectorAll('.preparation-group-edit');
              if (stepItems.length > 0 || groupItems.length > 0) {
                initDragAndDrop();
              }
            }
          }
        });
      }
    });
  });

  const preparationContainer = document.getElementById('preparation-edit-container');
  if (preparationContainer) {
    observer.observe(preparationContainer, { 
      childList: true, 
      subtree: true 
    });
  }
});
</script>

 
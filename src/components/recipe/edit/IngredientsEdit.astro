---
import type { Recipe, Ingredient } from '../../../types/recipe';

interface Props {
  recipe: Recipe;
}

const { recipe } = Astro.props;
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4 sm:p-6 transition-colors duration-200">
  <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 space-y-2 sm:space-y-0">
    <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Zutaten bearbeiten</h2>
    <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
      <button 
        type="button" 
        id="add-ingredient-group-btn"
        class="px-3 py-2 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded transition-colors"
      >
        + Gruppe hinzufügen
      </button>
      <button 
        type="button" 
        id="add-ingredient-btn"
        class="px-3 py-2 text-sm bg-orange-500 hover:bg-orange-600 text-white rounded transition-colors"
      >
        + Zutat hinzufügen
      </button>
    </div>
  </div>
  
  <div id="ingredients-edit-container" class="space-y-6">
    <!-- Default ungrouped ingredients section -->
    <div class="ingredient-group-edit default-group border border-gray-300 dark:border-gray-600 rounded-lg p-3 sm:p-4 bg-gray-50 dark:bg-gray-700/50 transition-colors duration-200" data-is-default="true" data-group-id="default">
      <div class="flex justify-between items-center mb-3">
        <div class="flex-1 px-3 py-2 text-base sm:text-lg font-medium text-gray-600 dark:text-gray-300">
          Zutaten (ungruppiert)
        </div>
      </div>
      
      <div class="ingredients-list space-y-3">
        {recipe.ingredientGroups.map((group) => 
          !group.title ? group.ingredients.map((ingredient) => (
            'name' in ingredient ? (
              <div class="ingredient-edit-item border border-gray-200 dark:border-gray-600 rounded-md p-3 bg-white dark:bg-gray-800 transition-colors duration-200" draggable="true" data-ingredient-id={(ingredient as Ingredient).id}>
                <div class="space-y-3">
                  <div class="flex flex-col sm:flex-row sm:space-x-3 space-y-2 sm:space-y-0 sm:items-center">
                    <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-400 mr-2">
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                      </svg>
                    </div>
                    <div class="flex-1 relative">
                      <input 
                        type="text" 
                        value={(ingredient as Ingredient).name}
                        placeholder="Zutatename"
                        class="ingredient-name-input w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                      />
                      <div class="ingredient-suggestions absolute top-full left-0 right-0 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg mt-1 hidden z-20 max-h-32 overflow-y-auto">
                      </div>
                    </div>
                    <div class="flex space-x-2 sm:space-x-3">
                      <input 
                        type="number" 
                        value={(ingredient as Ingredient).quantities[0]?.amount || ''}
                        placeholder="Menge"
                        step="0.1"
                        class="w-20 sm:w-24 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                      />
                      <select class="w-20 sm:w-24 px-2 sm:px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-xs sm:text-sm">
                        <option value={(ingredient as Ingredient).quantities[0]?.unit || ''} selected>
                          {(ingredient as Ingredient).quantities[0]?.unit || 'Einheit'}
                        </option>
                        <option value="g">g</option>
                        <option value="kg">kg</option>
                        <option value="ml">ml</option>
                        <option value="l">l</option>
                        <option value="Stück">Stück</option>
                        <option value="TL">TL</option>
                        <option value="EL">EL</option>
                        <option value="Tasse">Tasse</option>
                        <option value="Prise">Prise</option>
                      </select>
                      <button 
                        type="button" 
                        class="remove-ingredient-btn px-2 py-2 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                        </svg>
                      </button>
                    </div>
                  </div>
                  <div>
                    <input 
                      type="text" 
                      value={(ingredient as Ingredient).description || ''}
                      placeholder="Beschreibung (optional)"
                      class="ingredient-description-input w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 text-sm"
                    />
                  </div>
                </div>
              </div>
            ) : null
          )) : null
        )}
      </div>
      
      <button 
        type="button" 
        class="add-ingredient-to-group-btn mt-3 px-3 py-2 text-sm bg-gray-500 hover:bg-gray-600 dark:bg-gray-600 dark:hover:bg-gray-500 text-white rounded transition-colors w-full sm:w-auto"
      >
        + Zutat zu ungruppiert hinzufügen
      </button>
    </div>

    <!-- Named ingredient groups -->
    {recipe.ingredientGroups.map((group, groupIndex) => 
      group.title ? (
        <div class="ingredient-group-edit border border-gray-300 dark:border-gray-600 rounded-lg p-3 sm:p-4 bg-gray-50 dark:bg-gray-700/50 transition-colors duration-200" data-group-id={group.id}>
          <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-3 space-y-2 sm:space-y-0">
            <input 
              type="text" 
              value={group.title || ''}
              placeholder="Gruppenname (optional)"
              class="group-title-input flex-1 px-3 py-2 text-base sm:text-lg font-medium border-b border-gray-300 dark:border-gray-600 focus:outline-none focus:border-orange-500 bg-transparent text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
            />
            <button 
              type="button" 
              class="remove-group-btn ml-0 sm:ml-3 px-2 py-1 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors self-end"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
              </svg>
            </button>
          </div>
          
          <div class="ingredients-list space-y-3">
            {group.ingredients.map((ingredient) => (
              'name' in ingredient ? (
                <div class="ingredient-edit-item border border-gray-200 dark:border-gray-600 rounded-md p-3 bg-white dark:bg-gray-800 transition-colors duration-200" draggable="true" data-ingredient-id={(ingredient as Ingredient).id}>
                  <div class="space-y-3">
                    <div class="flex flex-col sm:flex-row sm:space-x-3 space-y-2 sm:space-y-0 sm:items-center">
                      <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-400 mr-2">
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                        </svg>
                      </div>
                      <div class="flex-1 relative">
                        <input 
                          type="text" 
                          value={(ingredient as Ingredient).name}
                          placeholder="Zutatename"
                          class="ingredient-name-input w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                        />
                        <div class="ingredient-suggestions absolute top-full left-0 right-0 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg mt-1 hidden z-20 max-h-32 overflow-y-auto">
                        </div>
                      </div>
                      <div class="flex space-x-2 sm:space-x-3">
                        <input 
                          type="number" 
                          value={(ingredient as Ingredient).quantities[0]?.amount || ''}
                          placeholder="Menge"
                          step="0.1"
                          class="w-20 sm:w-24 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
                        />
                        <select class="w-20 sm:w-24 px-2 sm:px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-xs sm:text-sm">
                          <option value={(ingredient as Ingredient).quantities[0]?.unit || ''} selected>
                            {(ingredient as Ingredient).quantities[0]?.unit || 'Einheit'}
                          </option>
                          <option value="g">g</option>
                          <option value="kg">kg</option>
                          <option value="ml">ml</option>
                          <option value="l">l</option>
                          <option value="Stück">Stück</option>
                          <option value="TL">TL</option>
                          <option value="EL">EL</option>
                          <option value="Tasse">Tasse</option>
                          <option value="Prise">Prise</option>
                        </select>
                        <button 
                          type="button" 
                          class="remove-ingredient-btn px-2 py-2 text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 rounded transition-colors"
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                          </svg>
                        </button>
                      </div>
                    </div>
                    <div>
                      <input 
                        type="text" 
                        value={(ingredient as Ingredient).description || ''}
                        placeholder="Beschreibung (optional)"
                        class="ingredient-description-input w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 text-sm"
                      />
                    </div>
                  </div>
                </div>
              ) : null
            ))}
          </div>
          
          <button 
            type="button" 
            class="add-ingredient-to-group-btn mt-3 px-3 py-2 text-sm bg-gray-500 hover:bg-gray-600 dark:bg-gray-600 dark:hover:bg-gray-500 text-white rounded transition-colors w-full sm:w-auto"
          >
            + Zutat zu dieser Gruppe hinzufügen
          </button>
        </div>
      ) : null
    )}
  </div>
</div> 

<script>
// Drag and Drop functionality for ingredients
document.addEventListener('DOMContentLoaded', function() {
  let draggedElement: HTMLElement | null = null;
  let draggedData: any = null;
  let placeholder: HTMLElement | null = null;
  
  // Touch-specific variables
  let touchStartX = 0;
  let touchStartY = 0;
  let touchCurrentX = 0;
  let touchCurrentY = 0;
  let isDragging = false;
  let dragPreview = null;
  let touchTarget = null;
  
  // Check if device supports touch
  const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

  function initDragAndDrop() {
    // Add event listeners to all ingredient group containers AND their ingredients-list children
    const ingredientGroups = document.querySelectorAll('.ingredient-group-edit');
    const ingredientContainers = document.querySelectorAll('.ingredients-list');
    
    // Add listeners to ingredient containers
    ingredientContainers.forEach(container => {
      container.addEventListener('dragover', handleDragOver);
      container.addEventListener('drop', handleDrop);
      container.addEventListener('dragenter', handleDragEnter);
      container.addEventListener('dragleave', handleDragLeave);
    });
    
    // Also add listeners to the ingredient group containers for better cross-group support
    ingredientGroups.forEach(group => {
      group.addEventListener('dragover', handleDragOverGroup);
      group.addEventListener('drop', handleDropGroup);
    });
    
    updateIngredientEventListeners();
  }

  function updateIngredientEventListeners() {
    const ingredientItems = document.querySelectorAll('.ingredient-edit-item');
    ingredientItems.forEach(item => {
      if (!item.hasAttribute('data-drag-initialized')) {
        item.setAttribute('data-drag-initialized', 'true');
        
        // Add mouse events to the whole item
        item.addEventListener('dragstart', handleDragStart);
        item.addEventListener('dragend', handleDragEnd);
        
        // Add touch events only to the drag handle
        if (isTouchDevice) {
          const dragHandle = item.querySelector('.drag-handle');
          if (dragHandle) {
            dragHandle.addEventListener('touchstart', handleTouchStart, { passive: false });
          }
        }
      }
    });
  }

  // Touch event handlers
  function handleTouchStart(e) {
    e.preventDefault(); // Prevent default touch behavior
    const touch = e.touches[0];
    const ingredientItem = e.currentTarget.closest('.ingredient-edit-item');
    
    if (!ingredientItem) return;
    
    touchStartX = touch.clientX;
    touchStartY = touch.clientY;
    touchCurrentX = touch.clientX;
    touchCurrentY = touch.clientY;
    touchTarget = ingredientItem;
    
    // Add global touch move and end listeners
    document.addEventListener('touchmove', handleTouchMove, { passive: false });
    document.addEventListener('touchend', handleTouchEnd, { passive: false });
    
    // Small delay to distinguish between tap and drag
    setTimeout(() => {
      if (touchTarget === ingredientItem && !isDragging) {
        const currentTouch = getCurrentTouch();
        if (currentTouch) {
          const deltaX = Math.abs(currentTouch.clientX - touchStartX);
          const deltaY = Math.abs(currentTouch.clientY - touchStartY);
          
          // Start drag if moved more than 10px
          if (deltaX > 10 || deltaY > 10) {
            startTouchDrag(ingredientItem, currentTouch);
          }
        }
      }
    }, 150);
  }
  
  function handleTouchMove(e) {
    if (!touchTarget) return;
    
    const touch = e.touches[0];
    
    if (!isDragging) {
      const deltaX = Math.abs(touch.clientX - touchStartX);
      const deltaY = Math.abs(touch.clientY - touchStartY);
      
      // Start drag if moved more than 10px
      if ((deltaX > 10 || deltaY > 10) && touchTarget) {
        startTouchDrag(touchTarget, touch);
      }
      return;
    }
    
    // Only prevent default after drag has started
    e.preventDefault();
    
    touchCurrentX = touch.clientX;
    touchCurrentY = touch.clientY;
    
    // Update drag preview position
    if (dragPreview) {
      dragPreview.style.left = touchCurrentX - 50 + 'px';
      dragPreview.style.top = touchCurrentY - 25 + 'px';
    }
    
    // Auto-scroll when near screen edges
    handleAutoScroll(touchCurrentY);
    
    // Show scroll zone indicators
    updateScrollZoneIndicators(touchCurrentY);
    
    // Find element under touch point
    const elementBelow = document.elementFromPoint(touchCurrentX, touchCurrentY);
    const ingredientsList = elementBelow?.closest('.ingredients-list');
    
    if (ingredientsList) {
      // Simulate drag over for positioning placeholder
      const afterElement = getTouchDragAfterElement(ingredientsList, touchCurrentY);
      ingredientsList.querySelectorAll('.ingredient-placeholder').forEach(p => p.remove());
      
      if (afterElement == null) {
        ingredientsList.appendChild(placeholder);
      } else {
        ingredientsList.insertBefore(placeholder, afterElement);
      }
      
      ingredientsList.classList.add('drag-over');
      
      // Remove drag-over from other containers
      document.querySelectorAll('.ingredients-list').forEach(container => {
        if (container !== ingredientsList) {
          container.classList.remove('drag-over');
        }
      });
    }
  }
  
  function handleTouchEnd(e) {
    // Remove global listeners
    document.removeEventListener('touchmove', handleTouchMove);
    document.removeEventListener('touchend', handleTouchEnd);
    
    if (!isDragging) {
      touchTarget = null;
      return;
    }
    
    e.preventDefault();
    
    // Stop auto-scroll
    stopAutoScroll();
    
    // Find drop target
    const elementBelow = document.elementFromPoint(touchCurrentX, touchCurrentY);
    const targetContainer = elementBelow?.closest('.ingredients-list');
    
    if (targetContainer && placeholder && placeholder.parentNode === targetContainer) {
      // Perform drop
      const targetGroup = targetContainer.closest('.ingredient-group-edit');
      const targetIndex = Array.from(targetContainer.children).indexOf(placeholder);
      
      draggedElement.remove();
      
      if (targetIndex >= targetContainer.children.length - 1) {
        targetContainer.appendChild(draggedElement);
      } else {
        const nextElement = targetContainer.children[targetIndex + 1];
        targetContainer.insertBefore(draggedElement, nextElement);
      }
      
      // Update ingredient linker if available
      if (window.updateIngredientLinker) {
        window.updateIngredientLinker();
      }
    } else {
      // Drop failed, restore element
      if (draggedData.sourceGroup) {
        const sourceContainer = draggedData.sourceGroup.querySelector('.ingredients-list');
        if (sourceContainer) {
          sourceContainer.appendChild(draggedElement);
        }
      }
    }
    
    endTouchDrag();
  }
  
  function startTouchDrag(element, touch) {
    isDragging = true;
    draggedElement = element;
    
    const parent = draggedElement.parentNode;
    draggedData = {
      ingredientId: draggedElement.dataset.ingredientId,
      sourceGroup: draggedElement.closest('.ingredient-group-edit'),
      sourceIndex: parent ? Array.from(parent.children).indexOf(draggedElement) : -1
    };

    // Create placeholder
    placeholder = document.createElement('div');
    placeholder.className = 'ingredient-placeholder border-2 border-dashed border-orange-400 dark:border-orange-500 rounded-md p-3 bg-orange-50 dark:bg-orange-900/20 transition-colors duration-200';
    placeholder.innerHTML = '<div class="text-center text-orange-600 dark:text-orange-400 font-medium">Hier ablegen</div>';

    // Create drag preview
    dragPreview = draggedElement.cloneNode(true);
    dragPreview.style.position = 'fixed';
    dragPreview.style.pointerEvents = 'none';
    dragPreview.style.zIndex = '1000';
    dragPreview.style.opacity = '0.8';
    dragPreview.style.transform = 'rotate(5deg) scale(0.95)';
    dragPreview.style.left = touchCurrentX - 50 + 'px';
    dragPreview.style.top = touchCurrentY - 25 + 'px';
    dragPreview.style.width = draggedElement.offsetWidth + 'px';
    document.body.appendChild(dragPreview);

    draggedElement.style.opacity = '0.3';
  }
  
  function endTouchDrag() {
    isDragging = false;
    touchTarget = null;
    
    if (draggedElement) {
      draggedElement.style.opacity = '1';
    }
    
    if (dragPreview) {
      dragPreview.remove();
      dragPreview = null;
    }
    
    document.querySelectorAll('.ingredient-placeholder').forEach(p => p.remove());
    document.querySelectorAll('.ingredients-list').forEach(container => {
      container.classList.remove('drag-over');
    });
    
    // Clean up scroll zone indicators
    cleanupScrollZoneIndicators();
    
    draggedElement = null;
    draggedData = null;
    placeholder = null;
  }
  
  function getTouchDragAfterElement(container: Element, y: number) {
    const draggableElements = [...container.querySelectorAll('.ingredient-edit-item:not(.dragging)')].filter(el => el !== draggedElement);
    return draggableElements.reduce((closest, child) => {
      const box = child.getBoundingClientRect();
      const offset = y - box.top - box.height / 2;
      if (offset < 0 && offset > closest.offset) {
        return { offset: offset, element: child };
      } else {
        return closest;
      }
    }, { offset: Number.NEGATIVE_INFINITY }).element;
  }

  // Helper function to get current touch point
  function getCurrentTouch() {
    return document.querySelector(':active') ? null : { clientX: touchCurrentX, clientY: touchCurrentY };
  }
  
  // Auto-scroll functionality
  let autoScrollInterval = null;
  const SCROLL_ZONE = 150; // pixels from edge to trigger scroll (increased from 80)
  const SCROLL_SPEED_BASE = 8; // base pixels per interval (increased from 5)
  const SCROLL_ACCELERATION = 2; // acceleration factor based on proximity
  
  function handleAutoScroll(touchY) {
    const viewportHeight = window.innerHeight;
    
    stopAutoScroll(); // Clear any existing interval
    
    let scrollDirection = 0;
    let scrollSpeed = SCROLL_SPEED_BASE;
    
    if (touchY < SCROLL_ZONE) {
      // Near top edge - scroll up
      scrollDirection = -1;
      // Increase speed when closer to edge
      const proximity = (SCROLL_ZONE - touchY) / SCROLL_ZONE;
      scrollSpeed = SCROLL_SPEED_BASE + (proximity * SCROLL_ACCELERATION * 5);
    } else if (touchY > viewportHeight - SCROLL_ZONE) {
      // Near bottom edge - scroll down
      scrollDirection = 1;
      // Increase speed when closer to edge
      const proximity = (touchY - (viewportHeight - SCROLL_ZONE)) / SCROLL_ZONE;
      scrollSpeed = SCROLL_SPEED_BASE + (proximity * SCROLL_ACCELERATION * 5);
    }
    
    if (scrollDirection !== 0) {
      autoScrollInterval = setInterval(() => {
        const currentScrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const documentHeight = document.documentElement.scrollHeight;
        const windowHeight = window.innerHeight;
        const maxScroll = Math.max(0, documentHeight - windowHeight);
        
        let newScrollTop;
        if (scrollDirection < 0) {
          // Scroll up
          newScrollTop = Math.max(0, currentScrollTop - scrollSpeed);
        } else {
          // Scroll down
          newScrollTop = Math.min(maxScroll, currentScrollTop + scrollSpeed);
        }
        
        // Use scrollBy for smoother scrolling
        if (scrollDirection < 0) {
          window.scrollBy(0, -scrollSpeed);
        } else {
          window.scrollBy(0, scrollSpeed);
        }
        
        // Check if we've reached the limits and stop
        const afterScrollTop = window.pageYOffset || document.documentElement.scrollTop;
        if (afterScrollTop === currentScrollTop) {
          stopAutoScroll();
        }
      }, 16); // ~60fps
    }
  }
  
  function stopAutoScroll() {
    if (autoScrollInterval) {
      clearInterval(autoScrollInterval);
      autoScrollInterval = null;
    }
  }
  
  // Visual feedback for scroll zones
  function updateScrollZoneIndicators(touchY) {
    const viewportHeight = window.innerHeight;
    
    // Remove existing indicators
    document.querySelectorAll('.scroll-zone-indicator').forEach(el => el.remove());
    
    if (touchY < SCROLL_ZONE || touchY > viewportHeight - SCROLL_ZONE) {
      const indicator = document.createElement('div');
      indicator.className = 'scroll-zone-indicator';
      indicator.style.cssText = `
        position: fixed;
        left: 50%;
        transform: translateX(-50%);
        padding: 8px 16px;
        background: rgba(249, 115, 22, 0.9);
        color: white;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
        z-index: 1001;
        pointer-events: none;
        transition: all 0.2s ease;
      `;
      
      if (touchY < SCROLL_ZONE) {
        indicator.style.top = '20px';
        indicator.textContent = '↑ Scrolle nach oben';
      } else {
        indicator.style.bottom = '20px';
        indicator.textContent = '↓ Scrolle nach unten';
      }
      
      document.body.appendChild(indicator);
    }
  }
  
  // Clean up scroll zone indicators
  function cleanupScrollZoneIndicators() {
    document.querySelectorAll('.scroll-zone-indicator').forEach(el => el.remove());
  }

  // Original drag handlers (for mouse/desktop)
  function handleDragStart(e) {
    draggedElement = e.currentTarget;
    const parent = draggedElement.parentNode;
    draggedData = {
      ingredientId: draggedElement.dataset.ingredientId,
      sourceGroup: draggedElement.closest('.ingredient-group-edit'),
      sourceIndex: parent ? Array.from(parent.children).indexOf(draggedElement) : -1
    };

    placeholder = document.createElement('div');
    placeholder.className = 'ingredient-placeholder border-2 border-dashed border-orange-400 dark:border-orange-500 rounded-md p-3 bg-orange-50 dark:bg-orange-900/20 transition-colors duration-200';
    placeholder.innerHTML = '<div class="text-center text-orange-600 dark:text-orange-400 font-medium">Hier ablegen</div>';

    draggedElement.style.opacity = '0.5';
    if (e.dataTransfer) {
      e.dataTransfer.effectAllowed = 'move';
      e.dataTransfer.setData('text/html', draggedElement.outerHTML);
    }
  }

  function handleDragEnd(e) {
    if (draggedElement) {
      draggedElement.style.opacity = '1';
    }
    document.querySelectorAll('.ingredient-placeholder').forEach(p => p.remove());
    draggedElement = null;
    draggedData = null;
    placeholder = null;
    document.querySelectorAll('.ingredients-list').forEach(container => {
      container.classList.remove('drag-over');
    });
  }

  function handleDragEnter(e) {
    e.preventDefault();
    e.currentTarget.classList.add('drag-over');
  }

  function handleDragLeave(e) {
    e.preventDefault();
    const container = e.currentTarget;
    // Use setTimeout to ensure this runs after any potential dragenter events
    setTimeout(() => {
      if (!container.contains(e.relatedTarget)) {
        container.classList.remove('drag-over');
        // Only remove placeholders from this specific container
        container.querySelectorAll('.ingredient-placeholder').forEach(p => p.remove());
      }
    }, 10);
  }

  function handleDragOver(e) {
    e.preventDefault();
    if (e.dataTransfer) e.dataTransfer.dropEffect = 'move';
    if (!draggedElement || !placeholder) return;

    const container = e.currentTarget;
    const afterElement = getDragAfterElement(container, e.clientY);
    container.querySelectorAll('.ingredient-placeholder').forEach(p => p.remove());
    
    if (afterElement == null) {
      container.appendChild(placeholder);
    } else {
      container.insertBefore(placeholder, afterElement);
    }
  }

  function handleDrop(e) {
    e.preventDefault();
    if (!draggedElement || !draggedData || !placeholder) return;

    const targetContainer = e.currentTarget;
    const targetGroup = targetContainer.closest('.ingredient-group-edit');
    const targetIndex = Array.from(targetContainer.children).indexOf(placeholder);
    
    draggedElement.remove();
    
    if (targetIndex >= targetContainer.children.length - 1) {
      targetContainer.appendChild(draggedElement);
    } else {
      const nextElement = targetContainer.children[targetIndex + 1];
      targetContainer.insertBefore(draggedElement, nextElement);
    }
    
    placeholder.remove();
    targetContainer.classList.remove('drag-over');
    draggedElement.style.opacity = '1';

    // Update ingredient linker if available
    if (window.updateIngredientLinker) {
      window.updateIngredientLinker();
    }
  }

  function handleDragOverGroup(e) {
    e.preventDefault();
    if (!draggedElement || !placeholder) return;
    
    // Find the ingredients-list within this group
    const ingredientsContainer = e.currentTarget.querySelector('.ingredients-list');
    if (ingredientsContainer) {
      // Forward the event to the ingredients container
      const afterElement = getDragAfterElement(ingredientsContainer, e.clientY);
      ingredientsContainer.querySelectorAll('.ingredient-placeholder').forEach(p => p.remove());
      
      if (afterElement == null) {
        ingredientsContainer.appendChild(placeholder);
      } else {
        ingredientsContainer.insertBefore(placeholder, afterElement);
      }
      
      ingredientsContainer.classList.add('drag-over');
    }
  }

  function handleDropGroup(e) {
    e.preventDefault();
    if (!draggedElement || !draggedData || !placeholder) return;
    
    // Find the ingredients-list within this group
    const ingredientsContainer = e.currentTarget.querySelector('.ingredients-list');
    if (ingredientsContainer && ingredientsContainer.contains(placeholder)) {
      // Forward to the regular drop handler
      const fakeEvent = { 
        preventDefault: () => {}, 
        currentTarget: ingredientsContainer 
      };
      handleDrop(fakeEvent);
    }
  }

  function getDragAfterElement(container: any, y: number) {
    const draggableElements = [...container.querySelectorAll('.ingredient-edit-item:not(.dragging)')];
    return draggableElements.reduce((closest, child) => {
      const box = child.getBoundingClientRect();
      const offset = y - box.top - box.height / 2;
      if (offset < 0 && offset > closest.offset) {
        return { offset: offset, element: child };
      } else {
        return closest;
      }
    }, { offset: Number.NEGATIVE_INFINITY }).element;
  }

  const style = document.createElement('style');
  style.textContent = `
    .ingredients-list.drag-over {
      background-color: rgba(251, 146, 60, 0.1);
      border-color: rgba(251, 146, 60, 0.3);
    }
    .dark .ingredients-list.drag-over {
      background-color: rgba(251, 146, 60, 0.05);
      border-color: rgba(251, 146, 60, 0.2);
    }
    .ingredient-edit-item[draggable="true"] {
      cursor: grab;
    }
    .ingredient-edit-item[draggable="true"]:active {
      cursor: grabbing;
    }
    .ingredient-group-edit {
      min-height: 120px;
    }
    .ingredients-list {
      min-height: 80px;
      padding: 8px;
      border-radius: 4px;
      transition: all 0.2s ease;
    }
    
    /* Touch-specific styles */
    @media (hover: none) and (pointer: coarse) {
      .ingredient-edit-item {
        user-select: none;
      }
      
      .drag-handle {
        padding: 12px;
        margin: -12px;
        touch-action: none;
        cursor: grab;
        position: relative;
      }
      
      .drag-handle:active {
        cursor: grabbing;
      }
      
      /* Make drag handle more prominent on touch devices */
      .drag-handle::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: rgba(156, 163, 175, 0.1);
        opacity: 0;
        transition: opacity 0.2s ease;
      }
      
      .drag-handle:active::after {
        opacity: 1;
      }
      
      /* Prevent accidental input focus during drag */
      .ingredient-edit-item input {
        touch-action: manipulation;
      }
    }
  `;
  document.head.appendChild(style);

  initDragAndDrop();

  const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach(function(node) {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node;
            if (element.classList && element.classList.contains('ingredient-edit-item')) {
              updateIngredientEventListeners();
            } else if (element.classList && element.classList.contains('ingredient-group-edit')) {
              // New group added, reinitialize all drag and drop
              initDragAndDrop();
            } else if (element instanceof Element && element.querySelectorAll) {
              const ingredientItems = element.querySelectorAll('.ingredient-edit-item');
              const groupItems = element.querySelectorAll('.ingredient-group-edit');
              if (ingredientItems.length > 0 || groupItems.length > 0) {
                initDragAndDrop();
              }
            }
          }
        });
      }
    });
  });

  const ingredientsContainer = document.getElementById('ingredients-edit-container');
  if (ingredientsContainer) {
    observer.observe(ingredientsContainer, { 
      childList: true, 
      subtree: true 
    });
  }
});
</script> 
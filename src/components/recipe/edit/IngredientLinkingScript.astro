---
// Component for handling ingredient linking functionality with intermediate ingredients support
---

<!-- Ingredient Linking Modal -->
<div id="ingredient-link-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
</div>

<div id="ingredient-link-modal-content" class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 bg-white dark:bg-gray-800 rounded-lg shadow-lg w-[90vw] sm:w-[85vw] md:w-[75vw] lg:w-[65vw] xl:w-[55vw] max-w-2xl max-h-[85vh] overflow-y-auto hidden">
          <div class="p-4 sm:p-6">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
          Zutaten manuell verlinken
        </h3>
        <button type="button" id="cancel-link-modal" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
      
      <div class="mb-4">
        <p class="text-sm text-gray-600 dark:text-gray-400 mb-3">
          Wählen Sie die Zutaten und Zwischenzutaten aus, die in diesem Zubereitungsschritt verwendet werden:
        </p>
        
        <!-- Regular Ingredients Section -->
        <div class="mb-4">
          <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Normale Zutaten</h4>
          <div id="regular-ingredient-list" class="space-y-2 max-h-48 sm:max-h-64 overflow-y-auto border border-gray-200 dark:border-gray-600 rounded p-2">
            <!-- Regular ingredients will be populated dynamically -->
          </div>
        </div>
        
        <!-- Intermediate Ingredients Section -->
        <div class="mb-4">
          <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Zwischenzutaten (aus vorherigen Schritten)</h4>
          <div id="intermediate-ingredient-list" class="space-y-2 max-h-48 sm:max-h-64 overflow-y-auto border border-gray-200 dark:border-gray-600 rounded p-2">
            <!-- Intermediate ingredients will be populated dynamically -->
          </div>
        </div>
      </div>
      
      <div class="flex justify-end space-x-3">
        <button type="button" id="cancel-link-modal-2" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 rounded-md transition-colors">
          Abbrechen
        </button>
        <button type="button" id="save-link-modal" class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 rounded-md transition-colors">
          Verknüpfungen speichern
        </button>
      </div>
</div>

<script>
// Extend Window interface for our custom properties
declare global {
  interface Window {
    currentRecipe: any;
    ingredientLinker: IngredientLinker;
    IngredientLinker: typeof IngredientLinker;
    intermediateIngredientManager: IntermediateIngredientManager;
    IntermediateIngredientManager: typeof IntermediateIngredientManager;
  }
}

interface LinkedIngredient {
  ingredientId: string;
  selectedQuantityIndex: number;
  isIntermediate?: boolean;
}

interface IntermediateIngredient {
  id: string;
  name: string;
  description?: string;
}

interface Recipe {
  preparationGroups: Array<{
    steps: Array<{
      id: string;
      text: string;
      linkedIngredients?: LinkedIngredient[];
      intermediateIngredients?: IntermediateIngredient[];
    }>;
  }>;
  ingredientGroups: Array<{
    ingredients: Array<{
      id: string;
      name: string;
      quantities: Array<{
        amount: number;
        unit: string;
      }>;
    }>;
  }>;
}

class IntermediateIngredientManager {
  private recipe: Recipe | null = null;
  
  constructor() {
    this.init();
  }

  init(): void {
    if (window.currentRecipe) {
      this.recipe = window.currentRecipe;
    }
    
    this.bindEvents();
  }

  bindEvents(): void {
    // Add intermediate ingredient button click events
    document.addEventListener('click', (e: Event) => {
      const target = e.target as HTMLElement;
      if (target?.closest('.add-intermediate-ingredient-btn')) {
        e.preventDefault();
        const stepElement = target.closest('.step-edit-item') as HTMLElement;
        this.addIntermediateIngredient(stepElement);
      }
    });

    // Remove intermediate ingredient button click events
    document.addEventListener('click', (e: Event) => {
      const target = e.target as HTMLElement;
      if (target?.closest('.remove-intermediate-btn')) {
        e.preventDefault();
        const intermediateItem = target.closest('.intermediate-ingredient-item') as HTMLElement;
        const stepElement = target.closest('.step-edit-item') as HTMLElement;
        this.removeIntermediateIngredient(intermediateItem, stepElement);
      }
    });

    // Update intermediate ingredient data on input
    document.addEventListener('input', (e: Event) => {
      const target = e.target as HTMLInputElement;
      if (target?.classList.contains('intermediate-name-input') || target?.classList.contains('intermediate-description-input')) {
        const stepElement = target.closest('.step-edit-item') as HTMLElement;
        this.updateIntermediateIngredientData(stepElement);
      }
    });
  }

  addIntermediateIngredient(stepElement: HTMLElement): void {
    if (!stepElement) return;

    const list = stepElement.querySelector('.intermediate-ingredients-list');
    if (!list) return;

    const newId = 'intermediate-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
    
    const itemDiv = document.createElement('div');
    itemDiv.className = 'intermediate-ingredient-item flex items-center space-x-2 p-2 bg-teal-50 dark:bg-teal-900/20 rounded border';
    itemDiv.dataset.intermediateId = newId;
    
    itemDiv.innerHTML = `
      <input 
        type="text" 
        value=""
        placeholder="Name der Zwischenzutat"
        class="intermediate-name-input flex-1 px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-teal-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
      />
      <input 
        type="text" 
        value=""
        placeholder="Beschreibung (optional)"
        class="intermediate-description-input flex-1 px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-teal-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
      />
      <button 
        type="button" 
        class="remove-intermediate-btn text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 transition-colors"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
        </svg>
      </button>
    `;

    list.appendChild(itemDiv);
    
    // Focus on the name input
    const nameInput = itemDiv.querySelector('.intermediate-name-input') as HTMLInputElement;
    if (nameInput) {
      nameInput.focus();
    }

    this.updateIntermediateIngredientData(stepElement);
  }

  removeIntermediateIngredient(intermediateItem: HTMLElement, stepElement: HTMLElement): void {
    if (!intermediateItem || !stepElement) return;

    intermediateItem.remove();
    this.updateIntermediateIngredientData(stepElement);
  }

  updateIntermediateIngredientData(stepElement: HTMLElement): void {
    if (!stepElement || !this.recipe) return;

    const stepId = stepElement.dataset.stepId;
    if (!stepId) return;

    const intermediateItems = stepElement.querySelectorAll('.intermediate-ingredient-item');
    const intermediateIngredients: IntermediateIngredient[] = [];

    intermediateItems.forEach((item: Element) => {
      const nameInput = item.querySelector('.intermediate-name-input') as HTMLInputElement;
      const descriptionInput = item.querySelector('.intermediate-description-input') as HTMLInputElement;
      const intermediateId = (item as HTMLElement).dataset.intermediateId;

      const name = nameInput?.value.trim();
      if (name && intermediateId) {
        intermediateIngredients.push({
          id: intermediateId,
          name: name,
          description: descriptionInput?.value.trim() || undefined
        });
      }
    });

    // Update recipe data
    this.recipe.preparationGroups.forEach((group: any) => {
      group.steps.forEach((step: any) => {
        if (step.id === stepId) {
          step.intermediateIngredients = intermediateIngredients;
        }
      });
    });

    // Update global recipe object
    window.currentRecipe = this.recipe;
  }

  getAllIntermediateIngredientsForStep(currentStepId: string): IntermediateIngredient[] {
    if (!this.recipe) return [];

    const allIntermediates: IntermediateIngredient[] = [];
    
    // Collect all intermediate ingredients from all steps (except current step)
    for (const group of this.recipe.preparationGroups) {
      for (const step of group.steps) {
        if (step.id && step.id !== currentStepId && step.intermediateIngredients) {
          allIntermediates.push(...step.intermediateIngredients);
        }
      }
    }

    return allIntermediates;
  }
}

class IngredientLinker {
  private currentStepElement: HTMLElement | null = null;
  private currentStepId: string | null = null;
  private recipe: Recipe | null = null;
  private linkedIngredients = new Map<string, LinkedIngredient[]>(); // stepId -> linkedIngredients array

  constructor() {
    this.init();
  }

  init(): void {
    // Get recipe data from page context
    if (window.currentRecipe) {
      this.recipe = window.currentRecipe;
      this.loadExistingLinks();
    }
    
    this.bindEvents();
    
    // Also listen for edit mode changes to refresh displays
    this.setupEditModeListener();
  }

  setupEditModeListener(): void {
    // Watch for edit mode activation to refresh displays
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          const editContent = document.getElementById('edit-content');
          if (editContent && !editContent.classList.contains('hidden')) {
            // Edit mode activated, refresh all displays after a short delay
            setTimeout(() => {
              this.refreshAllDisplays();
            }, 200);
          }
        }
      });
    });
    
    const editContent = document.getElementById('edit-content');
    if (editContent) {
      observer.observe(editContent, { attributes: true });
    }
  }

  refreshAllDisplays(): void {
    // Refresh all step displays with current linked ingredients
    this.linkedIngredients.forEach((links, stepId) => {
      const stepElement = document.querySelector(`[data-step-id="${stepId}"]`) as HTMLElement;
      if (stepElement) {
        this.updateStepDisplay(stepElement, stepId);
      }
    });
  }

  loadExistingLinks(): void {
    // Load existing ingredient links from recipe data
    if (this.recipe) {
      this.recipe.preparationGroups.forEach((group: any) => {
        group.steps.forEach((step: any) => {
          if (step.text && step.linkedIngredients && step.linkedIngredients.length > 0) {
            this.linkedIngredients.set(step.id, step.linkedIngredients);
            
            // Also update the display if the step element exists
            setTimeout(() => {
              const stepElement = document.querySelector(`[data-step-id="${step.id}"]`) as HTMLElement;
              if (stepElement) {
                this.updateStepDisplay(stepElement, step.id);
              }
            }, 100);
          }
        });
      });
    }
  }

  bindEvents(): void {
    // Auto-link button click events
    document.addEventListener('click', (e: Event) => {
      const target = e.target as HTMLElement;
      if (target?.closest('.auto-link-btn')) {
        e.preventDefault();
        const stepElement = target.closest('.step-edit-item') as HTMLElement;
        this.autoLinkIngredients(stepElement);
      }
    });

    // Manual link button click events
    document.addEventListener('click', (e: Event) => {
      const target = e.target as HTMLElement;
      if (target?.closest('.manual-link-btn')) {
        e.preventDefault();
        const stepElement = target.closest('.step-edit-item') as HTMLElement;
        this.openManualLinkModal(stepElement);
      }
    });

    // Modal event handlers
    const modal = document.getElementById('ingredient-link-modal');
    const cancelBtn = document.getElementById('cancel-link-modal');
    const cancelBtn2 = document.getElementById('cancel-link-modal-2');
    const saveBtn = document.getElementById('save-link-modal');

    if (cancelBtn) {
      cancelBtn.addEventListener('click', () => this.closeModal());
    }

    if (cancelBtn2) {
      cancelBtn2.addEventListener('click', () => this.closeModal());
    }

    if (saveBtn) {
      saveBtn.addEventListener('click', () => this.saveManualLinks());
    }

    // Close modal on outside click
    if (modal) {
      modal.addEventListener('click', (e: Event) => {
        if (e.target === modal) {
          this.closeModal();
        }
      });
    }
  }



  // Enhanced autoLinkIngredients to include intermediate ingredients
  autoLinkIngredients(stepElement: HTMLElement): void {
    if (!this.recipe || !stepElement) return;

    const stepId = stepElement.dataset.stepId;
    const textArea = stepElement.querySelector('.step-text-input') as HTMLTextAreaElement;
    if (!textArea || !stepId) return;

    const stepText = textArea.value.toLowerCase();
    const ingredientGroups = this.getAllIngredientGroups();
    const allIngredients = ingredientGroups.flatMap(group => group.ingredients);
    const allIntermediates = window.intermediateIngredientManager?.getAllIntermediateIngredientsForStep(stepId) || [];
    const linkedIngredients: LinkedIngredient[] = [];

    // Link regular ingredients
    allIngredients.forEach((ingredient: any) => {
      if (this.shouldLinkIngredient(stepText, ingredient.name)) {
        linkedIngredients.push({
          ingredientId: ingredient.id,
          selectedQuantityIndex: 0,
          isIntermediate: false
        });
      }
    });

    // Link intermediate ingredients
    allIntermediates.forEach((intermediate: IntermediateIngredient) => {
      if (this.shouldLinkIngredient(stepText, intermediate.name)) {
        linkedIngredients.push({
          ingredientId: intermediate.id,
          selectedQuantityIndex: 0,
          isIntermediate: true
        });
      }
    });

    // Update the linked ingredients for this step
    this.linkedIngredients.set(stepId, linkedIngredients);
    this.updateStepDisplay(stepElement, stepId);
    this.updateRecipeData();
    
    // Show success message
    this.showNotification(`${linkedIngredients.length} Zutaten/Zwischenzutaten automatisch verlinkt!`, 'success');
  }

  private shouldLinkIngredient(stepText: string, ingredientName: string): boolean {
    const lowerIngredientName = ingredientName.toLowerCase();
    
    // Simple but effective matching
    return stepText.includes(lowerIngredientName) ||
           this.findPartialMatch(stepText, lowerIngredientName);
  }

  findPartialMatch(text: string, ingredient: string): boolean {
    // Simple partial matching for now
    const words = text.split(/\s+/);
    return words.some(word => {
      const cleanWord = word.replace(/[.,!?;:()]/g, '');
      return cleanWord.length >= 3 && ingredient.length >= 3 && 
             (cleanWord.includes(ingredient) || ingredient.includes(cleanWord));
    });
  }

  showNotification(message: string, type: string = 'info'): void {
    // Simple notification system
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg shadow-lg text-white ${
      type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500'
    }`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }

  getAllIngredientGroups(): Array<{id: string, title?: string, ingredients: Array<any>}> {
    // Read current ingredient groups from DOM
    const ingredientGroups: Array<{id: string, title?: string, ingredients: Array<any>}> = [];
    
    // Get all ingredient group elements from the DOM
    const groupElements = document.querySelectorAll('.ingredient-group-edit');
    
    groupElements.forEach((groupElement: Element) => {
      const titleInput = groupElement.querySelector('.group-title-input') as HTMLInputElement;
      const isDefaultGroup = (groupElement as HTMLElement).classList.contains('default-group');
      const groupId = (groupElement as HTMLElement).dataset.groupId;
      
      // Get group title
      const groupTitle = isDefaultGroup ? undefined : (titleInput?.value.trim() || undefined);
      
      // Collect ingredients from this group
      const ingredients: Array<any> = [];
      const ingredientElements = groupElement.querySelectorAll('.ingredient-edit-item');
      
      ingredientElements.forEach((ingredientElement: Element) => {
        const nameInput = ingredientElement.querySelector('input[type="text"]') as HTMLInputElement;
        const descriptionInput = ingredientElement.querySelector('.ingredient-description-input') as HTMLInputElement;
        const amountInput = ingredientElement.querySelector('input[type="number"]') as HTMLInputElement;
        const unitSelect = ingredientElement.querySelector('select') as HTMLSelectElement;
        const ingredientId = (ingredientElement as HTMLElement).dataset.ingredientId;
        
        const name = nameInput?.value.trim();
        const description = descriptionInput?.value.trim();
        const amount = parseFloat(amountInput?.value) || 0;
        const unit = unitSelect?.value || '';
        
        // Only include ingredients with a name and id
        if (name && ingredientId) {
          ingredients.push({
            id: ingredientId,
            name: name,
            description: description || undefined,
            quantities: [{
              amount: amount,
              unit: unit
            }]
          });
        }
      });
      
      // Add group if it has ingredients
      if (ingredients.length > 0) {
        ingredientGroups.push({
          id: groupId || 'default',
          title: groupTitle,
          ingredients: ingredients
        });
      }
    });
    
    // If no groups found in DOM, fallback to recipe data
    if (ingredientGroups.length === 0 && this.recipe) {
      return this.recipe.ingredientGroups.map((group: any) => ({
        id: group.id,
        title: group.title,
        ingredients: group.ingredients.filter((item: any) => item.id && item.name)
      }));
    }
    
    return ingredientGroups;
  }

  openManualLinkModal(stepElement: HTMLElement): void {
    if (!this.recipe || !stepElement) return;

    this.currentStepElement = stepElement;
    this.currentStepId = stepElement.dataset.stepId || null;
    
    const modal = document.getElementById('ingredient-link-modal');
    const modalContent = document.getElementById('ingredient-link-modal-content');
    const regularIngredientList = document.getElementById('regular-ingredient-list');
    const intermediateIngredientList = document.getElementById('intermediate-ingredient-list');
    
    console.log('Modal elements found:', { modal: !!modal, modalContent: !!modalContent, regularList: !!regularIngredientList, intermediateList: !!intermediateIngredientList });
    
    if (!modal || !modalContent || !regularIngredientList || !intermediateIngredientList || !this.currentStepId) return;

    // Get current linked ingredients for this step
    const currentLinks = this.linkedIngredients.get(this.currentStepId) || [];

    // Debug: Log DOM structure
    console.log('Looking for ingredient groups...');
    const groupElements = document.querySelectorAll('.ingredient-group-edit');
    console.log('Found group elements:', groupElements.length);

    // Populate regular ingredient list with groups
    const ingredientGroups = this.getAllIngredientGroups();
    console.log('Ingredient groups found:', ingredientGroups.length, ingredientGroups);
    
    regularIngredientList.innerHTML = '';

    if (ingredientGroups.length === 0) {
      regularIngredientList.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400 text-center py-4">Keine Zutaten verfügbar</p>';
    } else {
      ingredientGroups.forEach((group) => {
        if (group.ingredients.length === 0) return;
        
        // Create group header
        const groupHeader = document.createElement('div');
        groupHeader.className = 'mb-3';
        groupHeader.innerHTML = `
          <h5 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2 border-b border-gray-200 dark:border-gray-600 pb-1">
            ${group.title || 'Zutaten (ungruppiert)'}
          </h5>
        `;
        regularIngredientList.appendChild(groupHeader);

        // Add ingredients for this group
        group.ingredients.forEach((ingredient: any) => {
          const currentLink = currentLinks.find((link: LinkedIngredient) => link.ingredientId === ingredient.id && !link.isIntermediate);
          const isLinked = !!currentLink;
          
          const ingredientDiv = document.createElement('div');
          ingredientDiv.className = 'flex items-center space-x-3 p-2 border border-gray-200 dark:border-gray-600 rounded mb-2 ml-2';
          
          ingredientDiv.innerHTML = `
            <input type="checkbox" 
                   id="regular-ingredient-${ingredient.id}" 
                   ${isLinked ? 'checked' : ''} 
                   class="ingredient-checkbox"
                   data-ingredient-id="${ingredient.id}"
                   data-is-intermediate="false">
            <label for="regular-ingredient-${ingredient.id}" class="flex-1 text-sm text-gray-900 dark:text-white">
              ${ingredient.name}
              ${ingredient.description ? `<span class="text-xs text-gray-500 dark:text-gray-400 block">${ingredient.description}</span>` : ''}
            </label>
            <select class="quantity-select text-xs border border-gray-300 dark:border-gray-600 rounded px-2 py-1 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
                    data-ingredient-id="${ingredient.id}" 
                    ${!isLinked ? 'disabled' : ''}>
              ${ingredient.quantities.map((quantity: any, index: number) => 
                `<option value="${index}" ${currentLink && currentLink.selectedQuantityIndex === index ? 'selected' : ''}>
                  ${quantity.amount} ${quantity.unit}
                </option>`
              ).join('')}
            </select>
          `;

          // Add event listener for checkbox
          const checkbox = ingredientDiv.querySelector('.ingredient-checkbox') as HTMLInputElement;
          const select = ingredientDiv.querySelector('.quantity-select') as HTMLSelectElement;
          
          if (checkbox && select) {
            checkbox.addEventListener('change', () => {
              select.disabled = !checkbox.checked;
            });
          }

          regularIngredientList.appendChild(ingredientDiv);
        });
      });
    }

    // Populate intermediate ingredient list
    const allIntermediates = window.intermediateIngredientManager?.getAllIntermediateIngredientsForStep(this.currentStepId) || [];
    intermediateIngredientList.innerHTML = '';

    if (allIntermediates.length === 0) {
      intermediateIngredientList.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400 text-center py-4">Keine Zwischenzutaten aus vorherigen Schritten verfügbar</p>';
    } else {
      // Group intermediate ingredients by their originating step
      const intermediatesByStep = new Map<string, Array<IntermediateIngredient>>();
      
      // Find which step each intermediate comes from
      if (this.recipe) {
        this.recipe.preparationGroups.forEach((group: any) => {
          group.steps.forEach((step: any, stepIndex: number) => {
            if (step.id && step.id !== this.currentStepId && step.intermediateIngredients) {
              step.intermediateIngredients.forEach((intermediate: IntermediateIngredient) => {
                if (allIntermediates.some(int => int.id === intermediate.id)) {
                  const stepKey = `Schritt ${stepIndex + 1}`;
                  if (!intermediatesByStep.has(stepKey)) {
                    intermediatesByStep.set(stepKey, []);
                  }
                  intermediatesByStep.get(stepKey)!.push(intermediate);
                }
              });
            }
          });
        });
      }

      // Create grouped display
      intermediatesByStep.forEach((intermediates, stepName) => {
        // Create group header
        const groupHeader = document.createElement('div');
        groupHeader.className = 'mb-3';
        groupHeader.innerHTML = `
          <h5 class="text-sm font-medium text-purple-600 dark:text-purple-400 mb-2 border-b border-purple-200 dark:border-purple-600 pb-1">
            Zwischenzutaten aus ${stepName}
          </h5>
        `;
        intermediateIngredientList.appendChild(groupHeader);

        intermediates.forEach((intermediate: IntermediateIngredient) => {
          const currentLink = currentLinks.find((link: LinkedIngredient) => link.ingredientId === intermediate.id && link.isIntermediate);
          const isLinked = !!currentLink;
          
          const intermediateDiv = document.createElement('div');
          intermediateDiv.className = 'flex items-center space-x-3 p-2 border border-purple-200 dark:border-purple-600 rounded bg-purple-50 dark:bg-purple-900/20 mb-2 ml-2';
          
          intermediateDiv.innerHTML = `
            <input type="checkbox" 
                   id="intermediate-ingredient-${intermediate.id}" 
                   ${isLinked ? 'checked' : ''} 
                   class="ingredient-checkbox"
                   data-ingredient-id="${intermediate.id}"
                   data-is-intermediate="true">
            <label for="intermediate-ingredient-${intermediate.id}" class="flex-1 text-sm text-gray-900 dark:text-white">
              ${intermediate.name}
              ${intermediate.description ? `<span class="text-xs text-gray-500 dark:text-gray-400 block">${intermediate.description}</span>` : ''}
            </label>
          `;

          intermediateIngredientList.appendChild(intermediateDiv);
        });
      });
    }

    // Show modal
    modal.classList.remove('hidden');
    modalContent.classList.remove('hidden');
  }

  closeModal(): void {
    const modal = document.getElementById('ingredient-link-modal');
    const modalContent = document.getElementById('ingredient-link-modal-content');
    if (modal) {
      modal.classList.add('hidden');
    }
    if (modalContent) {
      modalContent.classList.add('hidden');
    }
    this.currentStepElement = null;
    this.currentStepId = null;
  }

  saveManualLinks(): void {
    if (!this.currentStepId) return;

    const regularIngredientList = document.getElementById('regular-ingredient-list');
    const intermediateIngredientList = document.getElementById('intermediate-ingredient-list');
    if (!regularIngredientList || !intermediateIngredientList) return;
    
    const linkedIngredients: LinkedIngredient[] = [];

    // Process regular ingredients
    const regularCheckboxes = regularIngredientList.querySelectorAll('.ingredient-checkbox:checked') as NodeListOf<HTMLInputElement>;
    regularCheckboxes.forEach((checkbox: HTMLInputElement) => {
      const ingredientId = checkbox.dataset.ingredientId;
      if (!ingredientId) return;
      
      const select = regularIngredientList.querySelector(`.quantity-select[data-ingredient-id="${ingredientId}"]`) as HTMLSelectElement;
      if (!select) return;
      
      const selectedQuantityIndex = parseInt(select.value);

      linkedIngredients.push({
        ingredientId,
        selectedQuantityIndex,
        isIntermediate: false
      });
    });

    // Process intermediate ingredients
    const intermediateCheckboxes = intermediateIngredientList.querySelectorAll('.ingredient-checkbox:checked') as NodeListOf<HTMLInputElement>;
    intermediateCheckboxes.forEach((checkbox: HTMLInputElement) => {
      const ingredientId = checkbox.dataset.ingredientId;
      if (!ingredientId) return;

      linkedIngredients.push({
        ingredientId,
        selectedQuantityIndex: 0, // No quantities for intermediate ingredients
        isIntermediate: true
      });
    });

    // Update the linked ingredients for this step
    this.linkedIngredients.set(this.currentStepId, linkedIngredients);
    if (this.currentStepElement) {
      this.updateStepDisplay(this.currentStepElement, this.currentStepId);
    }
    this.updateRecipeData();
    this.closeModal();
    
    this.showNotification(`${linkedIngredients.length} Zutaten/Zwischenzutaten manuell verlinkt!`, 'success');
  }

  updateStepDisplay(stepElement: HTMLElement, stepId: string): void {
    const displayContainer = stepElement.querySelector('.linked-ingredients-display');
    if (!displayContainer) return;

    const linkedIngredients = this.linkedIngredients.get(stepId) || [];
    const ingredientGroups = this.getAllIngredientGroups();
    const allIngredients = ingredientGroups.flatMap(group => group.ingredients);
    const allIntermediates = window.intermediateIngredientManager?.getAllIntermediateIngredientsForStep(stepId) || [];

    if (linkedIngredients.length === 0) {
      displayContainer.innerHTML = '';
      return;
    }

    const tagsHtml = linkedIngredients.map((link: LinkedIngredient) => {
      if (link.isIntermediate) {
        // Find the intermediate ingredient
        const intermediate = allIntermediates.find((int: IntermediateIngredient) => int.id === link.ingredientId);
        if (!intermediate) return '';
        
        return `
          <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200">
            ${intermediate.name} (Zwischenzutat)
            <button type="button" class="ml-1 text-purple-600 hover:text-purple-800" onclick="window.ingredientLinker.removeIngredientLink('${stepId}', '${link.ingredientId}')">
              ×
            </button>
          </span>
        `;
      } else {
        // Regular ingredient
        const ingredient = allIngredients.find((ing: any) => ing.id === link.ingredientId);
        if (!ingredient) return '';
        
        const quantity = ingredient.quantities[link.selectedQuantityIndex];
        return `
          <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
            ${ingredient.name} (${quantity.amount} ${quantity.unit})
            <button type="button" class="ml-1 text-blue-600 hover:text-blue-800" onclick="window.ingredientLinker.removeIngredientLink('${stepId}', '${link.ingredientId}')">
              ×
            </button>
          </span>
        `;
      }
    }).filter(html => html !== '').join('');

    displayContainer.innerHTML = `
      <div class="flex flex-wrap gap-2 mb-2">
        ${tagsHtml}
      </div>
    `;
  }

  removeIngredientLink(stepId: string, ingredientId: string): void {
    const currentLinks = this.linkedIngredients.get(stepId) || [];
    const updatedLinks = currentLinks.filter((link: LinkedIngredient) => link.ingredientId !== ingredientId);
    
    this.linkedIngredients.set(stepId, updatedLinks);
    
    const stepElement = document.querySelector(`[data-step-id="${stepId}"]`) as HTMLElement;
    if (stepElement) {
      this.updateStepDisplay(stepElement, stepId);
      this.updateRecipeData();
    }
  }

  updateRecipeData(): void {
    if (!this.recipe) return;

    // Update the recipe object with current linked ingredients
    this.recipe.preparationGroups.forEach((group: any) => {
      group.steps.forEach((step: any) => {
        if (step.text && step.id) {
          const linkedIngredients = this.linkedIngredients.get(step.id);
          if (linkedIngredients) {
            step.linkedIngredients = linkedIngredients;
          }
        }
      });
    });

    // Update the global recipe object
    window.currentRecipe = this.recipe;
  }

  // Export function to save recipe with linked ingredients
  getUpdatedRecipe(): Recipe | null {
    this.updateRecipeData();
    return this.recipe;
  }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  window.intermediateIngredientManager = new IntermediateIngredientManager();
  window.ingredientLinker = new IngredientLinker();
  
  // Set up modal event handlers
  const cancelBtn = document.getElementById('cancel-link-modal');
  const cancelBtn2 = document.getElementById('cancel-link-modal-2');
  const saveBtn = document.getElementById('save-link-modal');
  
  if (cancelBtn) {
    cancelBtn.addEventListener('click', () => {
      window.ingredientLinker.closeModal();
    });
  }
  
  if (cancelBtn2) {
    cancelBtn2.addEventListener('click', () => {
      window.ingredientLinker.closeModal();
    });
  }
  
  if (saveBtn) {
    saveBtn.addEventListener('click', () => {
      window.ingredientLinker.saveManualLinks();
    });
  }
  
  // Handle manual link button clicks
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    
    // Check if it's a manual link button or its child element
    const manualLinkBtn = target.closest('.manual-link-btn');
    if (manualLinkBtn) {
      e.preventDefault();
      const stepElement = manualLinkBtn.closest('.step-edit-item') as HTMLElement;
      if (stepElement) {
        window.ingredientLinker.openManualLinkModal(stepElement);
      }
    }
    
    // Check if it's an auto link button or its child element  
    const autoLinkBtn = target.closest('.auto-link-btn');
    if (autoLinkBtn) {
      e.preventDefault();
      const stepElement = autoLinkBtn.closest('.step-edit-item') as HTMLElement;
      if (stepElement) {
        window.ingredientLinker.autoLinkIngredients(stepElement);
      }
    }
  });
});

// Export for use in other scripts
window.IntermediateIngredientManager = IntermediateIngredientManager;
window.IngredientLinker = IngredientLinker;
</script> 
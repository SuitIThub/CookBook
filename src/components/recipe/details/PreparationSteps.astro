---
import type { Recipe, PreparationStep } from '../../../types/recipe';

interface Props {
  recipe: Recipe;
}

const { recipe } = Astro.props;
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 transition-colors duration-200">
  <div class="p-6">
    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4 flex items-center">
      <svg class="w-6 h-6 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"/>
      </svg>
      Zubereitung
    </h2>
    
    <div class="space-y-4">
      {/* First show ungrouped steps */}
      {recipe.preparationGroups.filter(group => !group.title).map((group) => (
        <ol class="space-y-4">
          {group.steps.map((step, index) => (
            'text' in step ? (
              <li class="flex space-x-4">
                <div class="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                  {index + 1}
                </div>
                <div class="flex-1">
                  <p class="text-gray-900 dark:text-white leading-relaxed" set:html={(step as PreparationStep).text.replace(
                    /(\d+(?:[-–]\d+)?\s*(?:Minuten?|Min\.?|Stunden?|Std\.?))/gi,
                    '<button class="timer-trigger text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 underline font-medium" data-time="$1">$1</button>'
                  )}></p>
                </div>
              </li>
            ) : null
          ))}
        </ol>
      ))}
      
      {/* Then show grouped steps */}
      {recipe.preparationGroups.filter(group => group.title).map((group) => (
        <div>
          <h3 class="font-semibold text-gray-800 dark:text-gray-200 mb-3 border-b border-gray-200 dark:border-gray-600 pb-1">
            {group.title}
          </h3>
          <ol class="space-y-4">
            {group.steps.map((step, index) => (
              'text' in step ? (
                <li class="flex space-x-4">
                  <div class="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                    {index + 1}
                  </div>
                  <div class="flex-1">
                    <p class="text-gray-900 dark:text-white leading-relaxed" set:html={(step as PreparationStep).text.replace(
                      /(\d+(?:[-–]\d+)?\s*(?:Minuten?|Min\.?|Stunden?|Std\.?))/gi,
                      '<button class="timer-trigger text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 underline font-medium" data-time="$1">$1</button>'
                    )}></p>
                  </div>
                </li>
              ) : null
            ))}
          </ol>
        </div>
      ))}
    </div>
  </div>
</div> 
---
import type { Recipe, PreparationStep } from '../../../types/recipe';

interface Props {
  recipe: Recipe;
}

const { recipe } = Astro.props;

// Helper function to get all ingredients from the recipe
function getAllIngredients(recipe: Recipe) {
  return recipe.ingredientGroups.flatMap(group => 
    group.ingredients.filter(item => 'id' in item && 'name' in item)
  );
}

// Helper function to track used ingredients across steps
function getUsedIngredients(preparationGroups: any[], currentStepIndex: number) {
  const usedIngredients = new Set<string>();
  let stepCounter = 0;
  
  for (const group of preparationGroups) {
    for (const step of group.steps) {
      if ('text' in step && stepCounter < currentStepIndex) {
        if (step.linkedIngredients) {
          step.linkedIngredients.forEach((link: any) => {
            usedIngredients.add(link.ingredientId);
          });
        }
      }
      stepCounter++;
    }
  }
  
  return usedIngredients;
}

// Helper function to calculate the global step index
function calculateGlobalStepIndex(preparationGroups: any[], targetGroupIndex: number, targetStepIndex: number) {
  let globalIndex = 0;
  
  for (let groupIndex = 0; groupIndex < preparationGroups.length; groupIndex++) {
    const group = preparationGroups[groupIndex];
    
    if (groupIndex < targetGroupIndex) {
      // Add all steps from previous groups
      globalIndex += group.steps.filter((step: any) => 'text' in step).length;
    } else if (groupIndex === targetGroupIndex) {
      // Add steps from current group up to target step
      globalIndex += targetStepIndex;
      break;
    }
  }
  
  return globalIndex;
}
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 transition-colors duration-200">
  <div class="p-6">
    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4 flex items-center">
      <svg class="w-6 h-6 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"/>
      </svg>
      Zubereitung
    </h2>
    
    <div class="space-y-4">
      {/* First show ungrouped steps */}
      {recipe.preparationGroups.filter(group => !group.title).map((group, groupIndex) => {
        const ungroupedGroupIndex = recipe.preparationGroups.findIndex(g => g === group);
        
        return (
          <ol class="space-y-4">
            {group.steps.map((step, index) => {
              if (!('text' in step)) return null;
              const preparationStep = step as PreparationStep;
              const allIngredients = getAllIngredients(recipe);
              const globalStepIndex = calculateGlobalStepIndex(recipe.preparationGroups, ungroupedGroupIndex, index);
              const usedIngredients = getUsedIngredients(recipe.preparationGroups, globalStepIndex);
              const stepId = `ungrouped-${index}`;
              
              return (
                <li class="flex space-x-4" id={`step-${stepId}`}>
                  <div class="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                    {index + 1}
                  </div>
                  <div class="flex-1">
                    <p class="text-gray-900 dark:text-white leading-relaxed mb-2" set:html={preparationStep.text.replace(
                      /(\d+(?:[-–]\d+)?\s*(?:Minuten?|Min\.?|Stunden?|Std\.?))/gi,
                      `<button class="timer-trigger text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 underline font-medium" data-time="$1" data-recipe-name="${recipe.title}" data-step-description="${preparationStep.text.replace(/"/g, '&quot;').replace(/\n/g, ' ').replace(/\s+/g, ' ').trim()}" data-step-id="${stepId}">$1</button>`
                    )}></p>
                    
                    {/* Linked Ingredients Tags */}
                    {preparationStep.linkedIngredients && preparationStep.linkedIngredients.length > 0 && (
                      <div class="flex flex-wrap gap-2 mt-2">
                        {preparationStep.linkedIngredients.map((link) => {
                          const ingredient = allIngredients.find(ing => ing.id === link.ingredientId);
                          if (!ingredient || !('name' in ingredient)) return null;
                          const quantity = ingredient.quantities[link.selectedQuantityIndex];
                          const wasUsedBefore = usedIngredients.has(link.ingredientId);
                          
                          return (
                            <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                              wasUsedBefore 
                                ? 'bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-200' 
                                : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                            }`}>
                              {ingredient.name} ({quantity.amount} {quantity.unit})
                            </span>
                          );
                        })}
                      </div>
                    )}
                  </div>
                </li>
              );
            })}
          </ol>
        );
      })}
      
      {/* Then show grouped steps */}
      {recipe.preparationGroups.filter(group => group.title).map((group) => {
        const groupedGroupIndex = recipe.preparationGroups.findIndex(g => g === group);
        
        return (
          <div>
            <h3 class="font-semibold text-gray-800 dark:text-gray-200 mb-3 border-b border-gray-200 dark:border-gray-600 pb-1">
              {group.title}
            </h3>
            <ol class="space-y-4">
              {group.steps.map((step, index) => {
                if (!('text' in step)) return null;
                const preparationStep = step as PreparationStep;
                const allIngredients = getAllIngredients(recipe);
                const globalStepIndex = calculateGlobalStepIndex(recipe.preparationGroups, groupedGroupIndex, index);
                const usedIngredients = getUsedIngredients(recipe.preparationGroups, globalStepIndex);
                const stepId = `${group.title?.toLowerCase().replace(/\s+/g, '-') || 'group'}-${index}`;
                
                return (
                  <li class="flex space-x-4" id={`step-${stepId}`}>
                    <div class="flex-shrink-0 w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                      {index + 1}
                    </div>
                    <div class="flex-1">
                      <p class="text-gray-900 dark:text-white leading-relaxed mb-2" set:html={preparationStep.text.replace(
                        /(\d+(?:[-–]\d+)?\s*(?:Minuten?|Min\.?|Stunden?|Std\.?))/gi,
                        `<button class="timer-trigger text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 underline font-medium" data-time="$1" data-recipe-name="${recipe.title}" data-step-description="${preparationStep.text.replace(/"/g, '&quot;').replace(/\n/g, ' ').replace(/\s+/g, ' ').trim()}" data-step-id="${stepId}">$1</button>`
                      )}></p>
                      
                      {/* Linked Ingredients Tags */}
                      {preparationStep.linkedIngredients && preparationStep.linkedIngredients.length > 0 && (
                        <div class="flex flex-wrap gap-2 mt-2">
                          {preparationStep.linkedIngredients.map((link) => {
                            const ingredient = allIngredients.find(ing => ing.id === link.ingredientId);
                            if (!ingredient || !('name' in ingredient)) return null;
                            const quantity = ingredient.quantities[link.selectedQuantityIndex];
                            const wasUsedBefore = usedIngredients.has(link.ingredientId);
                            
                            return (
                              <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                                wasUsedBefore 
                                  ? 'bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-200' 
                                  : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                              }`}>
                                {ingredient.name} ({quantity.amount} {quantity.unit})
                              </span>
                            );
                          })}
                        </div>
                      )}
                    </div>
                  </li>
                );
              })}
            </ol>
          </div>
        );
      })}
    </div>
  </div>
</div> 
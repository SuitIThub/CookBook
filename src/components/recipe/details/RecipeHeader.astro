---
import type { Recipe } from '../../../types/recipe';
import NutritionInfo from './NutritionInfo.astro';

interface Props {
  recipe: Recipe;
}

const { recipe } = Astro.props;

// Helper function to format time
function formatTime(minutes: number): string {
  if (minutes < 60) {
    return `${minutes} Min`;
  }
  
  const hours = Math.floor(minutes / 60);
  const remainingMinutes = minutes % 60;
  
  if (remainingMinutes === 0) {
    return `${hours} Std`;
  }
  
  return `${hours} Std ${remainingMinutes} Min`;
}

// Helper function to calculate total time
function getTotalTime(timeEntries: any[]): number {
  return timeEntries.reduce((total, entry) => total + entry.minutes, 0);
}
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-6 overflow-hidden transition-colors duration-200">
  <div class="p-6">
    <!-- Desktop layout -->
    <div class="hidden landscape:flex justify-between items-start mb-4">
      <div class="flex-1 pr-6">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">{recipe.title}</h1>
        {recipe.subtitle && (
          <p class="text-xl text-gray-700 dark:text-gray-300 mb-3">{recipe.subtitle}</p>
        )}
        {recipe.description && (
          <p class="text-gray-600 dark:text-gray-400 leading-relaxed whitespace-pre-wrap">{recipe.description}</p>
        )}
      </div>
      <div class="flex flex-col space-y-2 flex-shrink-0 min-w-fit">
        <button id="edit-btn" class="flex items-center space-x-2 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md text-sm font-medium transition-colors whitespace-nowrap">
          <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
          </svg>
          <span>Bearbeiten</span>
        </button>
        <!-- Export dropdown -->
        <div id="export-container" class="relative flex-shrink-0">
          <button id="export-recipe-btn" class="flex items-center space-x-2 px-4 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-md text-sm font-medium transition-colors whitespace-nowrap w-full">
            <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
            </svg>
            <span class="flex-1 text-left">Exportieren</span>
            <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
            </svg>
          </button>
          <div id="export-recipe-menu" class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg border border-gray-200 dark:border-gray-700 hidden z-10">
            <div class="py-1">
              <button id="export-recipe-json" class="flex items-center w-full px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700" data-recipe-id={recipe.id}>
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                </svg>
                JSON (ohne Bilder)
              </button>
              <button id="export-recipe-rcb" class="flex items-center w-full px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700" data-recipe-id={recipe.id}>
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
                </svg>
                Vollständig (mit Bilder)
              </button>
            </div>
          </div>
        </div>
        <button id="add-to-shopping" class="flex items-center space-x-2 px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-md text-sm font-medium transition-colors whitespace-nowrap">
          <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
          </svg>
          <span>Zur Einkaufsliste</span>
        </button>
        <!-- Save button (initially hidden) -->
        <button id="save-btn" class="hidden items-center space-x-2 px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-md text-sm font-medium transition-colors whitespace-nowrap">
          <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
          </svg>
          <span>Speichern</span>
        </button>
      </div>
    </div>

    <!-- Mobile layout -->
    <div class="portrait:block landscape:hidden mb-4">
      <!-- Title section -->
      <div class="mb-4">
        <h1 class="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white mb-2">{recipe.title}</h1>
        {recipe.subtitle && (
          <p class="text-lg sm:text-xl text-gray-700 dark:text-gray-300 mb-3">{recipe.subtitle}</p>
        )}
        {recipe.description && (
          <p class="text-gray-600 dark:text-gray-400 leading-relaxed text-sm sm:text-base whitespace-pre-wrap">{recipe.description}</p>
        )}
      </div>
      
      <!-- Action buttons - full width on mobile -->
      <div class="flex flex-col space-y-3 sm:flex-row sm:space-y-0 sm:space-x-3">
        <button id="edit-btn-mobile" class="flex items-center justify-center space-x-2 px-4 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-md text-sm font-medium transition-colors flex-1">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
          </svg>
          <span>Bearbeiten</span>
        </button>
        <!-- Export dropdown mobile -->
        <div id="export-container-mobile" class="relative flex-1">
          <button id="export-recipe-btn-mobile" class="flex items-center justify-center space-x-2 px-4 py-3 bg-purple-500 hover:bg-purple-600 text-white rounded-md text-sm font-medium transition-colors w-full">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
            </svg>
            <span>Exportieren</span>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
            </svg>
          </button>
          <div id="export-recipe-menu-mobile" class="absolute right-0 bottom-full mb-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 hidden z-10">
            <div class="py-1">
              <button id="export-recipe-json-mobile" class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-recipe-id={recipe.id}>
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                </svg>
                JSON (ohne Bilder)
              </button>
              <button id="export-recipe-rcb-mobile" class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" data-recipe-id={recipe.id}>
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
                </svg>
                Vollständig (mit Bildern)
              </button>
            </div>
          </div>
        </div>
        <button id="add-to-shopping-mobile" class="flex items-center justify-center space-x-2 px-4 py-3 bg-green-500 hover:bg-green-600 text-white rounded-md text-sm font-medium transition-colors flex-1">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
          </svg>
          <span>Zur Einkaufsliste</span>
        </button>
        <!-- Save button mobile (initially hidden) -->
        <button id="save-btn-mobile" class="hidden items-center justify-center space-x-2 px-4 py-3 bg-green-500 hover:bg-green-600 text-white rounded-md text-sm font-medium transition-colors flex-1">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
          </svg>
          <span>Speichern</span>
        </button>
      </div>
    </div>

    <!-- Nutrition Information -->
    {recipe.metadata.nutrition && (
      <NutritionInfo nutrition={recipe.metadata.nutrition} />
    )}

    <!-- Metadata -->
    <div class="grid grid-cols-1 portrait:grid-cols-2 landscape:grid-cols-4 gap-4 pt-4 border-t border-gray-200 dark:border-gray-600">
      {recipe.metadata.servings && (
        <div class="text-center">
          <div class="text-2xl font-bold text-orange-500 mb-2">
            <div class="flex items-center justify-center space-x-2">
              <button id="decrease-servings" class="w-8 h-8 rounded-full bg-orange-100 dark:bg-orange-900 text-orange-600 dark:text-orange-400 hover:bg-orange-200 dark:hover:bg-orange-800 flex items-center justify-center font-bold text-lg transition-colors">
                −
              </button>
              <span id="current-servings" data-original={recipe.metadata.servings}>{recipe.metadata.servings}</span>
              <button id="increase-servings" class="w-8 h-8 rounded-full bg-orange-100 dark:bg-orange-900 text-orange-600 dark:text-orange-400 hover:bg-orange-200 dark:hover:bg-orange-800 flex items-center justify-center font-bold text-lg transition-colors">
                +
              </button>
            </div>
            <button id="reset-servings" class="mt-2 text-xs text-orange-600 dark:text-orange-400 hover:text-orange-700 dark:hover:text-orange-300 underline transition-colors" style="display: none;">
              Zurücksetzen
            </button>
          </div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Portionen</div>
        </div>
      )}
      
      <!-- Individual Time Entries -->
      {recipe.metadata.timeEntries && recipe.metadata.timeEntries.length > 0 && (
        recipe.metadata.timeEntries.map((timeEntry) => (
          <div class="text-center">
            <div class="text-2xl font-bold text-blue-500">
              {formatTime(timeEntry.minutes)}
            </div>
            <div class="text-sm text-gray-600 dark:text-gray-400">{timeEntry.label}</div>
          </div>
        ))
      )}
      
      <!-- Total Time (only show if there are multiple time entries) -->
      {recipe.metadata.timeEntries && recipe.metadata.timeEntries.length > 1 && (
        <div class="text-center">
          <div class="text-2xl font-bold text-purple-500">
            {formatTime(getTotalTime(recipe.metadata.timeEntries))}
          </div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Gesamtzeit</div>
        </div>
      )}
      
      {recipe.metadata.difficulty && (
        <div class="text-center">
          <div class={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
            recipe.metadata.difficulty === 'leicht' ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200' :
            recipe.metadata.difficulty === 'mittel' ? 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200' :
            'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200'
          }`}>
            {recipe.metadata.difficulty}
          </div>
          <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">Schwierigkeit</div>
        </div>
      )}
    </div>
  </div>
</div>

<script>
  // Define the event type
  interface EditModeEvent extends Event {
    detail: {
      isEditMode: boolean;
    };
  }

  // Function to update button visibility based on edit mode
  function updateButtonVisibility(isEditMode: boolean) {
    // Desktop buttons
    const exportContainer = document.getElementById('export-container');
    const addToShoppingBtn = document.getElementById('add-to-shopping');
    const saveBtn = document.getElementById('save-btn');
    
    // Mobile buttons
    const exportContainerMobile = document.getElementById('export-container-mobile');
    const addToShoppingBtnMobile = document.getElementById('add-to-shopping-mobile');
    const saveBtnMobile = document.getElementById('save-btn-mobile');
    
    if (isEditMode) {
      // Hide export and shopping list buttons
      exportContainer?.classList.add('hidden');
      addToShoppingBtn?.classList.add('hidden');
      exportContainerMobile?.classList.add('hidden');
      addToShoppingBtnMobile?.classList.add('hidden');
      
      // Show save buttons
      saveBtn?.classList.remove('hidden');
      saveBtn?.classList.add('flex');
      saveBtnMobile?.classList.remove('hidden');
      saveBtnMobile?.classList.add('flex');
    } else {
      // Show export and shopping list buttons
      exportContainer?.classList.remove('hidden');
      addToShoppingBtn?.classList.remove('hidden');
      exportContainerMobile?.classList.remove('hidden');
      addToShoppingBtnMobile?.classList.remove('hidden');
      
      // Hide save buttons
      saveBtn?.classList.add('hidden');
      saveBtn?.classList.remove('flex');
      saveBtnMobile?.classList.add('hidden');
      saveBtnMobile?.classList.remove('flex');
    }
  }

  // Listen for edit mode changes
  document.addEventListener('editModeChanged', ((event: EditModeEvent) => {
    const isEditMode = event.detail.isEditMode;
    updateButtonVisibility(isEditMode);
  }) as EventListener);

  // Initial state check
  const viewContent = document.getElementById('view-content');
  const isInitiallyHidden = viewContent?.classList.contains('hidden') ?? false;
  updateButtonVisibility(isInitiallyHidden);
</script> 
<div class="cast-controls debug-border">
    <div id="cast-button-container" class="cast-button-wrapper debug-border">
        <google-cast-launcher id="castbutton" class="cast-button"></google-cast-launcher>
    </div>
    <div id="cast-debug" class="debug-info">Initializing...</div>
</div>

<script>
    // Type declarations for Cast API
    declare global {
        interface Window {
            __onGCastApiAvailable?: (isAvailable: boolean) => void;
            chrome?: {
                cast?: {
                    AutoJoinPolicy: {
                        ORIGIN_SCOPED: string;
                    };
                };
            };
            cast?: {
                framework: {
                    CastContext: {
                        getInstance(): {
                            setOptions(options: {
                                receiverApplicationId: string;
                                autoJoinPolicy: string;
                            }): void;
                        };
                    };
                };
                debug?: {
                    CastDebugLogger: {
                        getInstance(): {
                            setEnabled(enabled: boolean): void;
                            showDebugLogs(show: boolean): void;
                        };
                    };
                };
            };
        }
    }

    const RECEIVER_APP_ID = '3D0A6542';
    
    function updateDebugInfo(message: string) {
        const debugElement = document.getElementById('cast-debug');
        if (debugElement) {
            debugElement.textContent = message;
            console.log('CastManager:', message);
        }
    }

    class CastManager {
        private static instance: CastManager;
        private static RECEIVER_APP_ID = RECEIVER_APP_ID;

        private constructor() {
            console.log('CastManager: Constructor called');
        }

        public static getInstance(): CastManager {
            if (!CastManager.instance) {
                CastManager.instance = new CastManager();
            }
            return CastManager.instance;
        }

        private loadCastSDK(): Promise<void> {
            return new Promise((resolve, reject) => {
                if (window.__onGCastApiAvailable) {
                    console.log('CastManager: Cast API callback already registered');
                    return;
                }

                // Register the callback before loading the SDK
                window.__onGCastApiAvailable = (isAvailable: boolean) => {
                    if (isAvailable) {
                        console.log('CastManager: Cast API availability callback, isAvailable:', isAvailable);
                        this.initializeCastContext();
                        resolve();
                    } else {
                        const error = new Error('Cast API not available');
                        console.error('CastManager:', error);
                        reject(error);
                    }
                };

                // Load the Cast SDK
                const script = document.createElement('script');
                script.src = 'https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1';
                script.async = true;
                script.onerror = (error) => {
                    console.error('CastManager: Failed to load Cast SDK:', error);
                    reject(new Error('Failed to load Cast SDK'));
                };
                document.head.appendChild(script);
                console.log('CastManager: Cast SDK script added to document head');
            });
        }

        private initializeCastContext() {
            try {
                console.log('CastManager: Initializing Cast context');
                updateDebugInfo('Setting up Cast context...');

                // Initialize Cast API
                if (window.cast?.framework && window.chrome?.cast) {
                    const context = window.cast.framework.CastContext.getInstance();
                    context.setOptions({
                        receiverApplicationId: CastManager.RECEIVER_APP_ID,
                        autoJoinPolicy: window.chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED
                    });

                    // The framework handles the button visibility and functionality automatically
                    console.log('CastManager: Cast context initialized successfully');
                    updateDebugInfo('Cast ready');

                    // Enable debug logging if needed
                    if (window.location.search.includes('debug=true') && window.cast.debug) {
                        const castDebugLogger = window.cast.debug.CastDebugLogger.getInstance();
                        castDebugLogger.setEnabled(true);
                        castDebugLogger.showDebugLogs(true);
                        console.log('CastManager: Debug logging enabled');
                    }
                } else {
                    throw new Error('Cast API not available');
                }

            } catch (error: unknown) {
                console.error('CastManager: Error initializing Cast context:', error);
                updateDebugInfo('Error: ' + (error instanceof Error ? error.message : 'Unknown error'));
            }
        }

        public async initialize() {
            console.log('CastManager: Starting initialization...');
            updateDebugInfo('Loading Cast SDK...');
            
            try {
                await this.loadCastSDK();
                console.log('CastManager: Initialization complete');
            } catch (error) {
                console.error('CastManager: Initialization failed:', error);
                updateDebugInfo('Failed to initialize Cast');
            }
        }
    }

    // Initialize when the DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
        console.log('CastManager Script Starting...');
        const castManager = CastManager.getInstance();
        castManager.initialize();
    });
</script>

<style>
.cast-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    z-index: 100;
    position: relative;
    min-height: 40px;
    min-width: 40px;
    padding: 8px;
}

.cast-button-wrapper {
    width: 40px;
    height: 40px;
    position: relative;
    z-index: 101;
    min-height: 40px;
    min-width: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.cast-button {
    --connected-color: #f97316 !important;
    --disconnected-color: #666666 !important;
    cursor: pointer !important;
}

.debug-border {
    border: 1px dashed #f97316;
}

.debug-info {
    position: absolute;
    top: 100%;
    left: 0;
    white-space: nowrap;
    margin-top: 4px;
    padding: 2px 4px;
    background-color: rgba(255, 255, 255, 0.9);
    border: 1px solid #f97316;
    border-radius: 4px;
    font-size: 12px;
    color: #666666;
    z-index: 103;
}
</style> 
---
import DynamicModal from './DynamicModal.astro';

interface Props {
  id?: string;
}

const { id = 'notification-modal' } = Astro.props;
---

<DynamicModal id={id} size="md" />

<script>
  // Get modal ID from the DOM element
  const modalId = 'notification-modal';

  // Add TypeScript interface for window object
  declare global {
    interface Window {
      showInfo: (message: string, duration?: number) => Promise<void>;
      showSuccess: (message: string, duration?: number) => Promise<void>;
      showWarning: (message: string, duration?: number) => Promise<void>;
      showError: (message: string, duration?: number) => Promise<void>;
      showConfirm: (message: string, onConfirm?: () => void) => Promise<boolean>;
      showDeleteConfirm: (message: string) => Promise<boolean>;
      [key: string]: any; // For dynamic modal instances
    }
  }

  // Helper functions for common notification types
  
  window.showInfo = function(message: string, duration = 3000) {
    return showModal(`
      <div class="flex items-center">
        <svg class="w-6 h-6 text-blue-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        <span>${message}</span>
      </div>
    `, duration);
  };
  
  window.showSuccess = function(message: string, duration = 3000) {
    return showModal(`
      <div class="flex items-center">
        <svg class="w-6 h-6 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
        </svg>
        <span>${message}</span>
      </div>
    `, duration);
  };
  
  window.showWarning = function(message: string, duration = 3000) {
    return showModal(`
      <div class="flex items-center">
        <svg class="w-6 h-6 text-yellow-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
        </svg>
        <span>${message}</span>
      </div>
    `, duration);
  };
  
  window.showError = function(message: string, duration = 3000) {
    return showModal(`
      <div class="flex items-center">
        <svg class="w-6 h-6 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        <span>${message}</span>
      </div>
    `, duration);
  };
  
  window.showConfirm = function(message: string, onConfirm?: () => void) {
    return new Promise<boolean>((resolve) => {
      const modalInstance = window[`modal_${modalId}`];
      if (!modalInstance) {
        console.error('Modal instance not found');
        return resolve(false);
      }

      modalInstance.show({
        title: 'Bestätigung',
        content: message,
        buttons: [
          { 
            text: 'Abbrechen', 
            type: 'secondary', 
            action: () => {
              modalInstance.hide();
              resolve(false);
            }
          },
          { 
            text: 'Bestätigen', 
            type: 'primary', 
            action: () => {
              modalInstance.hide();
              if (onConfirm) onConfirm();
              resolve(true);
            }
          }
        ]
      });
    });
  };
  
  window.showDeleteConfirm = function(message: string) {
    return new Promise<boolean>((resolve) => {
      const modalInstance = window[`modal_${modalId}`];
      if (!modalInstance) {
        console.error('Modal instance not found');
        return resolve(false);
      }

      modalInstance.show({
        title: 'Löschen bestätigen',
        content: message,
        icon: `<svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
        </svg>`,
        buttons: [
          { 
            text: 'Abbrechen', 
            type: 'secondary', 
            action: () => {
              modalInstance.hide();
              resolve(false);
            }
          },
          { 
            text: 'Löschen', 
            type: 'danger', 
            action: () => {
              modalInstance.hide();
              resolve(true);
            }
          }
        ]
      });
    });
  };
  
  // Helper function for timed notifications
  function showModal(content: string, duration?: number) {
    return new Promise<void>((resolve) => {
      const modalInstance = window[`modal_${modalId}`];
      if (!modalInstance) {
        console.error('Modal instance not found');
        return resolve();
      }

      modalInstance.show({
        content,
        buttons: []
      });

      if (duration) {
        setTimeout(() => {
          modalInstance.hide();
          resolve();
        }, duration);
      } else {
        resolve();
      }
    });
  }
</script> 
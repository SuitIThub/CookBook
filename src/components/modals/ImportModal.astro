---
import BaseModal from './BaseModal.astro';

interface Props {
  id?: string;
}

const { id = 'import-modal' } = Astro.props;
---

<div id={id} class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
  <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4 shadow-xl">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-medium text-gray-900 dark:text-white">Rezepte importieren</h3>
      <button id="close-import-modal" class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <!-- Import Type Selector -->
    <div class="mb-4">
      <div class="flex border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-700">
        <button id="import-file-tab" class="flex-1 px-4 py-2 text-sm font-medium text-gray-900 dark:text-white bg-white dark:bg-gray-800 rounded-l-lg border-r border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:bg-orange-50 dark:focus:bg-orange-900/50 transition-colors">
          Datei
        </button>
        <button id="import-url-tab" class="flex-1 px-4 py-2 text-sm font-medium text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:bg-orange-50 dark:focus:bg-orange-900/50 transition-colors">
          URL
        </button>
      </div>
    </div>
    
    <!-- File Import Content -->
    <div id="import-file-content">
      <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center hover:border-orange-400 dark:hover:border-orange-500 transition-colors">
        <svg class="mx-auto h-12 w-12 text-gray-400 dark:text-gray-500" stroke="currentColor" fill="none" viewBox="0 0 48 48">
          <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3-3m-3 3l3 3m-3-3H21" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <div class="mt-4">
          <label for="file-upload" class="cursor-pointer">
            <span class="mt-2 block text-sm font-medium text-gray-900 dark:text-white">
              Datei auswählen oder hier ablegen
            </span>
            <span class="mt-1 block text-xs text-gray-500 dark:text-gray-400">
              JSON oder RCB Dateien (.json, .rcb)
            </span>
          </label>
          <input id="file-upload" name="file-upload" type="file" accept=".json,.rcb" class="sr-only">
        </div>
      </div>
    </div>
    
    <!-- URL Import Content -->
    <div id="import-url-content" class="hidden">
      <div class="space-y-4">
        <div>
          <label for="recipe-url" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Rezept-URL eingeben
          </label>
          <input 
            type="url" 
            id="recipe-url" 
            placeholder="https://www.chefkoch.de/rezepte/..." 
            class="form-input"
          >
          <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
            Unterstützt: Chefkoch.de, Lecker.de und viele andere Websites mit Rezept-Daten
          </p>
        </div>
        <div id="url-preview" class="hidden p-4 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600">
          <div class="space-y-3">
            <div class="text-sm text-gray-600 dark:text-gray-300">
              <strong>Erkannte Website:</strong> <span id="detected-site" class="text-orange-600 dark:text-orange-400"></span>
            </div>
            
            <div id="extractor-details" class="text-sm text-gray-600 dark:text-gray-300">
              <div class="font-medium mb-2">Extraktor-Funktionen:</div>
              <div class="grid grid-cols-2 gap-2 text-xs">
                <div class="flex items-center space-x-2">
                  <span id="ingredient-groups-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Zutatengruppen</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="preparation-groups-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Zubereitungsgruppen</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="images-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Bilder</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="nutrition-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Nährwerte</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="metadata-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Metadaten</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="keywords-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Keywords</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="category-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Kategorie</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="difficulty-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Schwierigkeit</span>
                </div>
                <div class="flex items-center space-x-2">
                  <span id="time-support" class="w-3 h-3 rounded-full bg-gray-400"></span>
                  <span>Zeit-Extraktion</span>
                </div>
              </div>
              <div id="extractor-description" class="mt-2 text-xs text-gray-500 dark:text-gray-400 italic"></div>
            </div>
          </div>
        </div>
        
        <div class="flex justify-end space-x-3">
          <button id="check-url-btn" class="btn btn-secondary">
            URL prüfen
          </button>
          <button id="import-url-btn" class="btn btn-primary" disabled>
            Importieren
          </button>
        </div>
      </div>
    </div>
    
    <div class="flex justify-end space-x-3 mt-6">
      <button id="cancel-import" class="btn btn-secondary">
        Abbrechen
      </button>
      <button id="import-file-btn" class="btn btn-primary">
        Importieren
      </button>
    </div>
  </div>
</div>

<script>
  // Define window interface with custom properties
  declare global {
    interface Window {
      showSuccess: (message: string, duration?: number) => Promise<void>;
      showError: (message: string, duration?: number) => Promise<void>;
      // Entferne die doppelte Deklaration, da sie bereits in WarningImportModal.astro definiert ist
      // showImportWarnings: (warnings: string[], onContinue?: () => void) => void;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const importModal = document.getElementById('import-modal');
    const closeImportModal = document.getElementById('close-import-modal');
    const cancelImport = document.getElementById('cancel-import');
    const importFileTab = document.getElementById('import-file-tab');
    const importUrlTab = document.getElementById('import-url-tab');
    const importFileContent = document.getElementById('import-file-content');
    const importUrlContent = document.getElementById('import-url-content');
    const fileUpload = document.getElementById('file-upload') as HTMLInputElement;
    const recipeUrl = document.getElementById('recipe-url') as HTMLInputElement;
    const checkUrlBtn = document.getElementById('check-url-btn');
    const importUrlBtn = document.getElementById('import-url-btn');
    const importFileBtn = document.getElementById('import-file-btn');
    const urlPreview = document.getElementById('url-preview');
    
    // Close modal
    [closeImportModal, cancelImport].forEach(el => {
      el?.addEventListener('click', () => {
        importModal?.classList.add('hidden');
        resetImportModal();
      });
    });
    
    // Tab switching
    importFileTab?.addEventListener('click', () => {
      importFileTab.classList.add('text-gray-900', 'dark:text-white', 'bg-white', 'dark:bg-gray-800');
      importFileTab.classList.remove('text-gray-500', 'dark:text-gray-400', 'bg-gray-50', 'dark:bg-gray-700');
      
      importUrlTab?.classList.remove('text-gray-900', 'dark:text-white', 'bg-white', 'dark:bg-gray-800');
      importUrlTab?.classList.add('text-gray-500', 'dark:text-gray-400', 'bg-gray-50', 'dark:bg-gray-700');
      
      importFileContent?.classList.remove('hidden');
      importUrlContent?.classList.add('hidden');
      
      importFileBtn?.classList.remove('hidden');
      importUrlBtn?.classList.add('hidden');
    });
    
    importUrlTab?.addEventListener('click', () => {
      importUrlTab.classList.add('text-gray-900', 'dark:text-white', 'bg-white', 'dark:bg-gray-800');
      importUrlTab.classList.remove('text-gray-500', 'dark:text-gray-400', 'bg-gray-50', 'dark:bg-gray-700');
      
      importFileTab?.classList.remove('text-gray-900', 'dark:text-white', 'bg-white', 'dark:bg-gray-800');
      importFileTab?.classList.add('text-gray-500', 'dark:text-gray-400', 'bg-gray-50', 'dark:bg-gray-700');
      
      importUrlContent?.classList.remove('hidden');
      importFileContent?.classList.add('hidden');
      
      importUrlBtn?.classList.remove('hidden');
      importFileBtn?.classList.add('hidden');
    });
    
    // File upload handling
    fileUpload?.addEventListener('change', (e) => {
      const input = e.target as HTMLInputElement;
      if (input.files && input.files.length > 0) {
        importFileBtn?.removeAttribute('disabled');
      } else {
        importFileBtn?.setAttribute('disabled', 'disabled');
      }
    });
    
    // URL checking
    checkUrlBtn?.addEventListener('click', async () => {
      const url = recipeUrl?.value;
      if (!url) return;
      
      try {
        const response = await fetch(`/api/recipes/import/preview?url=${encodeURIComponent(url)}`);
        if (response.ok) {
          const data = await response.json();
          
          // Update UI with extractor capabilities
          updateExtractorCapabilities(data);
          
          // Show preview
          urlPreview?.classList.remove('hidden');
          
          // Enable import button
          importUrlBtn?.removeAttribute('disabled');
        } else {
          const error = await response.json();
          (window as any).showError(error.error || 'URL konnte nicht verarbeitet werden');
        }
      } catch (error) {
        console.error('Error checking URL:', error);
        (window as any).showError('Fehler bei der Überprüfung der URL');
      }
    });
    
    // Import URL
    importUrlBtn?.addEventListener('click', async () => {
      const url = recipeUrl?.value;
      if (!url) return;
      
      try {
        console.log('Starting URL import for:', url);
        const response = await fetch('/api/recipes/import/url', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ url })
        });
        
        if (response.ok) {
          const data = await response.json();
          console.log('Import successful, received data:', data);
          
          // Hide modal
          importModal?.classList.add('hidden');
          
          // Show success message
          window.showSuccess('Rezept erfolgreich importiert');
          
          // Debug: Check if window functions exist
          console.log('DEBUG: window.showImportWarnings exists:', typeof window.showImportWarnings === 'function');
          console.log('DEBUG: window.warningImportModal exists:', !!window.warningImportModal);
          
          // Show warnings if any
          if (data.warnings && data.warnings.length > 0) {
            console.log('Showing import warnings:', data.warnings);
            
            // Check if the warning modal element exists
            const warningModal = document.getElementById('warning-import-modal');
            console.log('Warning modal element exists:', !!warningModal);
            
            // Try direct DOM manipulation if needed
            if (warningModal && (!window.showImportWarnings || !window.warningImportModal)) {
              console.log('Fallback: Trying direct DOM manipulation for warnings');
              
              // Find warning list element
              const warningList = document.getElementById('warning-list');
              if (warningList) {
                warningList.innerHTML = data.warnings.map((warning: string) => `
                  <div class="flex items-start p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
                    <svg class="w-5 h-5 text-yellow-500 mt-0.5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
                    </svg>
                    <span class="text-gray-800 dark:text-gray-200">${warning}</span>
                  </div>
                `).join('');
                
                // Show modal
                warningModal.classList.remove('hidden');
                document.body.classList.add('overflow-hidden');
                
                // Setup continue button
                const continueButton = document.getElementById('continue-to-recipe');
                if (continueButton) {
                  continueButton.onclick = () => {
                    warningModal.classList.add('hidden');
                    document.body.classList.remove('overflow-hidden');
                    window.location.href = `/rezept/${data.recipeId}`;
                  };
                }
              }
            } else if (typeof window.showImportWarnings === 'function') {
              console.log('Calling showImportWarnings function');
              window.showImportWarnings(data.warnings, () => {
                // Navigate to the new recipe
                console.log('Warning modal callback triggered, navigating to recipe:', data.recipeId);
                window.location.href = `/rezept/${data.recipeId}`;
              });
            } else {
              console.warn('showImportWarnings function not found! Redirecting immediately.');
              // Fallback if function not available
              window.location.href = `/rezept/${data.recipeId}`;
            }
          } else {
            console.log('No warnings, navigating directly to recipe:', data.recipeId);
            // Navigate to the new recipe
            window.location.href = `/rezept/${data.recipeId}`;
          }
        } else {
          const error = await response.json();
          console.error('Import failed with error:', error);
          window.showError(error.error || 'Fehler beim Importieren des Rezepts');
        }
      } catch (error) {
        console.error('Error importing recipe:', error);
        window.showError('Fehler beim Importieren des Rezepts');
      }
    });
    
    // Import file
    importFileBtn?.addEventListener('click', async () => {
      const input = fileUpload as HTMLInputElement;
      if (!input.files || input.files.length === 0) return;
      
      const file = input.files[0];
      const formData = new FormData();
      formData.append('file', file);
      
      try {
        const response = await fetch('/api/recipes/import', {
          method: 'POST',
          body: formData
        });
        
        if (response.ok) {
          const data = await response.json();
          
          // Hide modal
          importModal?.classList.add('hidden');
          
          // Show success message
          (window as any).showSuccess('Rezept erfolgreich importiert');
          
          // Navigate to the new recipe or recipes list
          if (data.recipeIds && data.recipeIds.length === 1) {
            window.location.href = `/rezept/${data.recipeIds[0]}`;
          } else if (data.recipeIds && data.recipeIds.length > 1) {
            (window as any).showSuccess(`${data.recipeIds.length} Rezepte erfolgreich importiert`);
            window.location.href = '/rezepte';
          } else {
            window.location.href = '/rezepte';
          }
        } else {
          const error = await response.json();
          (window as any).showError(error.error || 'Fehler beim Importieren des Rezepts');
        }
      } catch (error) {
        console.error('Error importing recipe:', error);
        (window as any).showError('Fehler beim Importieren des Rezepts');
      }
    });
    
    // Update extractor capabilities UI
    function updateExtractorCapabilities(data: any) {
      const detectedSite = document.getElementById('detected-site');
      if (detectedSite) {
        detectedSite.textContent = data.site || 'Unbekannt';
      }
      
      // Update support indicators
      updateSupportIndicator('ingredient-groups-support', data.capabilities?.supportsIngredientGroups);
      updateSupportIndicator('preparation-groups-support', data.capabilities?.supportsPreparationGroups);
      updateSupportIndicator('images-support', data.capabilities?.supportsImages);
      updateSupportIndicator('nutrition-support', data.capabilities?.supportsNutrition);
      updateSupportIndicator('metadata-support', data.capabilities?.supportsMetadata);
      updateSupportIndicator('keywords-support', data.capabilities?.supportsKeywords);
      updateSupportIndicator('category-support', data.capabilities?.supportsCategory);
      updateSupportIndicator('difficulty-support', data.capabilities?.supportsDifficulty);
      updateSupportIndicator('time-support', data.capabilities?.supportsTimeExtraction);
      
      // Update description
      const extractorDescription = document.getElementById('extractor-description');
      if (extractorDescription) {
        extractorDescription.textContent = data.capabilities?.description || '';
      }
    }
    
    // Update support indicator color
    function updateSupportIndicator(id: string, supported?: boolean) {
      const indicator = document.getElementById(id);
      if (!indicator) return;
      
      if (supported === true) {
        indicator.classList.remove('bg-gray-400', 'bg-red-500');
        indicator.classList.add('bg-green-500');
      } else if (supported === false) {
        indicator.classList.remove('bg-gray-400', 'bg-green-500');
        indicator.classList.add('bg-red-500');
      } else {
        indicator.classList.remove('bg-green-500', 'bg-red-500');
        indicator.classList.add('bg-gray-400');
      }
    }
    
    // Reset modal state
    function resetImportModal() {
      if (fileUpload) (fileUpload as HTMLInputElement).value = '';
      if (recipeUrl) (recipeUrl as HTMLInputElement).value = '';
      if (urlPreview) urlPreview.classList.add('hidden');
      if (importUrlBtn) importUrlBtn.setAttribute('disabled', 'disabled');
      if (importFileBtn) importFileBtn.setAttribute('disabled', 'disabled');
      
      // Reset to file tab
      importFileTab?.click();
    }
    
    // Handle drag and drop
    const dropArea = document.querySelector('.border-dashed');
    
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropArea?.addEventListener(eventName, preventDefaults, false);
    });
    
    function preventDefaults(e: Event) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    ['dragenter', 'dragover'].forEach(eventName => {
      dropArea?.addEventListener(eventName, highlight, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
      dropArea?.addEventListener(eventName, unhighlight, false);
    });
    
    function highlight() {
      dropArea?.classList.add('border-orange-400', 'dark:border-orange-500');
    }
    
    function unhighlight() {
      dropArea?.classList.remove('border-orange-400', 'dark:border-orange-500');
    }
    
    dropArea?.addEventListener('drop', handleDrop, false);
    
    function handleDrop(e: Event) {
      const dragEvent = e as DragEvent;
      const dt = dragEvent.dataTransfer;
      if (!dt) return;
      
      const files = dt.files;
      if (files && files.length > 0) {
        (fileUpload as HTMLInputElement).files = files;
        importFileBtn?.removeAttribute('disabled');
      }
    }
  });
</script> 